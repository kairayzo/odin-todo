(()=>{"use strict";var e={426:(e,n,t)=>{t.d(n,{Z:()=>d});var r=t(537),o=t.n(r),i=t(645),a=t.n(i)()(o());a.push([e.id,"@import url(https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&display=swap);"]),a.push([e.id,"* {\n    margin: 0;\n    padding: 0;\n    font-family: Roboto, sans-serif;\n    --todo-gridgap: 0.6rem;\n    --theme-red: #E0175A;\n    --theme-orange: #ECB329;\n    --theme-blue: #33C6F1;\n    --theme-green: #29B77F;\n    --theme-gray: rgb(234, 234, 234);\n}\n\nbody {\n    width: 100vw;\n    min-height: 100vh;\n    display: grid;\n    grid-template-areas: \n        'sidebar header'\n        'sidebar content';\n    grid-template-rows: 4rem 1fr;\n    grid-template-columns: 16rem 1fr;\n    overflow: hidden;\n}\n\n#header {\n    /* background-color: orange; */\n    border-bottom: var(--theme-gray) solid 0.2rem;\n    grid-area: header;\n    display: flex;\n    justify-content: space-between;\n}\n\n#sidebar {\n    /* background-color: blue; */\n    grid-area: sidebar;\n    border-right: var(--theme-gray) solid 0.2rem;\n    display: flex;\n    flex-direction: column;\n}\n\n#content {\n    display: grid;\n    grid-template-columns: 1fr;\n    grid-area: content;\n    justify-items: center;\n}\n\n.with-form {\n    grid-template-columns: 1fr 24rem;\n    grid-template-areas: 'content form';\n}\n\n#form {\n    font-size: 1rem;\n    padding: 1rem;\n    border-left: var(--theme-gray) solid 0.2rem;\n    display: flex;\n    flex-direction: column;\n    gap: 1rem;\n    grid-area: form;\n}\n\n.header-logo-container {\n    height: 100%;\n    width: 4rem;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n\n.logo {\n    width: 50px;\n}\n\n.logo-container {\n    padding: 0rem 1rem;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    gap: 1rem;\n}\n\n.logo-title {\n    width: 100%;\n    font-size: 2rem;\n}\n\n#user-container {\n    padding: 0rem 1rem;\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    gap: 1rem;\n}\n\n.user-icon {\n    border-radius: 50%;\n}\n\n#user-name {\n    font-size: 1.4rem;\n}\n\n.project-container {\n    max-width: 600px;\n    width: 100%;\n    padding: 2rem 3rem;\n    border-radius: 1rem;\n    display: flex;\n    flex-direction: column;\n    gap: 1rem;\n}\n\n.project-title-container {\n    display: flex;\n    align-items: center;\n    gap: 1rem;\n}\n\n.project-title {\n    font-size: 1.4rem;\n    font-weight: bold;\n}\n\n.project-add-todo-btn {\n    color: gray;\n    font-size: 1rem;\n    text-align: left;\n    border: solid 1px var(--theme-gray);\n    border-radius: 0.5rem;\n    padding: 0.5rem 1rem;\n    background-color: inherit;\n    display: flex;\n    align-items: center;\n    gap: 1rem;\n    cursor: pointer;\n}\n\n.project-add-todo-btn:hover {\n    color: darkgray;\n}\n\n.project-todo-container {\n    display: flex;\n    flex-direction: column;\n}\n\n.todo-container {\n    font-size: 1rem;\n    padding: 0.5rem 1rem;\n    display: flex;\n    flex-direction: column;\n    gap: var(--todo-gridgap);\n    cursor: pointer;\n}\n\n.todo-title-container {\n    display: grid;\n    grid-template-areas: \n        'checkbox title info';\n    grid-template-columns: 1rem 1fr auto;\n    grid-gap: 1rem;\n    align-items: center;\n    /* display: flex;\n    justify-content: space-between;\n    align-items: center;\n    grid-area: title */\n}\n\n.todo-checkbox {\n    width: 1rem;\n    height: 1rem;\n    border-radius: 50%;\n    cursor: pointer;\n    grid-area: checkbox;\n}\n\n.todo-checkbox:hover {\n    background-color: lightgray;\n}\n\n.todo-title {\n    font-weight: bold;\n    line-height: 1.5rem;\n    grid-area: title\n}\n\n.todo-info-container {\n    display: flex;\n    gap: 1rem;\n    grid-area: info\n}\n\n.todo-duedate {\n    width: 100px;\n}\n\n.todo-priority-container {\n    width: 60px;\n    display: flex;\n    gap: 0.7rem;\n}\n\n.todo-desc {\n    padding-left: 2rem;\n    grid-area: desc;\n}\n\n#todo-form-title-container {\n    display: flex;\n    gap: 1rem;\n    justify-content: space-between;\n    align-items: center;\n}\n\n#todo-form-title {\n    padding: 0 0.5rem;\n    font-size: 1rem;\n    font-weight: bold;\n    width: 100%;\n    max-width: 300px;\n}\n\n#todo-form-info-container {\n    display: flex;\n    gap: 1rem;\n}\n\n#todo-form-duedate-container {\n    display: flex;\n    gap: 0.5rem;\n}\n\n#todo-form-priority-container {\n    width: 60px;\n    display: flex;\n    gap: 0.5rem;\n}\n\n#todo-form-desc-container {\n    font-size: 1rem;\n    display: flex;\n    justify-content: center;\n    gap: 1rem;\n}\n\n#todo-form-desc {\n    padding: 0 0.5rem;\n    font-size: 1rem;\n    flex: 1\n}\n\n#todo-form-duedate-container {\n    width: 100px;\n}\n\n#todo-form-save-btn {\n    font-size: 1rem;\n    width: 60px;\n    padding: 0rem auto;\n}\n\n#todo-form-close-btn {\n    font-size: 1rem;\n    width: 90px;\n    padding: 0rem auto;\n}\n\n/* #sidebar-projects-container {\n    display: flex;\n    flex-direction: column;\n    gap: 2rem;\n    background-color: lightgray;\n    padding: 2rem 1rem;\n} */\n\n#sidebar-title-container {\n    margin-bottom: 1rem;\n    display: grid;\n    grid-template-areas: 'title button';\n    grid-template-columns: auto 3rem;\n    gap: 1rem;\n    font-size: 1.4rem;\n    font-weight: bold;\n}\n\n#sidebar-title {\n    padding-left: 1rem;\n    height: 4rem;\n    display: flex;\n    align-items: center;\n    grid-area: title;\n}\n\n#hide-sidebar-btn, #show-sidebar-btn{\n    font-size: 1.4rem;\n    padding: 0 1rem;\n    width: 1rem;\n    grid-area: button;\n}\n\n#sidebar-projects {\n    margin-bottom: 0.5rem;\n    display: flex;\n    flex-direction: column;\n}\n\n.sidebar-project {\n    padding: 0.5rem 1rem;\n    display: grid;\n    grid-template-columns: auto 20px 20px;\n    font-size: 1.2rem;\n    gap: 1rem;\n    cursor: pointer;\n}\n\n.sidebar-edit-btn, .sidebar-delete-btn {\n    opacity: 0.3;\n}\n\n.sidebar-edit-btn:hover, .sidebar-delete-btn:hover {\n    opacity: 1;\n}\n\n.segment {\n    height: 0.3rem;\n    padding: 0.1rem 0;\n    background-color: inherit;\n}\n\n.hovering {\n    background-color: var(--theme-blue);\n}\n\n.selected {\n    background-color: var(--theme-gray);\n    margin: 0 0.5rem;\n    border-radius: 0.5rem;\n    font-weight: bold;\n}\n\n#sidebar-add-project-btn {\n    font-size: 1.2rem;\n    padding: 0.5rem 1rem;\n    display: grid;\n    grid-template-columns: 1rem auto;\n    gap: 1rem;\n    cursor: pointer;\n}\n\n#hide-sidebar-btn, #show-sidebar-btn,\n#project-form-add-btn, #project-form-close-btn,\n#sidebar-add-project-icon, \n.sidebar-arrange-icon, .sidebar-edit-btn, .sidebar-delete-btn,\n#project-form-close-btn, #project-form-add-btn,\n.todo-arrange, .todo-priority-icon,\n#form-close-btn\n{\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    cursor: pointer;\n}\n\n#project-form {\n    display: flex;\n    gap: 1rem;\n}\n\n#project-form-title {\n    padding: 0.5rem 1rem;\n    font-size: 1.2rem;\n    width: 100%;\n    border: none;\n}\n\n#project-form-title:focus {\n    outline: none;\n}\n\n#form-title-container {\n    /* height: 4rem; */\n    display: grid;\n    grid-template-columns: 1fr 1rem;\n    align-items: center;\n    gap: 1rem;\n\n}\n\n#form-title {\n    font-size: 1.2rem;\n    padding: 0.5rem;\n    border: 0.1rem solid var(--theme-gray);\n    border-radius: 0.2rem;\n}\n\n#form-desc {\n    padding: 0.5rem;\n    font-size: 1rem;\n    width: 100%;\n    border: 0.1rem solid var(--theme-gray);\n    border-radius: 0.2rem;\n}\n\n#form-project, #form-duedate {\n    padding: 0 0.5rem;\n    font-size: 1rem;\n}\n\n#form-project-container, #form-duedate-container{\n    display: grid;\n    grid-template-columns: 100px 150px;\n}\n\n#form-priority-container {\n    display: grid;\n    grid-template-columns: 100px repeat(4, 50px);\n}\n\n#form-priority-container div:not(:first-child) {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n\n#form-priority-container input {\n    display: none;\n}\n\n#form-priority-container label {\n    opacity: 0.1;\n}\n\n#form-priority-container label.selected {\n    opacity: 1;\n    /* border: 2px solid black */\n}\n\n#form-actions-container {\n    height: 100%;\n    display: flex;\n    align-items: end;\n    gap: 1rem;\n}\n\n#form-actions-container button{\n    font-weight: bold;\n    height: min-content;\n    font-size: 1rem;\n    padding: 0.7rem 1rem;\n    border-radius: 0.5rem;\n    border: 0.1rem solid var(--theme-gray);\n    flex: 1;\n    cursor: pointer;\n}\n\n#form-delete-btn {\n    background-color: inherit;\n}\n\n#form-save-btn {\n    background-color: gold;\n}","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"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",sourcesContent:["@import url('https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&display=swap');\r\n\r\n* {\r\n    margin: 0;\r\n    padding: 0;\r\n    font-family: Roboto, sans-serif;\r\n    --todo-gridgap: 0.6rem;\r\n    --theme-red: #E0175A;\r\n    --theme-orange: #ECB329;\r\n    --theme-blue: #33C6F1;\r\n    --theme-green: #29B77F;\r\n    --theme-gray: rgb(234, 234, 234);\r\n}\r\n\r\nbody {\r\n    width: 100vw;\r\n    min-height: 100vh;\r\n    display: grid;\r\n    grid-template-areas: \r\n        'sidebar header'\r\n        'sidebar content';\r\n    grid-template-rows: 4rem 1fr;\r\n    grid-template-columns: 16rem 1fr;\r\n    overflow: hidden;\r\n}\r\n\r\n#header {\r\n    /* background-color: orange; */\r\n    border-bottom: var(--theme-gray) solid 0.2rem;\r\n    grid-area: header;\r\n    display: flex;\r\n    justify-content: space-between;\r\n}\r\n\r\n#sidebar {\r\n    /* background-color: blue; */\r\n    grid-area: sidebar;\r\n    border-right: var(--theme-gray) solid 0.2rem;\r\n    display: flex;\r\n    flex-direction: column;\r\n}\r\n\r\n#content {\r\n    display: grid;\r\n    grid-template-columns: 1fr;\r\n    grid-area: content;\r\n    justify-items: center;\r\n}\r\n\r\n.with-form {\r\n    grid-template-columns: 1fr 24rem;\r\n    grid-template-areas: 'content form';\r\n}\r\n\r\n#form {\r\n    font-size: 1rem;\r\n    padding: 1rem;\r\n    border-left: var(--theme-gray) solid 0.2rem;\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: 1rem;\r\n    grid-area: form;\r\n}\r\n\r\n.header-logo-container {\r\n    height: 100%;\r\n    width: 4rem;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n}\r\n\r\n.logo {\r\n    width: 50px;\r\n}\r\n\r\n.logo-container {\r\n    padding: 0rem 1rem;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    gap: 1rem;\r\n}\r\n\r\n.logo-title {\r\n    width: 100%;\r\n    font-size: 2rem;\r\n}\r\n\r\n#user-container {\r\n    padding: 0rem 1rem;\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    gap: 1rem;\r\n}\r\n\r\n.user-icon {\r\n    border-radius: 50%;\r\n}\r\n\r\n#user-name {\r\n    font-size: 1.4rem;\r\n}\r\n\r\n.project-container {\r\n    max-width: 600px;\r\n    width: 100%;\r\n    padding: 2rem 3rem;\r\n    border-radius: 1rem;\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: 1rem;\r\n}\r\n\r\n.project-title-container {\r\n    display: flex;\r\n    align-items: center;\r\n    gap: 1rem;\r\n}\r\n\r\n.project-title {\r\n    font-size: 1.4rem;\r\n    font-weight: bold;\r\n}\r\n\r\n.project-add-todo-btn {\r\n    color: gray;\r\n    font-size: 1rem;\r\n    text-align: left;\r\n    border: solid 1px var(--theme-gray);\r\n    border-radius: 0.5rem;\r\n    padding: 0.5rem 1rem;\r\n    background-color: inherit;\r\n    display: flex;\r\n    align-items: center;\r\n    gap: 1rem;\r\n    cursor: pointer;\r\n}\r\n\r\n.project-add-todo-btn:hover {\r\n    color: darkgray;\r\n}\r\n\r\n.project-todo-container {\r\n    display: flex;\r\n    flex-direction: column;\r\n}\r\n\r\n.todo-container {\r\n    font-size: 1rem;\r\n    padding: 0.5rem 1rem;\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: var(--todo-gridgap);\r\n    cursor: pointer;\r\n}\r\n\r\n.todo-title-container {\r\n    display: grid;\r\n    grid-template-areas: \r\n        'checkbox title info';\r\n    grid-template-columns: 1rem 1fr auto;\r\n    grid-gap: 1rem;\r\n    align-items: center;\r\n    /* display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    grid-area: title */\r\n}\r\n\r\n.todo-checkbox {\r\n    width: 1rem;\r\n    height: 1rem;\r\n    border-radius: 50%;\r\n    cursor: pointer;\r\n    grid-area: checkbox;\r\n}\r\n\r\n.todo-checkbox:hover {\r\n    background-color: lightgray;\r\n}\r\n\r\n.todo-title {\r\n    font-weight: bold;\r\n    line-height: 1.5rem;\r\n    grid-area: title\r\n}\r\n\r\n.todo-info-container {\r\n    display: flex;\r\n    gap: 1rem;\r\n    grid-area: info\r\n}\r\n\r\n.todo-duedate {\r\n    width: 100px;\r\n}\r\n\r\n.todo-priority-container {\r\n    width: 60px;\r\n    display: flex;\r\n    gap: 0.7rem;\r\n}\r\n\r\n.todo-desc {\r\n    padding-left: 2rem;\r\n    grid-area: desc;\r\n}\r\n\r\n#todo-form-title-container {\r\n    display: flex;\r\n    gap: 1rem;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n}\r\n\r\n#todo-form-title {\r\n    padding: 0 0.5rem;\r\n    font-size: 1rem;\r\n    font-weight: bold;\r\n    width: 100%;\r\n    max-width: 300px;\r\n}\r\n\r\n#todo-form-info-container {\r\n    display: flex;\r\n    gap: 1rem;\r\n}\r\n\r\n#todo-form-duedate-container {\r\n    display: flex;\r\n    gap: 0.5rem;\r\n}\r\n\r\n#todo-form-priority-container {\r\n    width: 60px;\r\n    display: flex;\r\n    gap: 0.5rem;\r\n}\r\n\r\n#todo-form-desc-container {\r\n    font-size: 1rem;\r\n    display: flex;\r\n    justify-content: center;\r\n    gap: 1rem;\r\n}\r\n\r\n#todo-form-desc {\r\n    padding: 0 0.5rem;\r\n    font-size: 1rem;\r\n    flex: 1\r\n}\r\n\r\n#todo-form-duedate-container {\r\n    width: 100px;\r\n}\r\n\r\n#todo-form-save-btn {\r\n    font-size: 1rem;\r\n    width: 60px;\r\n    padding: 0rem auto;\r\n}\r\n\r\n#todo-form-close-btn {\r\n    font-size: 1rem;\r\n    width: 90px;\r\n    padding: 0rem auto;\r\n}\r\n\r\n/* #sidebar-projects-container {\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: 2rem;\r\n    background-color: lightgray;\r\n    padding: 2rem 1rem;\r\n} */\r\n\r\n#sidebar-title-container {\r\n    margin-bottom: 1rem;\r\n    display: grid;\r\n    grid-template-areas: 'title button';\r\n    grid-template-columns: auto 3rem;\r\n    gap: 1rem;\r\n    font-size: 1.4rem;\r\n    font-weight: bold;\r\n}\r\n\r\n#sidebar-title {\r\n    padding-left: 1rem;\r\n    height: 4rem;\r\n    display: flex;\r\n    align-items: center;\r\n    grid-area: title;\r\n}\r\n\r\n#hide-sidebar-btn, #show-sidebar-btn{\r\n    font-size: 1.4rem;\r\n    padding: 0 1rem;\r\n    width: 1rem;\r\n    grid-area: button;\r\n}\r\n\r\n#sidebar-projects {\r\n    margin-bottom: 0.5rem;\r\n    display: flex;\r\n    flex-direction: column;\r\n}\r\n\r\n.sidebar-project {\r\n    padding: 0.5rem 1rem;\r\n    display: grid;\r\n    grid-template-columns: auto 20px 20px;\r\n    font-size: 1.2rem;\r\n    gap: 1rem;\r\n    cursor: pointer;\r\n}\r\n\r\n.sidebar-edit-btn, .sidebar-delete-btn {\r\n    opacity: 0.3;\r\n}\r\n\r\n.sidebar-edit-btn:hover, .sidebar-delete-btn:hover {\r\n    opacity: 1;\r\n}\r\n\r\n.segment {\r\n    height: 0.3rem;\r\n    padding: 0.1rem 0;\r\n    background-color: inherit;\r\n}\r\n\r\n.hovering {\r\n    background-color: var(--theme-blue);\r\n}\r\n\r\n.selected {\r\n    background-color: var(--theme-gray);\r\n    margin: 0 0.5rem;\r\n    border-radius: 0.5rem;\r\n    font-weight: bold;\r\n}\r\n\r\n#sidebar-add-project-btn {\r\n    font-size: 1.2rem;\r\n    padding: 0.5rem 1rem;\r\n    display: grid;\r\n    grid-template-columns: 1rem auto;\r\n    gap: 1rem;\r\n    cursor: pointer;\r\n}\r\n\r\n#hide-sidebar-btn, #show-sidebar-btn,\r\n#project-form-add-btn, #project-form-close-btn,\r\n#sidebar-add-project-icon, \r\n.sidebar-arrange-icon, .sidebar-edit-btn, .sidebar-delete-btn,\r\n#project-form-close-btn, #project-form-add-btn,\r\n.todo-arrange, .todo-priority-icon,\r\n#form-close-btn\r\n{\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    cursor: pointer;\r\n}\r\n\r\n#project-form {\r\n    display: flex;\r\n    gap: 1rem;\r\n}\r\n\r\n#project-form-title {\r\n    padding: 0.5rem 1rem;\r\n    font-size: 1.2rem;\r\n    width: 100%;\r\n    border: none;\r\n}\r\n\r\n#project-form-title:focus {\r\n    outline: none;\r\n}\r\n\r\n#form-title-container {\r\n    /* height: 4rem; */\r\n    display: grid;\r\n    grid-template-columns: 1fr 1rem;\r\n    align-items: center;\r\n    gap: 1rem;\r\n\r\n}\r\n\r\n#form-title {\r\n    font-size: 1.2rem;\r\n    padding: 0.5rem;\r\n    border: 0.1rem solid var(--theme-gray);\r\n    border-radius: 0.2rem;\r\n}\r\n\r\n#form-desc {\r\n    padding: 0.5rem;\r\n    font-size: 1rem;\r\n    width: 100%;\r\n    border: 0.1rem solid var(--theme-gray);\r\n    border-radius: 0.2rem;\r\n}\r\n\r\n#form-project, #form-duedate {\r\n    padding: 0 0.5rem;\r\n    font-size: 1rem;\r\n}\r\n\r\n#form-project-container, #form-duedate-container{\r\n    display: grid;\r\n    grid-template-columns: 100px 150px;\r\n}\r\n\r\n#form-priority-container {\r\n    display: grid;\r\n    grid-template-columns: 100px repeat(4, 50px);\r\n}\r\n\r\n#form-priority-container div:not(:first-child) {\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n}\r\n\r\n#form-priority-container input {\r\n    display: none;\r\n}\r\n\r\n#form-priority-container label {\r\n    opacity: 0.1;\r\n}\r\n\r\n#form-priority-container label.selected {\r\n    opacity: 1;\r\n    /* border: 2px solid black */\r\n}\r\n\r\n#form-actions-container {\r\n    height: 100%;\r\n    display: flex;\r\n    align-items: end;\r\n    gap: 1rem;\r\n}\r\n\r\n#form-actions-container button{\r\n    font-weight: bold;\r\n    height: min-content;\r\n    font-size: 1rem;\r\n    padding: 0.7rem 1rem;\r\n    border-radius: 0.5rem;\r\n    border: 0.1rem solid var(--theme-gray);\r\n    flex: 1;\r\n    cursor: pointer;\r\n}\r\n\r\n#form-delete-btn {\r\n    background-color: inherit;\r\n}\r\n\r\n#form-save-btn {\r\n    background-color: gold;\r\n}"],sourceRoot:""}]);const d=a},645:e=>{e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var t="",r=void 0!==n[5];return n[4]&&(t+="@supports (".concat(n[4],") {")),n[2]&&(t+="@media ".concat(n[2]," {")),r&&(t+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),t+=e(n),r&&(t+="}"),n[2]&&(t+="}"),n[4]&&(t+="}"),t})).join("")},n.i=function(e,t,r,o,i){"string"==typeof e&&(e=[[null,e,void 0]]);var a={};if(r)for(var d=0;d<this.length;d++){var s=this[d][0];null!=s&&(a[s]=!0)}for(var c=0;c<e.length;c++){var l=[].concat(e[c]);r&&a[l[0]]||(void 0!==i&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=i),t&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=t):l[2]=t),o&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=o):l[4]="".concat(o)),n.push(l))}},n}},537:e=>{e.exports=function(e){var n=e[1],t=e[3];if(!t)return n;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),i="/*# ".concat(o," */");return[n].concat([i]).join("\n")}return[n].join("\n")}},379:e=>{var n=[];function t(e){for(var t=-1,r=0;r<n.length;r++)if(n[r].identifier===e){t=r;break}return t}function r(e,r){for(var i={},a=[],d=0;d<e.length;d++){var s=e[d],c=r.base?s[0]+r.base:s[0],l=i[c]||0,u="".concat(c," ").concat(l);i[c]=l+1;var A=t(u),m={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==A)n[A].references++,n[A].updater(m);else{var f=o(m,r);r.byIndex=d,n.splice(d,0,{identifier:u,updater:f,references:1})}a.push(u)}return a}function o(e,n){var t=n.domAPI(n);return t.update(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap&&n.supports===e.supports&&n.layer===e.layer)return;t.update(e=n)}else t.remove()}}e.exports=function(e,o){var i=r(e=e||[],o=o||{});return function(e){e=e||[];for(var a=0;a<i.length;a++){var d=t(i[a]);n[d].references--}for(var s=r(e,o),c=0;c<i.length;c++){var l=t(i[c]);0===n[l].references&&(n[l].updater(),n.splice(l,1))}i=s}}},569:e=>{var n={};e.exports=function(e,t){var r=function(e){if(void 0===n[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}n[e]=t}return n[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},216:e=>{e.exports=function(e){var n=document.createElement("style");return e.setAttributes(n,e.attributes),e.insert(n,e.options),n}},565:(e,n,t)=>{e.exports=function(e){var n=t.nc;n&&e.setAttribute("nonce",n)}},795:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var n=e.insertStyleElement(e);return{update:function(t){!function(e,n,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var o=void 0!==t.layer;o&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,o&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var i=t.sourceMap;i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),n.styleTagTransform(r,e,n.options)}(n,e,t)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)}}}},589:e=>{e.exports=function(e,n){if(n.styleSheet)n.styleSheet.cssText=e;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(e))}}}},n={};function t(r){var o=n[r];if(void 0!==o)return o.exports;var i=n[r]={id:r,exports:{}};return e[r](i,i.exports,t),i.exports}t.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return t.d(n,{a:n}),n},t.d=(e,n)=>{for(var r in n)t.o(n,r)&&!t.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:n[r]})},t.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),t.nc=void 0;var r={};(()=>{t.d(r,{Z:()=>Pe,J:()=>Ue});var e=t(379),n=t.n(e),o=t(795),i=t.n(o),a=t(569),d=t.n(a),s=t(565),c=t.n(s),l=t(216),u=t.n(l),A=t(589),m=t.n(A),f=t(426),p={};function g(e){return g="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},g(e)}function h(e,n){if(n.length<e)throw new TypeError(e+" argument"+(e>1?"s":"")+" required, but only "+n.length+" present")}function b(e){h(1,arguments);var n=Object.prototype.toString.call(e);return e instanceof Date||"object"===g(e)&&"[object Date]"===n?new Date(e.getTime()):"number"==typeof e||"[object Number]"===n?new Date(e):("string"!=typeof e&&"[object String]"!==n||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments"),console.warn((new Error).stack)),new Date(NaN))}function y(e){if(null===e||!0===e||!1===e)return NaN;var n=Number(e);return isNaN(n)?n:n<0?Math.ceil(n):Math.floor(n)}function C(e){h(1,arguments);var n=b(e),t=n.getUTCDay(),r=(t<1?7:0)+t-1;return n.setUTCDate(n.getUTCDate()-r),n.setUTCHours(0,0,0,0),n}function v(e){h(1,arguments);var n=b(e),t=n.getUTCFullYear(),r=new Date(0);r.setUTCFullYear(t+1,0,4),r.setUTCHours(0,0,0,0);var o=C(r),i=new Date(0);i.setUTCFullYear(t,0,4),i.setUTCHours(0,0,0,0);var a=C(i);return n.getTime()>=o.getTime()?t+1:n.getTime()>=a.getTime()?t:t-1}p.styleTagTransform=m(),p.setAttributes=c(),p.insert=d().bind(null,"head"),p.domAPI=i(),p.insertStyleElement=u(),n()(f.Z,p),f.Z&&f.Z.locals&&f.Z.locals;var B={};function w(){return B}function I(e,n){var t,r,o,i,a,d,s,c;h(1,arguments);var l=w(),u=y(null!==(t=null!==(r=null!==(o=null!==(i=null==n?void 0:n.weekStartsOn)&&void 0!==i?i:null==n||null===(a=n.locale)||void 0===a||null===(d=a.options)||void 0===d?void 0:d.weekStartsOn)&&void 0!==o?o:l.weekStartsOn)&&void 0!==r?r:null===(s=l.locale)||void 0===s||null===(c=s.options)||void 0===c?void 0:c.weekStartsOn)&&void 0!==t?t:0);if(!(u>=0&&u<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var A=b(e),m=A.getUTCDay(),f=(m<u?7:0)+m-u;return A.setUTCDate(A.getUTCDate()-f),A.setUTCHours(0,0,0,0),A}function x(e,n){var t,r,o,i,a,d,s,c;h(1,arguments);var l=b(e),u=l.getUTCFullYear(),A=w(),m=y(null!==(t=null!==(r=null!==(o=null!==(i=null==n?void 0:n.firstWeekContainsDate)&&void 0!==i?i:null==n||null===(a=n.locale)||void 0===a||null===(d=a.options)||void 0===d?void 0:d.firstWeekContainsDate)&&void 0!==o?o:A.firstWeekContainsDate)&&void 0!==r?r:null===(s=A.locale)||void 0===s||null===(c=s.options)||void 0===c?void 0:c.firstWeekContainsDate)&&void 0!==t?t:1);if(!(m>=1&&m<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var f=new Date(0);f.setUTCFullYear(u+1,0,m),f.setUTCHours(0,0,0,0);var p=I(f,n),g=new Date(0);g.setUTCFullYear(u,0,m),g.setUTCHours(0,0,0,0);var C=I(g,n);return l.getTime()>=p.getTime()?u+1:l.getTime()>=C.getTime()?u:u-1}function j(e,n){for(var t=e<0?"-":"",r=Math.abs(e).toString();r.length<n;)r="0"+r;return t+r}const k=function(e,n){var t=e.getUTCFullYear(),r=t>0?t:1-t;return j("yy"===n?r%100:r,n.length)},S=function(e,n){var t=e.getUTCMonth();return"M"===n?String(t+1):j(t+1,2)},E=function(e,n){return j(e.getUTCDate(),n.length)},T=function(e,n){return j(e.getUTCHours()%12||12,n.length)},M=function(e,n){return j(e.getUTCHours(),n.length)},L=function(e,n){return j(e.getUTCMinutes(),n.length)},q=function(e,n){return j(e.getUTCSeconds(),n.length)},D=function(e,n){var t=n.length,r=e.getUTCMilliseconds();return j(Math.floor(r*Math.pow(10,t-3)),n.length)};var W={G:function(e,n,t){var r=e.getUTCFullYear()>0?1:0;switch(n){case"G":case"GG":case"GGG":return t.era(r,{width:"abbreviated"});case"GGGGG":return t.era(r,{width:"narrow"});default:return t.era(r,{width:"wide"})}},y:function(e,n,t){if("yo"===n){var r=e.getUTCFullYear(),o=r>0?r:1-r;return t.ordinalNumber(o,{unit:"year"})}return k(e,n)},Y:function(e,n,t,r){var o=x(e,r),i=o>0?o:1-o;return"YY"===n?j(i%100,2):"Yo"===n?t.ordinalNumber(i,{unit:"year"}):j(i,n.length)},R:function(e,n){return j(v(e),n.length)},u:function(e,n){return j(e.getUTCFullYear(),n.length)},Q:function(e,n,t){var r=Math.ceil((e.getUTCMonth()+1)/3);switch(n){case"Q":return String(r);case"QQ":return j(r,2);case"Qo":return t.ordinalNumber(r,{unit:"quarter"});case"QQQ":return t.quarter(r,{width:"abbreviated",context:"formatting"});case"QQQQQ":return t.quarter(r,{width:"narrow",context:"formatting"});default:return t.quarter(r,{width:"wide",context:"formatting"})}},q:function(e,n,t){var r=Math.ceil((e.getUTCMonth()+1)/3);switch(n){case"q":return String(r);case"qq":return j(r,2);case"qo":return t.ordinalNumber(r,{unit:"quarter"});case"qqq":return t.quarter(r,{width:"abbreviated",context:"standalone"});case"qqqqq":return t.quarter(r,{width:"narrow",context:"standalone"});default:return t.quarter(r,{width:"wide",context:"standalone"})}},M:function(e,n,t){var r=e.getUTCMonth();switch(n){case"M":case"MM":return S(e,n);case"Mo":return t.ordinalNumber(r+1,{unit:"month"});case"MMM":return t.month(r,{width:"abbreviated",context:"formatting"});case"MMMMM":return t.month(r,{width:"narrow",context:"formatting"});default:return t.month(r,{width:"wide",context:"formatting"})}},L:function(e,n,t){var r=e.getUTCMonth();switch(n){case"L":return String(r+1);case"LL":return j(r+1,2);case"Lo":return t.ordinalNumber(r+1,{unit:"month"});case"LLL":return t.month(r,{width:"abbreviated",context:"standalone"});case"LLLLL":return t.month(r,{width:"narrow",context:"standalone"});default:return t.month(r,{width:"wide",context:"standalone"})}},w:function(e,n,t,r){var o=function(e,n){h(1,arguments);var t=b(e),r=I(t,n).getTime()-function(e,n){var t,r,o,i,a,d,s,c;h(1,arguments);var l=w(),u=y(null!==(t=null!==(r=null!==(o=null!==(i=null==n?void 0:n.firstWeekContainsDate)&&void 0!==i?i:null==n||null===(a=n.locale)||void 0===a||null===(d=a.options)||void 0===d?void 0:d.firstWeekContainsDate)&&void 0!==o?o:l.firstWeekContainsDate)&&void 0!==r?r:null===(s=l.locale)||void 0===s||null===(c=s.options)||void 0===c?void 0:c.firstWeekContainsDate)&&void 0!==t?t:1),A=x(e,n),m=new Date(0);return m.setUTCFullYear(A,0,u),m.setUTCHours(0,0,0,0),I(m,n)}(t,n).getTime();return Math.round(r/6048e5)+1}(e,r);return"wo"===n?t.ordinalNumber(o,{unit:"week"}):j(o,n.length)},I:function(e,n,t){var r=function(e){h(1,arguments);var n=b(e),t=C(n).getTime()-function(e){h(1,arguments);var n=v(e),t=new Date(0);return t.setUTCFullYear(n,0,4),t.setUTCHours(0,0,0,0),C(t)}(n).getTime();return Math.round(t/6048e5)+1}(e);return"Io"===n?t.ordinalNumber(r,{unit:"week"}):j(r,n.length)},d:function(e,n,t){return"do"===n?t.ordinalNumber(e.getUTCDate(),{unit:"date"}):E(e,n)},D:function(e,n,t){var r=function(e){h(1,arguments);var n=b(e),t=n.getTime();n.setUTCMonth(0,1),n.setUTCHours(0,0,0,0);var r=t-n.getTime();return Math.floor(r/864e5)+1}(e);return"Do"===n?t.ordinalNumber(r,{unit:"dayOfYear"}):j(r,n.length)},E:function(e,n,t){var r=e.getUTCDay();switch(n){case"E":case"EE":case"EEE":return t.day(r,{width:"abbreviated",context:"formatting"});case"EEEEE":return t.day(r,{width:"narrow",context:"formatting"});case"EEEEEE":return t.day(r,{width:"short",context:"formatting"});default:return t.day(r,{width:"wide",context:"formatting"})}},e:function(e,n,t,r){var o=e.getUTCDay(),i=(o-r.weekStartsOn+8)%7||7;switch(n){case"e":return String(i);case"ee":return j(i,2);case"eo":return t.ordinalNumber(i,{unit:"day"});case"eee":return t.day(o,{width:"abbreviated",context:"formatting"});case"eeeee":return t.day(o,{width:"narrow",context:"formatting"});case"eeeeee":return t.day(o,{width:"short",context:"formatting"});default:return t.day(o,{width:"wide",context:"formatting"})}},c:function(e,n,t,r){var o=e.getUTCDay(),i=(o-r.weekStartsOn+8)%7||7;switch(n){case"c":return String(i);case"cc":return j(i,n.length);case"co":return t.ordinalNumber(i,{unit:"day"});case"ccc":return t.day(o,{width:"abbreviated",context:"standalone"});case"ccccc":return t.day(o,{width:"narrow",context:"standalone"});case"cccccc":return t.day(o,{width:"short",context:"standalone"});default:return t.day(o,{width:"wide",context:"standalone"})}},i:function(e,n,t){var r=e.getUTCDay(),o=0===r?7:r;switch(n){case"i":return String(o);case"ii":return j(o,n.length);case"io":return t.ordinalNumber(o,{unit:"day"});case"iii":return t.day(r,{width:"abbreviated",context:"formatting"});case"iiiii":return t.day(r,{width:"narrow",context:"formatting"});case"iiiiii":return t.day(r,{width:"short",context:"formatting"});default:return t.day(r,{width:"wide",context:"formatting"})}},a:function(e,n,t){var r=e.getUTCHours()/12>=1?"pm":"am";switch(n){case"a":case"aa":return t.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"aaa":return t.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return t.dayPeriod(r,{width:"narrow",context:"formatting"});default:return t.dayPeriod(r,{width:"wide",context:"formatting"})}},b:function(e,n,t){var r,o=e.getUTCHours();switch(r=12===o?"noon":0===o?"midnight":o/12>=1?"pm":"am",n){case"b":case"bb":return t.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"bbb":return t.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return t.dayPeriod(r,{width:"narrow",context:"formatting"});default:return t.dayPeriod(r,{width:"wide",context:"formatting"})}},B:function(e,n,t){var r,o=e.getUTCHours();switch(r=o>=17?"evening":o>=12?"afternoon":o>=4?"morning":"night",n){case"B":case"BB":case"BBB":return t.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"BBBBB":return t.dayPeriod(r,{width:"narrow",context:"formatting"});default:return t.dayPeriod(r,{width:"wide",context:"formatting"})}},h:function(e,n,t){if("ho"===n){var r=e.getUTCHours()%12;return 0===r&&(r=12),t.ordinalNumber(r,{unit:"hour"})}return T(e,n)},H:function(e,n,t){return"Ho"===n?t.ordinalNumber(e.getUTCHours(),{unit:"hour"}):M(e,n)},K:function(e,n,t){var r=e.getUTCHours()%12;return"Ko"===n?t.ordinalNumber(r,{unit:"hour"}):j(r,n.length)},k:function(e,n,t){var r=e.getUTCHours();return 0===r&&(r=24),"ko"===n?t.ordinalNumber(r,{unit:"hour"}):j(r,n.length)},m:function(e,n,t){return"mo"===n?t.ordinalNumber(e.getUTCMinutes(),{unit:"minute"}):L(e,n)},s:function(e,n,t){return"so"===n?t.ordinalNumber(e.getUTCSeconds(),{unit:"second"}):q(e,n)},S:function(e,n){return D(e,n)},X:function(e,n,t,r){var o=(r._originalDate||e).getTimezoneOffset();if(0===o)return"Z";switch(n){case"X":return U(o);case"XXXX":case"XX":return z(o);default:return z(o,":")}},x:function(e,n,t,r){var o=(r._originalDate||e).getTimezoneOffset();switch(n){case"x":return U(o);case"xxxx":case"xx":return z(o);default:return z(o,":")}},O:function(e,n,t,r){var o=(r._originalDate||e).getTimezoneOffset();switch(n){case"O":case"OO":case"OOO":return"GMT"+P(o,":");default:return"GMT"+z(o,":")}},z:function(e,n,t,r){var o=(r._originalDate||e).getTimezoneOffset();switch(n){case"z":case"zz":case"zzz":return"GMT"+P(o,":");default:return"GMT"+z(o,":")}},t:function(e,n,t,r){var o=r._originalDate||e;return j(Math.floor(o.getTime()/1e3),n.length)},T:function(e,n,t,r){return j((r._originalDate||e).getTime(),n.length)}};function P(e,n){var t=e>0?"-":"+",r=Math.abs(e),o=Math.floor(r/60),i=r%60;if(0===i)return t+String(o);var a=n||"";return t+String(o)+a+j(i,2)}function U(e,n){return e%60==0?(e>0?"-":"+")+j(Math.abs(e)/60,2):z(e,n)}function z(e,n){var t=n||"",r=e>0?"-":"+",o=Math.abs(e);return r+j(Math.floor(o/60),2)+t+j(o%60,2)}const Y=W;var H=function(e,n){switch(e){case"P":return n.date({width:"short"});case"PP":return n.date({width:"medium"});case"PPP":return n.date({width:"long"});default:return n.date({width:"full"})}},O=function(e,n){switch(e){case"p":return n.time({width:"short"});case"pp":return n.time({width:"medium"});case"ppp":return n.time({width:"long"});default:return n.time({width:"full"})}};const N={p:O,P:function(e,n){var t,r=e.match(/(P+)(p+)?/)||[],o=r[1],i=r[2];if(!i)return H(e,n);switch(o){case"P":t=n.dateTime({width:"short"});break;case"PP":t=n.dateTime({width:"medium"});break;case"PPP":t=n.dateTime({width:"long"});break;default:t=n.dateTime({width:"full"})}return t.replace("{{date}}",H(o,n)).replace("{{time}}",O(i,n))}};var F=["D","DD"],X=["YY","YYYY"];function R(e,n,t){if("YYYY"===e)throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(n,"`) for formatting years to the input `").concat(t,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("YY"===e)throw new RangeError("Use `yy` instead of `YY` (in `".concat(n,"`) for formatting years to the input `").concat(t,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("D"===e)throw new RangeError("Use `d` instead of `D` (in `".concat(n,"`) for formatting days of the month to the input `").concat(t,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("DD"===e)throw new RangeError("Use `dd` instead of `DD` (in `".concat(n,"`) for formatting days of the month to the input `").concat(t,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"))}var G={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function J(e){return function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=n.width?String(n.width):e.defaultWidth;return e.formats[t]||e.formats[e.defaultWidth]}}const Q={date:J({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:J({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:J({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})};var _={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function Z(e){return function(n,t){var r;if("formatting"===(null!=t&&t.context?String(t.context):"standalone")&&e.formattingValues){var o=e.defaultFormattingWidth||e.defaultWidth,i=null!=t&&t.width?String(t.width):o;r=e.formattingValues[i]||e.formattingValues[o]}else{var a=e.defaultWidth,d=null!=t&&t.width?String(t.width):e.defaultWidth;r=e.values[d]||e.values[a]}return r[e.argumentCallback?e.argumentCallback(n):n]}}const $={ordinalNumber:function(e,n){var t=Number(e),r=t%100;if(r>20||r<10)switch(r%10){case 1:return t+"st";case 2:return t+"nd";case 3:return t+"rd"}return t+"th"},era:Z({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:Z({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(e){return e-1}}),month:Z({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:Z({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:Z({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})};function V(e){return function(n){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=t.width,o=r&&e.matchPatterns[r]||e.matchPatterns[e.defaultMatchWidth],i=n.match(o);if(!i)return null;var a,d=i[0],s=r&&e.parsePatterns[r]||e.parsePatterns[e.defaultParseWidth],c=Array.isArray(s)?function(e,n){for(var t=0;t<e.length;t++)if(e[t].test(d))return t}(s):function(e,n){for(var t in e)if(e.hasOwnProperty(t)&&e[t].test(d))return t}(s);return a=e.valueCallback?e.valueCallback(c):c,{value:a=t.valueCallback?t.valueCallback(a):a,rest:n.slice(d.length)}}}var K,ee={ordinalNumber:(K={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(e){return parseInt(e,10)}},function(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},t=e.match(K.matchPattern);if(!t)return null;var r=t[0],o=e.match(K.parsePattern);if(!o)return null;var i=K.valueCallback?K.valueCallback(o[0]):o[0];return{value:i=n.valueCallback?n.valueCallback(i):i,rest:e.slice(r.length)}}),era:V({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:V({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(e){return e+1}}),month:V({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:V({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:V({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})};const ne={code:"en-US",formatDistance:function(e,n,t){var r,o=G[e];return r="string"==typeof o?o:1===n?o.one:o.other.replace("{{count}}",n.toString()),null!=t&&t.addSuffix?t.comparison&&t.comparison>0?"in "+r:r+" ago":r},formatLong:Q,formatRelative:function(e,n,t,r){return _[e]},localize:$,match:ee,options:{weekStartsOn:0,firstWeekContainsDate:1}};var te=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,re=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,oe=/^'([^]*?)'?$/,ie=/''/g,ae=/[a-zA-Z]/;function de(e,n,t){var r,o,i,a,d,s,c,l,u,A,m,f,p,C,v,B,I,x;h(2,arguments);var j=String(n),k=w(),S=null!==(r=null!==(o=null==t?void 0:t.locale)&&void 0!==o?o:k.locale)&&void 0!==r?r:ne,E=y(null!==(i=null!==(a=null!==(d=null!==(s=null==t?void 0:t.firstWeekContainsDate)&&void 0!==s?s:null==t||null===(c=t.locale)||void 0===c||null===(l=c.options)||void 0===l?void 0:l.firstWeekContainsDate)&&void 0!==d?d:k.firstWeekContainsDate)&&void 0!==a?a:null===(u=k.locale)||void 0===u||null===(A=u.options)||void 0===A?void 0:A.firstWeekContainsDate)&&void 0!==i?i:1);if(!(E>=1&&E<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var T=y(null!==(m=null!==(f=null!==(p=null!==(C=null==t?void 0:t.weekStartsOn)&&void 0!==C?C:null==t||null===(v=t.locale)||void 0===v||null===(B=v.options)||void 0===B?void 0:B.weekStartsOn)&&void 0!==p?p:k.weekStartsOn)&&void 0!==f?f:null===(I=k.locale)||void 0===I||null===(x=I.options)||void 0===x?void 0:x.weekStartsOn)&&void 0!==m?m:0);if(!(T>=0&&T<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(!S.localize)throw new RangeError("locale must contain localize property");if(!S.formatLong)throw new RangeError("locale must contain formatLong property");var M=b(e);if(!function(e){if(h(1,arguments),!function(e){return h(1,arguments),e instanceof Date||"object"===g(e)&&"[object Date]"===Object.prototype.toString.call(e)}(e)&&"number"!=typeof e)return!1;var n=b(e);return!isNaN(Number(n))}(M))throw new RangeError("Invalid time value");var L=function(e){var n=new Date(Date.UTC(e.getFullYear(),e.getMonth(),e.getDate(),e.getHours(),e.getMinutes(),e.getSeconds(),e.getMilliseconds()));return n.setUTCFullYear(e.getFullYear()),e.getTime()-n.getTime()}(M),q=function(e,n){return h(2,arguments),function(e,n){h(2,arguments);var t=b(e).getTime(),r=y(n);return new Date(t+r)}(e,-y(n))}(M,L),D={firstWeekContainsDate:E,weekStartsOn:T,locale:S,_originalDate:M};return j.match(re).map((function(e){var n=e[0];return"p"===n||"P"===n?(0,N[n])(e,S.formatLong):e})).join("").match(te).map((function(r){if("''"===r)return"'";var o,i,a=r[0];if("'"===a)return(i=(o=r).match(oe))?i[1].replace(ie,"'"):o;var d,s=Y[a];if(s)return null!=t&&t.useAdditionalWeekYearTokens||(d=r,-1===X.indexOf(d))||R(r,n,String(e)),null!=t&&t.useAdditionalDayOfYearTokens||!function(e){return-1!==F.indexOf(e)}(r)||R(r,n,String(e)),s(q,r,S.localize,D);if(a.match(ae))throw new RangeError("Format string contains an unescaped latin alphabet character `"+a+"`");return r})).join("")}function se(e,n="",t="",r=""){const o=document.createElement(e);if("input"==e){if(o.type=n,"text"==n)return o.id=t,o.name=t,o.placeholder=r,o;if("radio"==n)return o.id=t,o.value=t.slice(-1),o.name=r,o}if(n)if(n.includes(" ")){const e=n.split(" ");for(const n in e)o.classList.add(e[n])}else o.classList.add(n);return"select"==e&&(o.name=r,o.id=t),"option"==e&&(o.id=t,o.value=r,o.innerHTML=r),"textarea"==e&&(o.id=t,o.name=t,o.innerHTML=r),"label"==e?(o.htmlFor=t,o.innerHTML=r,o):"img"==e?(o.src=t,o.alt=r,o):"a"==e?(o.href=t,o.innerHTML=r,o):"form"==e?(o.id=t,o):(t&&(o.id=t),r&&(o.innerHTML=r),o)}function ce(e){e.forEach((e=>{e.classList.remove("selected")}))}const le="#E0175A",ue="#ECB329",Ae="#33C6F1",me="#29B77F";class fe{id=Date.now();constructor(e,n,t,r){this.title=e,this.desc=n,this.dueDate=t,this.priority=r}get title(){return this._title}set title(e){this._title=e}get desc(){return this._desc}set desc(e){this._desc=e}get dueDate(){return this._dueDate}set dueDate(e){this._dueDate=e}get priority(){return this._priority}set priority(e){this._priority=e}get id(){return this._id}toJSON(){return{title:this.title,desc:this.desc,dueDate:this.dueDate,priority:this.priority,id:this.id}}}function pe(){const e=[];for(const n in Pe)e.push(Object.keys(Pe[n])[0]);return e}function ge(e){const n=pe();for(const t in n)if(n[t]==e)return t}function he(e,n,t="",r="",o=""){const i=new fe(n,t,r,o),a=ge(e);Pe[a][e].push(i),Ue()}function be(e,n){const t=ge(e),r=Pe[t][e];for(const e in r)if(r[e].id==n)return[t,e];return!1}function ye(e,n){const t=be(e,n);Pe[t[0]][e].splice(t[1],1),Ue()}function Ce(e,n){const t=be(e,n);return Pe[t[0]][e][t[1]]}function ve(e,n="",t="",r="",o="4",i=""){function a(e){const n=document.querySelector("#form-priority-container-1 .form-priority-label"),t=document.querySelector("#form-priority-container-2 .form-priority-label"),r=document.querySelector("#form-priority-container-3 .form-priority-label"),o=document.querySelector("#form-priority-container-4 .form-priority-label");if(n&&t&&r&&o)switch(ce([n,t,r,o]),e){case"1":n.classList.add("selected");break;case"2":t.classList.add("selected");break;case"3":r.classList.add("selected");break;case"4":o.classList.add("selected")}}const d=se("form","","form"),s=se("div","","form-title-container"),c=se("input","text","form-title","Task");c.required=!0,n&&(c.value=n);const l=se("div","","form-close-btn");l.innerHTML='<i class="fa-solid fa-xmark"></i>',l.addEventListener("click",(e=>Be(e))),s.append(c,l);const u=se("div","","form-desc-container"),A=se("textarea","","form-desc");A.placeholder="Description",A.style.resize="none",A.rows="5",t&&(A.value=t),u.append(A);const m=se("div","","form-project-container"),f=se("div","","form-project-text","Add to: "),p=se("select","","form-project","form-project"),g=pe();for(const n in g){const t=se("option","","",g[n]);g[n]==e&&(t.selected="selected"),p.append(t)}m.append(f,p);const h=se("div","","form-duedate-container"),b=se("div","","form-duedate-text","Due date: "),y=se("input","date","form-duedate");r&&(y.value=r),h.append(b,y);const C=se("div","","form-priority-container"),v=se("div","","form-priority-text","Priority: "),B=se("div","","form-priority-container-1"),w=se("input","radio","form-priority-1","form-priority"),I=se("label","form-priority-label","form-priority-1");I.innerHTML=`<i class="fa-solid fa-flag" style="color: ${le}"></i>`,I.addEventListener("click",(()=>a("1"))),B.append(I,w);const x=se("div","","form-priority-container-2"),j=se("input","radio","form-priority-2","form-priority"),k=se("label","form-priority-label","form-priority-2");k.innerHTML=`<i class="fa-solid fa-flag" style="color: ${ue}"></i>`,k.addEventListener("click",(()=>a("2"))),x.append(k,j);const S=se("div","","form-priority-container-3"),E=se("input","radio","form-priority-3","form-priority"),T=se("label","form-priority-label","form-priority-3");T.innerHTML=`<i class="fa-solid fa-flag" style="color: ${Ae}"></i>`,T.addEventListener("click",(()=>a("3"))),S.append(T,E);const M=se("div","","form-priority-container-4"),L=se("input","radio","form-priority-4","form-priority"),q=se("label","form-priority-label","form-priority-4");switch(q.innerHTML=`<i class="fa-solid fa-flag" style="color: ${me}"></i>`,q.addEventListener("click",(()=>a("4"))),M.append(q,L),C.append(v,B,x,S,M),o){case"1":w.checked=!0,I.classList.add("selected");break;case"2":j.checked=!0,k.classList.add("selected");break;case"3":E.checked=!0,T.classList.add("selected");break;case"4":L.checked=!0,q.classList.add("selected")}const D=se("button","","form-delete-btn","Delete Task"),W=se("button","","form-save-btn","Save Changes");D.addEventListener("click",(n=>function(e,n,t=""){t&&ye(n,t),Be(e)}(n,e,i))),W.type="submit",d.addEventListener("submit",(n=>function(n,t=""){const r=n.key;if(r&&"Enter"==r||!r&&n.target){n.preventDefault();const r=document.querySelector("#form"),o=r["form-title"].value,i=r["form-project"].value,a=r["form-desc"].value,d=r["form-duedate"].value,s=r["form-priority"].value;t?function(e,n,t,r="",o="",i,a){if(e==n){const n=be(e,a);if(n){const a=Pe[n[0]][e][n[1]];a.title=t,r&&(a.desc=r),o&&(a.dueDate=o),a.priority=i,Ue()}}else be(n,a)&&(ye(n,a),he(e,t,r,o,i))}(i,e,o,a,d,s,t):he(i,o,a,d,s),Be(n)}}(n,i)));const P=se("div","","form-actions-container");return P.append(D,W),d.append(s,u,m,h,C,P),d}function Be(e){if(e.target){e.preventDefault();const n=document.querySelector("#content"),t=document.querySelector("#form"),r=document.querySelector(".project-add-todo-btn"),o=r.id;t.remove(),r.style.display="flex",n.classList.remove("with-form"),Ie(o)}}function we(e){const n=ge(e),t=Pe[n][e],r=[];for(const e in t)r.push(t[e].title);return r}function Ie(e=""){const n=document.querySelector("#content");let t;if(n.innerHTML="",e)t=ge(e);else{const e=document.querySelector("#sidebar-projects").querySelector(".selected");t=e?ge(e.id):0}const r=Pe[t],o=Object.keys(r)[0],i=r[o],a=function(e){const n=se("div","project-container",e),t=se("div","project-title-container"),r=se("div","project-title","",e),o=se("div","project-todo-container"),i=se("div","project-add-todo-btn",e),a=se("div","project-add-todo-icon");a.innerHTML='<i class="fa-solid fa-plus"></i>';const d=se("div","project-add-todo-text","","Add New Task");return i.append(a,d),i.addEventListener("click",(e=>function(e){if(e.target){const n=document.querySelector("#content"),t=e.target.closest(".project-container").id,r=e.target.closest(".project-add-todo-btn"),o=ve(t);n.append(o),n.classList.add("with-form"),document.querySelector("#form-title").focus(),r.style.display="none"}}(e))),t.append(r),n.append(t,o,i),n}(o);for(const e in i){const n=Ee(),t=i[e],r=xe(t.title,t.desc,(d=t.dueDate)?de(new Date(d),"dd/MM/yy"):"",t.priority,t.id);a.querySelector(".project-todo-container").append(n,r)}var d;const s=Ee();a.querySelector(".project-todo-container").append(s),n.append(a),Me(o)}function xe(e,n="",t="",r="4",o){const i=se("div","todo-container",o),a=new AbortController;i.addEventListener("click",(e=>function(e,n){if(e.target)if("todo-checkbox"==e.target.classList)n.abort();else{document.querySelector("#form")&&Be(e);const n=document.body,t=document.querySelector(".project-add-todo-btn"),r=e.target.closest(".project-container").id,o=Ce(r,e.target.closest(".todo-container").id);if(o){const e=ve(r,o.title,o.desc,o.dueDate,o.priority,o.id);n.append(e),n.style.gridTemplateColumns="16rem 1fr 24rem",n.style.gridTemplateAreas='"sidebar header form" "sidebar content form"',document.querySelector("#form-title").focus(),t.style.display="none"}}}(e,a)),{signal:a.signal});const d=se("div","todo-title-container"),s=se("button","todo-checkbox");s.addEventListener("click",(e=>function(e){if(e.target){const n=e.target.closest(".todo-container").id;ye(e.target.closest(".project-container").id,n),Ie()}}(e)));const c=se("div","todo-title","",e),l=se("div","todo-info-container");if(t){const e=se("div","todo-duedate","","📅 "+t);l.append(e)}const u=se("div","todo-priority-container"),A=se("div","todo-priority-icon");A.innerHTML='<i class="fa-solid fa-flag"></i>',A.style.color=je(r),s.style.borderColor=je(r);const m=se("div","todo-priority","",r);if(u.append(A,m),l.append(u),d.append(s,c,l),n){const e=se("div","todo-desc","",n);i.append(d,e)}else i.append(d);return i.draggable=!0,i.addEventListener("dragstart",(e=>function(e){e.target&&e.target.closest(".todo-container").classList.add("dragging")}(e))),i.addEventListener("dragover",(e=>e.preventDefault())),i.addEventListener("dragend",(e=>function(e){const n=document.querySelector(".hovering");if(e.target&&n){const t=e.target.closest(".todo-container"),r=t.id,o=t.closest(".project-container").id,i=be(o,r),a=n.nextSibling;let d;if(a){const e=be(o,a);d=i[1]<e[1]?[i[0],e[1]-1]:[i[0],e[1]]}else d=[i[0],we(o).length];!function(e,n,t,r){const o=Ce(e,n);Pe[r[0]][e].splice(t[1],1),Pe[r[0]][e].splice(r[1],0,o)}(o,r,i,d),t.classList.remove("dragging"),Ie()}}(e))),i}function je(e){switch(e){case"1":return le;case"2":return ue;case"3":return Ae;case"4":return me}}function ke(){const e=document.querySelector("#sidebar-projects");e.innerHTML="";for(const n in Pe){const t=Pe[n],r=Object.keys(t)[0],o=Ee(),i=Se(r);e.append(o,i)}const n=Ee();e.append(n),function(){const e=document.querySelector("#form-project");if(e){e.innerHTML="";const n=pe();for(const t in n){const r=se("option","","",n[t]);e.append(r)}}}()}function Se(e){const n=se("div","sidebar-project",e),t=se("div","sidebar-project-name","",e);if(n.append(t),!["Upcoming","Today"].includes(e)){const e=se("div","sidebar-edit-btn");e.innerHTML='<i class="fa-solid fa-pen"></i>';const t=se("div","sidebar-delete-btn");t.innerHTML='<i class="fa-solid fa-trash"></i>',e.addEventListener("click",(e=>function(e){if(e.target){const n=e.target.closest(".sidebar-project"),t=Te(n.id);n.replaceWith(t),Le(),document.querySelector("#sidebar-add-project-btn").style.display="none",[...document.querySelectorAll(".sidebar-edit-btn"),...document.querySelectorAll(".sidebar-delete-btn")].forEach((e=>{e.style.display="none"}))}}(e))),t.addEventListener("click",(e=>function(e){e.target&&(!function(e){const n=ge(e);Pe.splice(n,1),Ue()}(e.target.closest(".sidebar-project").id),ke(),Ie())}(e))),n.append(e,t)}n.draggable=!0;const r=new AbortController;return n.addEventListener("click",(e=>function(e,n){if(e.target)if(Array(e.target.classList[0]).includes("fa-solid"))n.abort();else{const n=e.target.closest(".sidebar-project").id;Me(n),Ie(n)}}(e,r)),{signal:r.signal}),n.addEventListener("dragstart",(e=>function(e){e.target&&e.target.closest(".sidebar-project").classList.add("dragging")}(e))),n.addEventListener("dragover",(e=>e.preventDefault())),n.addEventListener("dragend",(e=>function(e){const n=document.querySelector(".hovering");if(e.target&&n){const t=e.target.closest(".sidebar-project"),r=ge(t.id),o=n.nextSibling;let i;if(o){const e=ge(o.id);i=r<e?e-1:e}else i=pe().length;!function(e,n){const t=Pe[e];Pe.splice(e,1),Pe.splice(n,0,t)}(r,i),t.classList.remove("dragging"),ke()}}(e))),n}function Ee(){const e=se("div","segment");return e.addEventListener("dragover",(e=>function(e){if(e.target){e.preventDefault();const n=e.target,t=document.querySelector(".dragging");n.parentElement==t.parentElement&&n!=t.nextSibling&&n!=t.previousSibling&&n.classList.add("hovering")}}(e))),e.addEventListener("dragleave",(e=>function(e){e.target&&e.target.classList.remove("hovering")}(e))),e}function Te(e=""){const n=se("form","","project-form");if(e){const t=se("input","text","project-form-title");t.defaultValue=e;const r=se("div","","project-form-add-btn");r.innerHTML='<i class="fa-solid fa-check fa-xl"></i>';const o=se("div","","project-form-close-btn");o.innerHTML='<i class="fa-solid fa-x fa-lg"></i>',o.addEventListener("click",(e=>function(e){e.target&&(e.preventDefault(),document.querySelector("#sidebar-add-project-btn").style.display="flex",ke())}(e))),r.addEventListener("click",(n=>De(n,e))),n.addEventListener("submit",(n=>De(n,e))),n.addEventListener("keydown",(n=>De(n,e))),n.append(t,o,r)}else{const e=se("input","text","project-form-title","Project Name"),t=se("div","","project-form-close-btn");t.innerHTML='<i class="fa-solid fa-x fa-lg"></i>';const r=se("div","","project-form-add-btn");r.innerHTML='<i class="fa-solid fa-circle-plus fa-lg"></i>',t.addEventListener("click",(e=>function(e){if(e.target){e.preventDefault();const n=document.querySelector("#project-form"),t=document.querySelector("#sidebar-add-project-btn");n.remove(),t.style.display="flex",[...document.querySelectorAll(".sidebar-edit-btn"),...document.querySelectorAll(".sidebar-delete-btn")].forEach((e=>{e.style.display="flex"}))}}(e))),r.addEventListener("click",(e=>qe(e))),n.addEventListener("submit",(e=>qe(e))),n.addEventListener("keydown",(e=>qe(e))),n.append(e,t,r)}return n}function Me(e){ce(document.querySelectorAll(".sidebar-project")),document.querySelector("#sidebar-projects").querySelector(`[id='${e}']`).classList.add("selected")}function Le(){const e=document.querySelector("#project-form-title");if(e.value){const n=e.value.length;e.selectionStart=e.selectionEnd=n}e.focus()}function qe(e){const n=e.key;if(n&&"Enter"==n||!n&&e.target){e.preventDefault();const n=document.querySelector("#project-form"),t=n["project-form-title"].value,r=document.querySelector("#sidebar-add-project-btn");t?!function(e){if(pe().includes(e))return!1;{const n={};return n[e]=[],Pe.push(n),Ue(),!0}}(t)?(window.alert("Project Title already in use!"),Le()):(Ie(),ke(),n.remove(),r.style.display="flex",[...document.querySelectorAll(".sidebar-edit-btn"),...document.querySelectorAll(".sidebar-delete-btn")].forEach((e=>{e.style.display="flex"}))):(window.alert("Project Title cannot be empty!"),projectFormTitle.value=oldProjectTitle,Le())}}function De(e,n){const t=e.key;if(t&&"Enter"==t||!t&&e.target){e.preventDefault();const t=document.querySelector("#project-form"),r=document.querySelector("#project-form-title"),o=t["project-form-title"].value;if(o){const e=document.querySelector("#sidebar-add-project-btn"),t=function(e,n){if(e!=n){if(pe().includes(n))return!1;{const t=ge(e),r={};return r[n]=Pe[t][e],Pe[t]=r,Ue(),!0}}}(n,o);null==t?(e.style.display="flex",ke()):0==t?(window.alert("Project Title already in use!"),r.value=n,Le()):1==t&&(e.style.display="flex",ke(),Ie())}else window.alert("Project Title cannot be empty!"),r.value=n,Le()}}localStorage.getItem("todoList")||localStorage.setItem("todoList",JSON.stringify([{Upcoming:[]},{Today:[]}]));const We=JSON.parse(localStorage.getItem("todoList")),Pe=We;function Ue(){localStorage.setItem("todoList",JSON.stringify(We))}const ze=function(){const e=se("div","","header"),n=se("div","","show-sidebar-btn");n.innerHTML='<i class="fa-solid fa-bars"></i>',n.style.display="none",n.addEventListener("click",(e=>function(e){if(e.target){const e=document.querySelector("#sidebar"),n=document.querySelector("#show-sidebar-btn"),t=document.querySelector("#hide-sidebar-btn");e.style.display="flex",document.body.style='grid-template-areas:"sidebar header" "sidebar content";grid-template-columns: 16rem 1fr',n.style.display="none",t.style.display="flex"}}(e)));const t=se("div","logo-container"),r=se("img","logo","../dist/images/logo.png","Todo App icon"),o=se("div","logo-title","","My Todo"),i=se("div","","user-container"),a=se("div","user-icon");return a.innerHTML='<i class="fa-solid fa-user fa-xl"></i>',t.append(r,o),i.append(a),e.append(n,t,i),e}(),Ye=function(){const e=se("div","","sidebar"),n=se("div","","sidebar-title-container"),t=se("div","","sidebar-title","Projects"),r=se("div","","hide-sidebar-btn");r.innerHTML='<i class="fa-solid fa-bars"></i>',r.addEventListener("click",(e=>function(e){if(e.target){const e=document.querySelector("#sidebar"),n=document.querySelector("#hide-sidebar-btn"),t=document.querySelector("#show-sidebar-btn");e.style.display="none",n.style.display="none",document.body.style='grid-template-areas:"header" "content";grid-template-columns: 1fr',t.style.display="flex"}}(e))),n.append(t,r);const o=se("div","","sidebar-add-project-btn"),i=se("div","","sidebar-add-project-icon");i.innerHTML='<i class="fa-solid fa-plus"></i>';const a=se("div","","sidebar-project-add-text","Add New Project");o.append(i,a);const d=se("div","","sidebar-projects");return o.addEventListener("click",(e=>function(e){if(e.target){const e=document.querySelector("#sidebar-projects"),n=Te();e.append(n);const t=document.querySelector("#project-form-title"),r=document.querySelector("#sidebar-add-project-btn");t.focus(),r.style.display="none",[...document.querySelectorAll(".sidebar-edit-btn"),...document.querySelectorAll(".sidebar-delete-btn")].forEach((e=>{e.style.display="none"}))}}(e))),n.append(t),e.append(n,d,o),e}(),He=se("div","","content");document.body.append(Ye,ze,He),ke(),Ie()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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LEdBd0tuRCxTQUF5QkEsR0FDckIsR0FBSUEsRUFBRVIsT0FBUSxDQUNWLE1BQU1zZ0IsRUFBa0JwZ0IsU0FBU0MsY0FBYyxxQkFDekMyZ0IsRUFBa0JDLEtBQ3hCVCxFQUFnQmpHLE9BQU95RyxHQUN2QixNQUFNdUIsRUFBbUJuaUIsU0FBU0MsY0FBYyx1QkFDMUN3aUIsRUFBdUJ6aUIsU0FBU0MsY0FBYyw0QkFDcERraUIsRUFBaUI3RSxRQUNqQm1GLEVBQXFCNWlCLE1BQU0wYyxRQUFVLE9BSXBCLElBRk92YyxTQUFTZ2hCLGlCQUFpQix3QkFDeEJoaEIsU0FBU2doQixpQkFBaUIsd0JBRTNDL0osU0FBUWYsSUFDYkEsRUFBS3JXLE1BQU0wYyxRQUFVLFNBRTdCLENBRUosQ0ExTHlEcUksQ0FBZ0J0a0IsS0FFckVpa0IsRUFBc0JwSyxPQUFPcUssR0FDN0JULEVBQVE1SixPQUFPb0ssRUFBc0JuRSxFQUFpQnFDLEdBRS9Dc0IsQ0FDWCxDS3JCZ0JjLEdBQ1Z4b0IsR1BKY3laLEdBQWdCLE1BQU0sR0FBRyxXT003QzlWLFNBQVNxZSxLQUFLbEUsT0FBTzRKLEdBQVNGLEdBQVF4bkIsSUFFdEM4akIsS0FDQTNELEkiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90b2RvLWFwcC8uL3NyYy9zdHlsZS5jc3MiLCJ3ZWJwYWNrOi8vdG9kby1hcHAvLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzIiwid2VicGFjazovL3RvZG8tYXBwLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanMiLCJ3ZWJwYWNrOi8vdG9kby1hcHAvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanMiLCJ3ZWJwYWNrOi8vdG9kby1hcHAvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzIiwid2VicGFjazovL3RvZG8tYXBwLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzIiwid2VicGFjazovL3RvZG8tYXBwLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzIiwid2VicGFjazovL3RvZG8tYXBwLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanMiLCJ3ZWJwYWNrOi8vdG9kby1hcHAvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qcyIsIndlYnBhY2s6Ly90b2RvLWFwcC93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly90b2RvLWFwcC93ZWJwYWNrL3J1bnRpbWUvY29tcGF0IGdldCBkZWZhdWx0IGV4cG9ydCIsIndlYnBhY2s6Ly90b2RvLWFwcC93ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMiLCJ3ZWJwYWNrOi8vdG9kby1hcHAvd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCIsIndlYnBhY2s6Ly90b2RvLWFwcC93ZWJwYWNrL3J1bnRpbWUvbm9uY2UiLCJ3ZWJwYWNrOi8vdG9kby1hcHAvLi9zcmMvc3R5bGUuY3NzPzcxNjMiLCJ3ZWJwYWNrOi8vdG9kby1hcHAvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vdHlwZW9mLmpzIiwid2VicGFjazovL3RvZG8tYXBwLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL3JlcXVpcmVkQXJncy9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvLWFwcC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vdG9EYXRlL2luZGV4LmpzIiwid2VicGFjazovL3RvZG8tYXBwLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL3RvSW50ZWdlci9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvLWFwcC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9zdGFydE9mVVRDSVNPV2Vlay9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvLWFwcC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9nZXRVVENJU09XZWVrWWVhci9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvLWFwcC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9kZWZhdWx0T3B0aW9ucy9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvLWFwcC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9zdGFydE9mVVRDV2Vlay9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvLWFwcC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9nZXRVVENXZWVrWWVhci9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvLWFwcC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9hZGRMZWFkaW5nWmVyb3MvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby1hcHAvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL19saWIvZm9ybWF0L2xpZ2h0Rm9ybWF0dGVycy9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvLWFwcC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9mb3JtYXQvZm9ybWF0dGVycy9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvLWFwcC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9nZXRVVENXZWVrL2luZGV4LmpzIiwid2VicGFjazovL3RvZG8tYXBwLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL3N0YXJ0T2ZVVENXZWVrWWVhci9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvLWFwcC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9nZXRVVENJU09XZWVrL2luZGV4LmpzIiwid2VicGFjazovL3RvZG8tYXBwLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL3N0YXJ0T2ZVVENJU09XZWVrWWVhci9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvLWFwcC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9nZXRVVENEYXlPZlllYXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby1hcHAvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL19saWIvZm9ybWF0L2xvbmdGb3JtYXR0ZXJzL2luZGV4LmpzIiwid2VicGFjazovL3RvZG8tYXBwLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL3Byb3RlY3RlZFRva2Vucy9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvLWFwcC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vbG9jYWxlL2VuLVVTL19saWIvZm9ybWF0RGlzdGFuY2UvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby1hcHAvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS9fbGliL2J1aWxkRm9ybWF0TG9uZ0ZuL2luZGV4LmpzIiwid2VicGFjazovL3RvZG8tYXBwLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9sb2NhbGUvZW4tVVMvX2xpYi9mb3JtYXRMb25nL2luZGV4LmpzIiwid2VicGFjazovL3RvZG8tYXBwLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9sb2NhbGUvZW4tVVMvX2xpYi9mb3JtYXRSZWxhdGl2ZS9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvLWFwcC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vbG9jYWxlL19saWIvYnVpbGRMb2NhbGl6ZUZuL2luZGV4LmpzIiwid2VicGFjazovL3RvZG8tYXBwLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9sb2NhbGUvZW4tVVMvX2xpYi9sb2NhbGl6ZS9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvLWFwcC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vbG9jYWxlL19saWIvYnVpbGRNYXRjaEZuL2luZGV4LmpzIiwid2VicGFjazovL3RvZG8tYXBwLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9sb2NhbGUvZW4tVVMvX2xpYi9tYXRjaC9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvLWFwcC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vbG9jYWxlL19saWIvYnVpbGRNYXRjaFBhdHRlcm5Gbi9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvLWFwcC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vbG9jYWxlL2VuLVVTL2luZGV4LmpzIiwid2VicGFjazovL3RvZG8tYXBwLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL2RlZmF1bHRMb2NhbGUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby1hcHAvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2Zvcm1hdC9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvLWFwcC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vaXNWYWxpZC9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvLWFwcC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vaXNEYXRlL2luZGV4LmpzIiwid2VicGFjazovL3RvZG8tYXBwLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL2dldFRpbWV6b25lT2Zmc2V0SW5NaWxsaXNlY29uZHMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby1hcHAvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL3N1Yk1pbGxpc2Vjb25kcy9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvLWFwcC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vYWRkTWlsbGlzZWNvbmRzL2luZGV4LmpzIiwid2VicGFjazovL3RvZG8tYXBwLy4vc3JjL2hlbHBlci5qcyIsIndlYnBhY2s6Ly90b2RvLWFwcC8uL3NyYy90aGVtZS5qcyIsIndlYnBhY2s6Ly90b2RvLWFwcC8uL3NyYy90b2RvL2luZGV4LmpzIiwid2VicGFjazovL3RvZG8tYXBwLy4vc3JjL3Byb2plY3QvbGlzdFByb2plY3RzLmpzIiwid2VicGFjazovL3RvZG8tYXBwLy4vc3JjL3Byb2plY3QvZ2V0UHJvamVjdElkeC5qcyIsIndlYnBhY2s6Ly90b2RvLWFwcC8uL3NyYy90b2RvL25ld1RvZG8uanMiLCJ3ZWJwYWNrOi8vdG9kby1hcHAvLi9zcmMvdG9kby9nZXRUb2RvTG9jLmpzIiwid2VicGFjazovL3RvZG8tYXBwLy4vc3JjL3RvZG8vZGVsZXRlVG9kby5qcyIsIndlYnBhY2s6Ly90b2RvLWFwcC8uL3NyYy90b2RvL2dldFRvZG8uanMiLCJ3ZWJwYWNrOi8vdG9kby1hcHAvLi9zcmMvZm9ybS5qcyIsIndlYnBhY2s6Ly90b2RvLWFwcC8uL3NyYy90b2RvL2VkaXRUb2RvLmpzIiwid2VicGFjazovL3RvZG8tYXBwLy4vc3JjL3RvZG8vbGlzdFRvZG9zLmpzIiwid2VicGFjazovL3RvZG8tYXBwLy4vc3JjL2NvbnRlbnQuanMiLCJ3ZWJwYWNrOi8vdG9kby1hcHAvLi9zcmMvdG9kby9yZWFycmFuZ2VUb2RvLmpzIiwid2VicGFjazovL3RvZG8tYXBwLy4vc3JjL3NpZGViYXIuanMiLCJ3ZWJwYWNrOi8vdG9kby1hcHAvLi9zcmMvcHJvamVjdC9kZWxldGVQcm9qZWN0LmpzIiwid2VicGFjazovL3RvZG8tYXBwLy4vc3JjL3Byb2plY3QvcmVhcnJhbmdlUHJvamVjdC5qcyIsIndlYnBhY2s6Ly90b2RvLWFwcC8uL3NyYy9wcm9qZWN0L25ld1Byb2plY3QuanMiLCJ3ZWJwYWNrOi8vdG9kby1hcHAvLi9zcmMvcHJvamVjdC9lZGl0UHJvamVjdC5qcyIsIndlYnBhY2s6Ly90b2RvLWFwcC8uL3NyYy9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvLWFwcC8uL3NyYy9oZWFkZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiQGltcG9ydCB1cmwoaHR0cHM6Ly9mb250cy5nb29nbGVhcGlzLmNvbS9jc3MyP2ZhbWlseT1Sb2JvdG86d2dodEA0MDA7NzAwJmRpc3BsYXk9c3dhcCk7XCJdKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBgKiB7XHJcbiAgICBtYXJnaW46IDA7XHJcbiAgICBwYWRkaW5nOiAwO1xyXG4gICAgZm9udC1mYW1pbHk6IFJvYm90bywgc2Fucy1zZXJpZjtcclxuICAgIC0tdG9kby1ncmlkZ2FwOiAwLjZyZW07XHJcbiAgICAtLXRoZW1lLXJlZDogI0UwMTc1QTtcclxuICAgIC0tdGhlbWUtb3JhbmdlOiAjRUNCMzI5O1xyXG4gICAgLS10aGVtZS1ibHVlOiAjMzNDNkYxO1xyXG4gICAgLS10aGVtZS1ncmVlbjogIzI5Qjc3RjtcclxuICAgIC0tdGhlbWUtZ3JheTogcmdiKDIzNCwgMjM0LCAyMzQpO1xyXG59XHJcblxyXG5ib2R5IHtcclxuICAgIHdpZHRoOiAxMDB2dztcclxuICAgIG1pbi1oZWlnaHQ6IDEwMHZoO1xyXG4gICAgZGlzcGxheTogZ3JpZDtcclxuICAgIGdyaWQtdGVtcGxhdGUtYXJlYXM6IFxyXG4gICAgICAgICdzaWRlYmFyIGhlYWRlcidcclxuICAgICAgICAnc2lkZWJhciBjb250ZW50JztcclxuICAgIGdyaWQtdGVtcGxhdGUtcm93czogNHJlbSAxZnI7XHJcbiAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IDE2cmVtIDFmcjtcclxuICAgIG92ZXJmbG93OiBoaWRkZW47XHJcbn1cclxuXHJcbiNoZWFkZXIge1xyXG4gICAgLyogYmFja2dyb3VuZC1jb2xvcjogb3JhbmdlOyAqL1xyXG4gICAgYm9yZGVyLWJvdHRvbTogdmFyKC0tdGhlbWUtZ3JheSkgc29saWQgMC4ycmVtO1xyXG4gICAgZ3JpZC1hcmVhOiBoZWFkZXI7XHJcbiAgICBkaXNwbGF5OiBmbGV4O1xyXG4gICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xyXG59XHJcblxyXG4jc2lkZWJhciB7XHJcbiAgICAvKiBiYWNrZ3JvdW5kLWNvbG9yOiBibHVlOyAqL1xyXG4gICAgZ3JpZC1hcmVhOiBzaWRlYmFyO1xyXG4gICAgYm9yZGVyLXJpZ2h0OiB2YXIoLS10aGVtZS1ncmF5KSBzb2xpZCAwLjJyZW07XHJcbiAgICBkaXNwbGF5OiBmbGV4O1xyXG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcclxufVxyXG5cclxuI2NvbnRlbnQge1xyXG4gICAgZGlzcGxheTogZ3JpZDtcclxuICAgIGdyaWQtdGVtcGxhdGUtY29sdW1uczogMWZyO1xyXG4gICAgZ3JpZC1hcmVhOiBjb250ZW50O1xyXG4gICAganVzdGlmeS1pdGVtczogY2VudGVyO1xyXG59XHJcblxyXG4ud2l0aC1mb3JtIHtcclxuICAgIGdyaWQtdGVtcGxhdGUtY29sdW1uczogMWZyIDI0cmVtO1xyXG4gICAgZ3JpZC10ZW1wbGF0ZS1hcmVhczogJ2NvbnRlbnQgZm9ybSc7XHJcbn1cclxuXHJcbiNmb3JtIHtcclxuICAgIGZvbnQtc2l6ZTogMXJlbTtcclxuICAgIHBhZGRpbmc6IDFyZW07XHJcbiAgICBib3JkZXItbGVmdDogdmFyKC0tdGhlbWUtZ3JheSkgc29saWQgMC4ycmVtO1xyXG4gICAgZGlzcGxheTogZmxleDtcclxuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XHJcbiAgICBnYXA6IDFyZW07XHJcbiAgICBncmlkLWFyZWE6IGZvcm07XHJcbn1cclxuXHJcbi5oZWFkZXItbG9nby1jb250YWluZXIge1xyXG4gICAgaGVpZ2h0OiAxMDAlO1xyXG4gICAgd2lkdGg6IDRyZW07XHJcbiAgICBkaXNwbGF5OiBmbGV4O1xyXG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XHJcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xyXG59XHJcblxyXG4ubG9nbyB7XHJcbiAgICB3aWR0aDogNTBweDtcclxufVxyXG5cclxuLmxvZ28tY29udGFpbmVyIHtcclxuICAgIHBhZGRpbmc6IDByZW0gMXJlbTtcclxuICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcclxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XHJcbiAgICBnYXA6IDFyZW07XHJcbn1cclxuXHJcbi5sb2dvLXRpdGxlIHtcclxuICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgZm9udC1zaXplOiAycmVtO1xyXG59XHJcblxyXG4jdXNlci1jb250YWluZXIge1xyXG4gICAgcGFkZGluZzogMHJlbSAxcmVtO1xyXG4gICAgZGlzcGxheTogZmxleDtcclxuICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcclxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XHJcbiAgICBnYXA6IDFyZW07XHJcbn1cclxuXHJcbi51c2VyLWljb24ge1xyXG4gICAgYm9yZGVyLXJhZGl1czogNTAlO1xyXG59XHJcblxyXG4jdXNlci1uYW1lIHtcclxuICAgIGZvbnQtc2l6ZTogMS40cmVtO1xyXG59XHJcblxyXG4ucHJvamVjdC1jb250YWluZXIge1xyXG4gICAgbWF4LXdpZHRoOiA2MDBweDtcclxuICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgcGFkZGluZzogMnJlbSAzcmVtO1xyXG4gICAgYm9yZGVyLXJhZGl1czogMXJlbTtcclxuICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xyXG4gICAgZ2FwOiAxcmVtO1xyXG59XHJcblxyXG4ucHJvamVjdC10aXRsZS1jb250YWluZXIge1xyXG4gICAgZGlzcGxheTogZmxleDtcclxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XHJcbiAgICBnYXA6IDFyZW07XHJcbn1cclxuXHJcbi5wcm9qZWN0LXRpdGxlIHtcclxuICAgIGZvbnQtc2l6ZTogMS40cmVtO1xyXG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XHJcbn1cclxuXHJcbi5wcm9qZWN0LWFkZC10b2RvLWJ0biB7XHJcbiAgICBjb2xvcjogZ3JheTtcclxuICAgIGZvbnQtc2l6ZTogMXJlbTtcclxuICAgIHRleHQtYWxpZ246IGxlZnQ7XHJcbiAgICBib3JkZXI6IHNvbGlkIDFweCB2YXIoLS10aGVtZS1ncmF5KTtcclxuICAgIGJvcmRlci1yYWRpdXM6IDAuNXJlbTtcclxuICAgIHBhZGRpbmc6IDAuNXJlbSAxcmVtO1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogaW5oZXJpdDtcclxuICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xyXG4gICAgZ2FwOiAxcmVtO1xyXG4gICAgY3Vyc29yOiBwb2ludGVyO1xyXG59XHJcblxyXG4ucHJvamVjdC1hZGQtdG9kby1idG46aG92ZXIge1xyXG4gICAgY29sb3I6IGRhcmtncmF5O1xyXG59XHJcblxyXG4ucHJvamVjdC10b2RvLWNvbnRhaW5lciB7XHJcbiAgICBkaXNwbGF5OiBmbGV4O1xyXG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcclxufVxyXG5cclxuLnRvZG8tY29udGFpbmVyIHtcclxuICAgIGZvbnQtc2l6ZTogMXJlbTtcclxuICAgIHBhZGRpbmc6IDAuNXJlbSAxcmVtO1xyXG4gICAgZGlzcGxheTogZmxleDtcclxuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XHJcbiAgICBnYXA6IHZhcigtLXRvZG8tZ3JpZGdhcCk7XHJcbiAgICBjdXJzb3I6IHBvaW50ZXI7XHJcbn1cclxuXHJcbi50b2RvLXRpdGxlLWNvbnRhaW5lciB7XHJcbiAgICBkaXNwbGF5OiBncmlkO1xyXG4gICAgZ3JpZC10ZW1wbGF0ZS1hcmVhczogXHJcbiAgICAgICAgJ2NoZWNrYm94IHRpdGxlIGluZm8nO1xyXG4gICAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiAxcmVtIDFmciBhdXRvO1xyXG4gICAgZ3JpZC1nYXA6IDFyZW07XHJcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xyXG4gICAgLyogZGlzcGxheTogZmxleDtcclxuICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcclxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XHJcbiAgICBncmlkLWFyZWE6IHRpdGxlICovXHJcbn1cclxuXHJcbi50b2RvLWNoZWNrYm94IHtcclxuICAgIHdpZHRoOiAxcmVtO1xyXG4gICAgaGVpZ2h0OiAxcmVtO1xyXG4gICAgYm9yZGVyLXJhZGl1czogNTAlO1xyXG4gICAgY3Vyc29yOiBwb2ludGVyO1xyXG4gICAgZ3JpZC1hcmVhOiBjaGVja2JveDtcclxufVxyXG5cclxuLnRvZG8tY2hlY2tib3g6aG92ZXIge1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogbGlnaHRncmF5O1xyXG59XHJcblxyXG4udG9kby10aXRsZSB7XHJcbiAgICBmb250LXdlaWdodDogYm9sZDtcclxuICAgIGxpbmUtaGVpZ2h0OiAxLjVyZW07XHJcbiAgICBncmlkLWFyZWE6IHRpdGxlXHJcbn1cclxuXHJcbi50b2RvLWluZm8tY29udGFpbmVyIHtcclxuICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgICBnYXA6IDFyZW07XHJcbiAgICBncmlkLWFyZWE6IGluZm9cclxufVxyXG5cclxuLnRvZG8tZHVlZGF0ZSB7XHJcbiAgICB3aWR0aDogMTAwcHg7XHJcbn1cclxuXHJcbi50b2RvLXByaW9yaXR5LWNvbnRhaW5lciB7XHJcbiAgICB3aWR0aDogNjBweDtcclxuICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgICBnYXA6IDAuN3JlbTtcclxufVxyXG5cclxuLnRvZG8tZGVzYyB7XHJcbiAgICBwYWRkaW5nLWxlZnQ6IDJyZW07XHJcbiAgICBncmlkLWFyZWE6IGRlc2M7XHJcbn1cclxuXHJcbiN0b2RvLWZvcm0tdGl0bGUtY29udGFpbmVyIHtcclxuICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgICBnYXA6IDFyZW07XHJcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XHJcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xyXG59XHJcblxyXG4jdG9kby1mb3JtLXRpdGxlIHtcclxuICAgIHBhZGRpbmc6IDAgMC41cmVtO1xyXG4gICAgZm9udC1zaXplOiAxcmVtO1xyXG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XHJcbiAgICB3aWR0aDogMTAwJTtcclxuICAgIG1heC13aWR0aDogMzAwcHg7XHJcbn1cclxuXHJcbiN0b2RvLWZvcm0taW5mby1jb250YWluZXIge1xyXG4gICAgZGlzcGxheTogZmxleDtcclxuICAgIGdhcDogMXJlbTtcclxufVxyXG5cclxuI3RvZG8tZm9ybS1kdWVkYXRlLWNvbnRhaW5lciB7XHJcbiAgICBkaXNwbGF5OiBmbGV4O1xyXG4gICAgZ2FwOiAwLjVyZW07XHJcbn1cclxuXHJcbiN0b2RvLWZvcm0tcHJpb3JpdHktY29udGFpbmVyIHtcclxuICAgIHdpZHRoOiA2MHB4O1xyXG4gICAgZGlzcGxheTogZmxleDtcclxuICAgIGdhcDogMC41cmVtO1xyXG59XHJcblxyXG4jdG9kby1mb3JtLWRlc2MtY29udGFpbmVyIHtcclxuICAgIGZvbnQtc2l6ZTogMXJlbTtcclxuICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcclxuICAgIGdhcDogMXJlbTtcclxufVxyXG5cclxuI3RvZG8tZm9ybS1kZXNjIHtcclxuICAgIHBhZGRpbmc6IDAgMC41cmVtO1xyXG4gICAgZm9udC1zaXplOiAxcmVtO1xyXG4gICAgZmxleDogMVxyXG59XHJcblxyXG4jdG9kby1mb3JtLWR1ZWRhdGUtY29udGFpbmVyIHtcclxuICAgIHdpZHRoOiAxMDBweDtcclxufVxyXG5cclxuI3RvZG8tZm9ybS1zYXZlLWJ0biB7XHJcbiAgICBmb250LXNpemU6IDFyZW07XHJcbiAgICB3aWR0aDogNjBweDtcclxuICAgIHBhZGRpbmc6IDByZW0gYXV0bztcclxufVxyXG5cclxuI3RvZG8tZm9ybS1jbG9zZS1idG4ge1xyXG4gICAgZm9udC1zaXplOiAxcmVtO1xyXG4gICAgd2lkdGg6IDkwcHg7XHJcbiAgICBwYWRkaW5nOiAwcmVtIGF1dG87XHJcbn1cclxuXHJcbi8qICNzaWRlYmFyLXByb2plY3RzLWNvbnRhaW5lciB7XHJcbiAgICBkaXNwbGF5OiBmbGV4O1xyXG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcclxuICAgIGdhcDogMnJlbTtcclxuICAgIGJhY2tncm91bmQtY29sb3I6IGxpZ2h0Z3JheTtcclxuICAgIHBhZGRpbmc6IDJyZW0gMXJlbTtcclxufSAqL1xyXG5cclxuI3NpZGViYXItdGl0bGUtY29udGFpbmVyIHtcclxuICAgIG1hcmdpbi1ib3R0b206IDFyZW07XHJcbiAgICBkaXNwbGF5OiBncmlkO1xyXG4gICAgZ3JpZC10ZW1wbGF0ZS1hcmVhczogJ3RpdGxlIGJ1dHRvbic7XHJcbiAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IGF1dG8gM3JlbTtcclxuICAgIGdhcDogMXJlbTtcclxuICAgIGZvbnQtc2l6ZTogMS40cmVtO1xyXG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XHJcbn1cclxuXHJcbiNzaWRlYmFyLXRpdGxlIHtcclxuICAgIHBhZGRpbmctbGVmdDogMXJlbTtcclxuICAgIGhlaWdodDogNHJlbTtcclxuICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xyXG4gICAgZ3JpZC1hcmVhOiB0aXRsZTtcclxufVxyXG5cclxuI2hpZGUtc2lkZWJhci1idG4sICNzaG93LXNpZGViYXItYnRue1xyXG4gICAgZm9udC1zaXplOiAxLjRyZW07XHJcbiAgICBwYWRkaW5nOiAwIDFyZW07XHJcbiAgICB3aWR0aDogMXJlbTtcclxuICAgIGdyaWQtYXJlYTogYnV0dG9uO1xyXG59XHJcblxyXG4jc2lkZWJhci1wcm9qZWN0cyB7XHJcbiAgICBtYXJnaW4tYm90dG9tOiAwLjVyZW07XHJcbiAgICBkaXNwbGF5OiBmbGV4O1xyXG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcclxufVxyXG5cclxuLnNpZGViYXItcHJvamVjdCB7XHJcbiAgICBwYWRkaW5nOiAwLjVyZW0gMXJlbTtcclxuICAgIGRpc3BsYXk6IGdyaWQ7XHJcbiAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IGF1dG8gMjBweCAyMHB4O1xyXG4gICAgZm9udC1zaXplOiAxLjJyZW07XHJcbiAgICBnYXA6IDFyZW07XHJcbiAgICBjdXJzb3I6IHBvaW50ZXI7XHJcbn1cclxuXHJcbi5zaWRlYmFyLWVkaXQtYnRuLCAuc2lkZWJhci1kZWxldGUtYnRuIHtcclxuICAgIG9wYWNpdHk6IDAuMztcclxufVxyXG5cclxuLnNpZGViYXItZWRpdC1idG46aG92ZXIsIC5zaWRlYmFyLWRlbGV0ZS1idG46aG92ZXIge1xyXG4gICAgb3BhY2l0eTogMTtcclxufVxyXG5cclxuLnNlZ21lbnQge1xyXG4gICAgaGVpZ2h0OiAwLjNyZW07XHJcbiAgICBwYWRkaW5nOiAwLjFyZW0gMDtcclxuICAgIGJhY2tncm91bmQtY29sb3I6IGluaGVyaXQ7XHJcbn1cclxuXHJcbi5ob3ZlcmluZyB7XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS10aGVtZS1ibHVlKTtcclxufVxyXG5cclxuLnNlbGVjdGVkIHtcclxuICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLXRoZW1lLWdyYXkpO1xyXG4gICAgbWFyZ2luOiAwIDAuNXJlbTtcclxuICAgIGJvcmRlci1yYWRpdXM6IDAuNXJlbTtcclxuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xyXG59XHJcblxyXG4jc2lkZWJhci1hZGQtcHJvamVjdC1idG4ge1xyXG4gICAgZm9udC1zaXplOiAxLjJyZW07XHJcbiAgICBwYWRkaW5nOiAwLjVyZW0gMXJlbTtcclxuICAgIGRpc3BsYXk6IGdyaWQ7XHJcbiAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IDFyZW0gYXV0bztcclxuICAgIGdhcDogMXJlbTtcclxuICAgIGN1cnNvcjogcG9pbnRlcjtcclxufVxyXG5cclxuI2hpZGUtc2lkZWJhci1idG4sICNzaG93LXNpZGViYXItYnRuLFxyXG4jcHJvamVjdC1mb3JtLWFkZC1idG4sICNwcm9qZWN0LWZvcm0tY2xvc2UtYnRuLFxyXG4jc2lkZWJhci1hZGQtcHJvamVjdC1pY29uLCBcclxuLnNpZGViYXItYXJyYW5nZS1pY29uLCAuc2lkZWJhci1lZGl0LWJ0biwgLnNpZGViYXItZGVsZXRlLWJ0bixcclxuI3Byb2plY3QtZm9ybS1jbG9zZS1idG4sICNwcm9qZWN0LWZvcm0tYWRkLWJ0bixcclxuLnRvZG8tYXJyYW5nZSwgLnRvZG8tcHJpb3JpdHktaWNvbixcclxuI2Zvcm0tY2xvc2UtYnRuXHJcbntcclxuICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcclxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XHJcbiAgICBjdXJzb3I6IHBvaW50ZXI7XHJcbn1cclxuXHJcbiNwcm9qZWN0LWZvcm0ge1xyXG4gICAgZGlzcGxheTogZmxleDtcclxuICAgIGdhcDogMXJlbTtcclxufVxyXG5cclxuI3Byb2plY3QtZm9ybS10aXRsZSB7XHJcbiAgICBwYWRkaW5nOiAwLjVyZW0gMXJlbTtcclxuICAgIGZvbnQtc2l6ZTogMS4ycmVtO1xyXG4gICAgd2lkdGg6IDEwMCU7XHJcbiAgICBib3JkZXI6IG5vbmU7XHJcbn1cclxuXHJcbiNwcm9qZWN0LWZvcm0tdGl0bGU6Zm9jdXMge1xyXG4gICAgb3V0bGluZTogbm9uZTtcclxufVxyXG5cclxuI2Zvcm0tdGl0bGUtY29udGFpbmVyIHtcclxuICAgIC8qIGhlaWdodDogNHJlbTsgKi9cclxuICAgIGRpc3BsYXk6IGdyaWQ7XHJcbiAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IDFmciAxcmVtO1xyXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcclxuICAgIGdhcDogMXJlbTtcclxuXHJcbn1cclxuXHJcbiNmb3JtLXRpdGxlIHtcclxuICAgIGZvbnQtc2l6ZTogMS4ycmVtO1xyXG4gICAgcGFkZGluZzogMC41cmVtO1xyXG4gICAgYm9yZGVyOiAwLjFyZW0gc29saWQgdmFyKC0tdGhlbWUtZ3JheSk7XHJcbiAgICBib3JkZXItcmFkaXVzOiAwLjJyZW07XHJcbn1cclxuXHJcbiNmb3JtLWRlc2Mge1xyXG4gICAgcGFkZGluZzogMC41cmVtO1xyXG4gICAgZm9udC1zaXplOiAxcmVtO1xyXG4gICAgd2lkdGg6IDEwMCU7XHJcbiAgICBib3JkZXI6IDAuMXJlbSBzb2xpZCB2YXIoLS10aGVtZS1ncmF5KTtcclxuICAgIGJvcmRlci1yYWRpdXM6IDAuMnJlbTtcclxufVxyXG5cclxuI2Zvcm0tcHJvamVjdCwgI2Zvcm0tZHVlZGF0ZSB7XHJcbiAgICBwYWRkaW5nOiAwIDAuNXJlbTtcclxuICAgIGZvbnQtc2l6ZTogMXJlbTtcclxufVxyXG5cclxuI2Zvcm0tcHJvamVjdC1jb250YWluZXIsICNmb3JtLWR1ZWRhdGUtY29udGFpbmVye1xyXG4gICAgZGlzcGxheTogZ3JpZDtcclxuICAgIGdyaWQtdGVtcGxhdGUtY29sdW1uczogMTAwcHggMTUwcHg7XHJcbn1cclxuXHJcbiNmb3JtLXByaW9yaXR5LWNvbnRhaW5lciB7XHJcbiAgICBkaXNwbGF5OiBncmlkO1xyXG4gICAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiAxMDBweCByZXBlYXQoNCwgNTBweCk7XHJcbn1cclxuXHJcbiNmb3JtLXByaW9yaXR5LWNvbnRhaW5lciBkaXY6bm90KDpmaXJzdC1jaGlsZCkge1xyXG4gICAgZGlzcGxheTogZmxleDtcclxuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xyXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcclxufVxyXG5cclxuI2Zvcm0tcHJpb3JpdHktY29udGFpbmVyIGlucHV0IHtcclxuICAgIGRpc3BsYXk6IG5vbmU7XHJcbn1cclxuXHJcbiNmb3JtLXByaW9yaXR5LWNvbnRhaW5lciBsYWJlbCB7XHJcbiAgICBvcGFjaXR5OiAwLjE7XHJcbn1cclxuXHJcbiNmb3JtLXByaW9yaXR5LWNvbnRhaW5lciBsYWJlbC5zZWxlY3RlZCB7XHJcbiAgICBvcGFjaXR5OiAxO1xyXG4gICAgLyogYm9yZGVyOiAycHggc29saWQgYmxhY2sgKi9cclxufVxyXG5cclxuI2Zvcm0tYWN0aW9ucy1jb250YWluZXIge1xyXG4gICAgaGVpZ2h0OiAxMDAlO1xyXG4gICAgZGlzcGxheTogZmxleDtcclxuICAgIGFsaWduLWl0ZW1zOiBlbmQ7XHJcbiAgICBnYXA6IDFyZW07XHJcbn1cclxuXHJcbiNmb3JtLWFjdGlvbnMtY29udGFpbmVyIGJ1dHRvbntcclxuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xyXG4gICAgaGVpZ2h0OiBtaW4tY29udGVudDtcclxuICAgIGZvbnQtc2l6ZTogMXJlbTtcclxuICAgIHBhZGRpbmc6IDAuN3JlbSAxcmVtO1xyXG4gICAgYm9yZGVyLXJhZGl1czogMC41cmVtO1xyXG4gICAgYm9yZGVyOiAwLjFyZW0gc29saWQgdmFyKC0tdGhlbWUtZ3JheSk7XHJcbiAgICBmbGV4OiAxO1xyXG4gICAgY3Vyc29yOiBwb2ludGVyO1xyXG59XHJcblxyXG4jZm9ybS1kZWxldGUtYnRuIHtcclxuICAgIGJhY2tncm91bmQtY29sb3I6IGluaGVyaXQ7XHJcbn1cclxuXHJcbiNmb3JtLXNhdmUtYnRuIHtcclxuICAgIGJhY2tncm91bmQtY29sb3I6IGdvbGQ7XHJcbn1gLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9zdHlsZS5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpc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QVM7SUFDVCxlQUFlO0FBQ25COztBQUVBOzs7Ozs7OztJQVFJLGFBQWE7SUFDYix1QkFBdUI7SUFDdkIsbUJBQW1CO0lBQ25CLGVBQWU7QUFDbkI7O0FBRUE7SUFDSSxhQUFhO0lBQ2IsU0FBUztBQUNiOztBQUVBO0lBQ0ksb0JBQW9CO0lBQ3BCLGlCQUFpQjtJQUNqQixXQUFXO0lBQ1gsWUFBWTtBQUNoQjs7QUFFQTtJQUNJLGFBQWE7QUFDakI7O0FBRUE7SUFDSSxrQkFBa0I7SUFDbEIsYUFBYTtJQUNiLCtCQUErQjtJQUMvQixtQkFBbUI7SUFDbkIsU0FBUzs7QUFFYjs7QUFFQTtJQUNJLGlCQUFpQjtJQUNqQixlQUFlO0lBQ2Ysc0NBQXNDO0lBQ3RDLHFCQUFxQjtBQUN6Qjs7QUFFQTtJQUNJLGVBQWU7SUFDZixlQUFlO0lBQ2YsV0FBVztJQUNYLHNDQUFzQztJQUN0QyxxQkFBcUI7QUFDekI7O0FBRUE7SUFDSSxpQkFBaUI7SUFDakIsZUFBZTtBQUNuQjs7QUFFQTtJQUNJLGFBQWE7SUFDYixrQ0FBa0M7QUFDdEM7O0FBRUE7SUFDSSxhQUFhO0lBQ2IsNENBQTRDO0FBQ2hEOztBQUVBO0lBQ0ksYUFBYTtJQUNiLHVCQUF1QjtJQUN2QixtQkFBbUI7QUFDdkI7O0FBRUE7SUFDSSxhQUFhO0FBQ2pCOztBQUVBO0lBQ0ksWUFBWTtBQUNoQjs7QUFFQTtJQUNJLFVBQVU7SUFDViw0QkFBNEI7QUFDaEM7O0FBRUE7SUFDSSxZQUFZO0lBQ1osYUFBYTtJQUNiLGdCQUFnQjtJQUNoQixTQUFTO0FBQ2I7O0FBRUE7SUFDSSxpQkFBaUI7SUFDakIsbUJBQW1CO0lBQ25CLGVBQWU7SUFDZixvQkFBb0I7SUFDcEIscUJBQXFCO0lBQ3JCLHNDQUFzQztJQUN0QyxPQUFPO0lBQ1AsZUFBZTtBQUNuQjs7QUFFQTtJQUNJLHlCQUF5QjtBQUM3Qjs7QUFFQTtJQUNJLHNCQUFzQjtBQUMxQlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCJAaW1wb3J0IHVybCgnaHR0cHM6Ly9mb250cy5nb29nbGVhcGlzLmNvbS9jc3MyP2ZhbWlseT1Sb2JvdG86d2dodEA0MDA7NzAwJmRpc3BsYXk9c3dhcCcpO1xcclxcblxcclxcbioge1xcclxcbiAgICBtYXJnaW46IDA7XFxyXFxuICAgIHBhZGRpbmc6IDA7XFxyXFxuICAgIGZvbnQtZmFtaWx5OiBSb2JvdG8sIHNhbnMtc2VyaWY7XFxyXFxuICAgIC0tdG9kby1ncmlkZ2FwOiAwLjZyZW07XFxyXFxuICAgIC0tdGhlbWUtcmVkOiAjRTAxNzVBO1xcclxcbiAgICAtLXRoZW1lLW9yYW5nZTogI0VDQjMyOTtcXHJcXG4gICAgLS10aGVtZS1ibHVlOiAjMzNDNkYxO1xcclxcbiAgICAtLXRoZW1lLWdyZWVuOiAjMjlCNzdGO1xcclxcbiAgICAtLXRoZW1lLWdyYXk6IHJnYigyMzQsIDIzNCwgMjM0KTtcXHJcXG59XFxyXFxuXFxyXFxuYm9keSB7XFxyXFxuICAgIHdpZHRoOiAxMDB2dztcXHJcXG4gICAgbWluLWhlaWdodDogMTAwdmg7XFxyXFxuICAgIGRpc3BsYXk6IGdyaWQ7XFxyXFxuICAgIGdyaWQtdGVtcGxhdGUtYXJlYXM6IFxcclxcbiAgICAgICAgJ3NpZGViYXIgaGVhZGVyJ1xcclxcbiAgICAgICAgJ3NpZGViYXIgY29udGVudCc7XFxyXFxuICAgIGdyaWQtdGVtcGxhdGUtcm93czogNHJlbSAxZnI7XFxyXFxuICAgIGdyaWQtdGVtcGxhdGUtY29sdW1uczogMTZyZW0gMWZyO1xcclxcbiAgICBvdmVyZmxvdzogaGlkZGVuO1xcclxcbn1cXHJcXG5cXHJcXG4jaGVhZGVyIHtcXHJcXG4gICAgLyogYmFja2dyb3VuZC1jb2xvcjogb3JhbmdlOyAqL1xcclxcbiAgICBib3JkZXItYm90dG9tOiB2YXIoLS10aGVtZS1ncmF5KSBzb2xpZCAwLjJyZW07XFxyXFxuICAgIGdyaWQtYXJlYTogaGVhZGVyO1xcclxcbiAgICBkaXNwbGF5OiBmbGV4O1xcclxcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XFxyXFxufVxcclxcblxcclxcbiNzaWRlYmFyIHtcXHJcXG4gICAgLyogYmFja2dyb3VuZC1jb2xvcjogYmx1ZTsgKi9cXHJcXG4gICAgZ3JpZC1hcmVhOiBzaWRlYmFyO1xcclxcbiAgICBib3JkZXItcmlnaHQ6IHZhcigtLXRoZW1lLWdyYXkpIHNvbGlkIDAuMnJlbTtcXHJcXG4gICAgZGlzcGxheTogZmxleDtcXHJcXG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXHJcXG59XFxyXFxuXFxyXFxuI2NvbnRlbnQge1xcclxcbiAgICBkaXNwbGF5OiBncmlkO1xcclxcbiAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IDFmcjtcXHJcXG4gICAgZ3JpZC1hcmVhOiBjb250ZW50O1xcclxcbiAgICBqdXN0aWZ5LWl0ZW1zOiBjZW50ZXI7XFxyXFxufVxcclxcblxcclxcbi53aXRoLWZvcm0ge1xcclxcbiAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IDFmciAyNHJlbTtcXHJcXG4gICAgZ3JpZC10ZW1wbGF0ZS1hcmVhczogJ2NvbnRlbnQgZm9ybSc7XFxyXFxufVxcclxcblxcclxcbiNmb3JtIHtcXHJcXG4gICAgZm9udC1zaXplOiAxcmVtO1xcclxcbiAgICBwYWRkaW5nOiAxcmVtO1xcclxcbiAgICBib3JkZXItbGVmdDogdmFyKC0tdGhlbWUtZ3JheSkgc29saWQgMC4ycmVtO1xcclxcbiAgICBkaXNwbGF5OiBmbGV4O1xcclxcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcclxcbiAgICBnYXA6IDFyZW07XFxyXFxuICAgIGdyaWQtYXJlYTogZm9ybTtcXHJcXG59XFxyXFxuXFxyXFxuLmhlYWRlci1sb2dvLWNvbnRhaW5lciB7XFxyXFxuICAgIGhlaWdodDogMTAwJTtcXHJcXG4gICAgd2lkdGg6IDRyZW07XFxyXFxuICAgIGRpc3BsYXk6IGZsZXg7XFxyXFxuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcclxcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcclxcbn1cXHJcXG5cXHJcXG4ubG9nbyB7XFxyXFxuICAgIHdpZHRoOiA1MHB4O1xcclxcbn1cXHJcXG5cXHJcXG4ubG9nby1jb250YWluZXIge1xcclxcbiAgICBwYWRkaW5nOiAwcmVtIDFyZW07XFxyXFxuICAgIGRpc3BsYXk6IGZsZXg7XFxyXFxuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcclxcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcclxcbiAgICBnYXA6IDFyZW07XFxyXFxufVxcclxcblxcclxcbi5sb2dvLXRpdGxlIHtcXHJcXG4gICAgd2lkdGg6IDEwMCU7XFxyXFxuICAgIGZvbnQtc2l6ZTogMnJlbTtcXHJcXG59XFxyXFxuXFxyXFxuI3VzZXItY29udGFpbmVyIHtcXHJcXG4gICAgcGFkZGluZzogMHJlbSAxcmVtO1xcclxcbiAgICBkaXNwbGF5OiBmbGV4O1xcclxcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XFxyXFxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxyXFxuICAgIGdhcDogMXJlbTtcXHJcXG59XFxyXFxuXFxyXFxuLnVzZXItaWNvbiB7XFxyXFxuICAgIGJvcmRlci1yYWRpdXM6IDUwJTtcXHJcXG59XFxyXFxuXFxyXFxuI3VzZXItbmFtZSB7XFxyXFxuICAgIGZvbnQtc2l6ZTogMS40cmVtO1xcclxcbn1cXHJcXG5cXHJcXG4ucHJvamVjdC1jb250YWluZXIge1xcclxcbiAgICBtYXgtd2lkdGg6IDYwMHB4O1xcclxcbiAgICB3aWR0aDogMTAwJTtcXHJcXG4gICAgcGFkZGluZzogMnJlbSAzcmVtO1xcclxcbiAgICBib3JkZXItcmFkaXVzOiAxcmVtO1xcclxcbiAgICBkaXNwbGF5OiBmbGV4O1xcclxcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcclxcbiAgICBnYXA6IDFyZW07XFxyXFxufVxcclxcblxcclxcbi5wcm9qZWN0LXRpdGxlLWNvbnRhaW5lciB7XFxyXFxuICAgIGRpc3BsYXk6IGZsZXg7XFxyXFxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxyXFxuICAgIGdhcDogMXJlbTtcXHJcXG59XFxyXFxuXFxyXFxuLnByb2plY3QtdGl0bGUge1xcclxcbiAgICBmb250LXNpemU6IDEuNHJlbTtcXHJcXG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XFxyXFxufVxcclxcblxcclxcbi5wcm9qZWN0LWFkZC10b2RvLWJ0biB7XFxyXFxuICAgIGNvbG9yOiBncmF5O1xcclxcbiAgICBmb250LXNpemU6IDFyZW07XFxyXFxuICAgIHRleHQtYWxpZ246IGxlZnQ7XFxyXFxuICAgIGJvcmRlcjogc29saWQgMXB4IHZhcigtLXRoZW1lLWdyYXkpO1xcclxcbiAgICBib3JkZXItcmFkaXVzOiAwLjVyZW07XFxyXFxuICAgIHBhZGRpbmc6IDAuNXJlbSAxcmVtO1xcclxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiBpbmhlcml0O1xcclxcbiAgICBkaXNwbGF5OiBmbGV4O1xcclxcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcclxcbiAgICBnYXA6IDFyZW07XFxyXFxuICAgIGN1cnNvcjogcG9pbnRlcjtcXHJcXG59XFxyXFxuXFxyXFxuLnByb2plY3QtYWRkLXRvZG8tYnRuOmhvdmVyIHtcXHJcXG4gICAgY29sb3I6IGRhcmtncmF5O1xcclxcbn1cXHJcXG5cXHJcXG4ucHJvamVjdC10b2RvLWNvbnRhaW5lciB7XFxyXFxuICAgIGRpc3BsYXk6IGZsZXg7XFxyXFxuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxyXFxufVxcclxcblxcclxcbi50b2RvLWNvbnRhaW5lciB7XFxyXFxuICAgIGZvbnQtc2l6ZTogMXJlbTtcXHJcXG4gICAgcGFkZGluZzogMC41cmVtIDFyZW07XFxyXFxuICAgIGRpc3BsYXk6IGZsZXg7XFxyXFxuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxyXFxuICAgIGdhcDogdmFyKC0tdG9kby1ncmlkZ2FwKTtcXHJcXG4gICAgY3Vyc29yOiBwb2ludGVyO1xcclxcbn1cXHJcXG5cXHJcXG4udG9kby10aXRsZS1jb250YWluZXIge1xcclxcbiAgICBkaXNwbGF5OiBncmlkO1xcclxcbiAgICBncmlkLXRlbXBsYXRlLWFyZWFzOiBcXHJcXG4gICAgICAgICdjaGVja2JveCB0aXRsZSBpbmZvJztcXHJcXG4gICAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiAxcmVtIDFmciBhdXRvO1xcclxcbiAgICBncmlkLWdhcDogMXJlbTtcXHJcXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXHJcXG4gICAgLyogZGlzcGxheTogZmxleDtcXHJcXG4gICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xcclxcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcclxcbiAgICBncmlkLWFyZWE6IHRpdGxlICovXFxyXFxufVxcclxcblxcclxcbi50b2RvLWNoZWNrYm94IHtcXHJcXG4gICAgd2lkdGg6IDFyZW07XFxyXFxuICAgIGhlaWdodDogMXJlbTtcXHJcXG4gICAgYm9yZGVyLXJhZGl1czogNTAlO1xcclxcbiAgICBjdXJzb3I6IHBvaW50ZXI7XFxyXFxuICAgIGdyaWQtYXJlYTogY2hlY2tib3g7XFxyXFxufVxcclxcblxcclxcbi50b2RvLWNoZWNrYm94OmhvdmVyIHtcXHJcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogbGlnaHRncmF5O1xcclxcbn1cXHJcXG5cXHJcXG4udG9kby10aXRsZSB7XFxyXFxuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xcclxcbiAgICBsaW5lLWhlaWdodDogMS41cmVtO1xcclxcbiAgICBncmlkLWFyZWE6IHRpdGxlXFxyXFxufVxcclxcblxcclxcbi50b2RvLWluZm8tY29udGFpbmVyIHtcXHJcXG4gICAgZGlzcGxheTogZmxleDtcXHJcXG4gICAgZ2FwOiAxcmVtO1xcclxcbiAgICBncmlkLWFyZWE6IGluZm9cXHJcXG59XFxyXFxuXFxyXFxuLnRvZG8tZHVlZGF0ZSB7XFxyXFxuICAgIHdpZHRoOiAxMDBweDtcXHJcXG59XFxyXFxuXFxyXFxuLnRvZG8tcHJpb3JpdHktY29udGFpbmVyIHtcXHJcXG4gICAgd2lkdGg6IDYwcHg7XFxyXFxuICAgIGRpc3BsYXk6IGZsZXg7XFxyXFxuICAgIGdhcDogMC43cmVtO1xcclxcbn1cXHJcXG5cXHJcXG4udG9kby1kZXNjIHtcXHJcXG4gICAgcGFkZGluZy1sZWZ0OiAycmVtO1xcclxcbiAgICBncmlkLWFyZWE6IGRlc2M7XFxyXFxufVxcclxcblxcclxcbiN0b2RvLWZvcm0tdGl0bGUtY29udGFpbmVyIHtcXHJcXG4gICAgZGlzcGxheTogZmxleDtcXHJcXG4gICAgZ2FwOiAxcmVtO1xcclxcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XFxyXFxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxyXFxufVxcclxcblxcclxcbiN0b2RvLWZvcm0tdGl0bGUge1xcclxcbiAgICBwYWRkaW5nOiAwIDAuNXJlbTtcXHJcXG4gICAgZm9udC1zaXplOiAxcmVtO1xcclxcbiAgICBmb250LXdlaWdodDogYm9sZDtcXHJcXG4gICAgd2lkdGg6IDEwMCU7XFxyXFxuICAgIG1heC13aWR0aDogMzAwcHg7XFxyXFxufVxcclxcblxcclxcbiN0b2RvLWZvcm0taW5mby1jb250YWluZXIge1xcclxcbiAgICBkaXNwbGF5OiBmbGV4O1xcclxcbiAgICBnYXA6IDFyZW07XFxyXFxufVxcclxcblxcclxcbiN0b2RvLWZvcm0tZHVlZGF0ZS1jb250YWluZXIge1xcclxcbiAgICBkaXNwbGF5OiBmbGV4O1xcclxcbiAgICBnYXA6IDAuNXJlbTtcXHJcXG59XFxyXFxuXFxyXFxuI3RvZG8tZm9ybS1wcmlvcml0eS1jb250YWluZXIge1xcclxcbiAgICB3aWR0aDogNjBweDtcXHJcXG4gICAgZGlzcGxheTogZmxleDtcXHJcXG4gICAgZ2FwOiAwLjVyZW07XFxyXFxufVxcclxcblxcclxcbiN0b2RvLWZvcm0tZGVzYy1jb250YWluZXIge1xcclxcbiAgICBmb250LXNpemU6IDFyZW07XFxyXFxuICAgIGRpc3BsYXk6IGZsZXg7XFxyXFxuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcclxcbiAgICBnYXA6IDFyZW07XFxyXFxufVxcclxcblxcclxcbiN0b2RvLWZvcm0tZGVzYyB7XFxyXFxuICAgIHBhZGRpbmc6IDAgMC41cmVtO1xcclxcbiAgICBmb250LXNpemU6IDFyZW07XFxyXFxuICAgIGZsZXg6IDFcXHJcXG59XFxyXFxuXFxyXFxuI3RvZG8tZm9ybS1kdWVkYXRlLWNvbnRhaW5lciB7XFxyXFxuICAgIHdpZHRoOiAxMDBweDtcXHJcXG59XFxyXFxuXFxyXFxuI3RvZG8tZm9ybS1zYXZlLWJ0biB7XFxyXFxuICAgIGZvbnQtc2l6ZTogMXJlbTtcXHJcXG4gICAgd2lkdGg6IDYwcHg7XFxyXFxuICAgIHBhZGRpbmc6IDByZW0gYXV0bztcXHJcXG59XFxyXFxuXFxyXFxuI3RvZG8tZm9ybS1jbG9zZS1idG4ge1xcclxcbiAgICBmb250LXNpemU6IDFyZW07XFxyXFxuICAgIHdpZHRoOiA5MHB4O1xcclxcbiAgICBwYWRkaW5nOiAwcmVtIGF1dG87XFxyXFxufVxcclxcblxcclxcbi8qICNzaWRlYmFyLXByb2plY3RzLWNvbnRhaW5lciB7XFxyXFxuICAgIGRpc3BsYXk6IGZsZXg7XFxyXFxuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxyXFxuICAgIGdhcDogMnJlbTtcXHJcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogbGlnaHRncmF5O1xcclxcbiAgICBwYWRkaW5nOiAycmVtIDFyZW07XFxyXFxufSAqL1xcclxcblxcclxcbiNzaWRlYmFyLXRpdGxlLWNvbnRhaW5lciB7XFxyXFxuICAgIG1hcmdpbi1ib3R0b206IDFyZW07XFxyXFxuICAgIGRpc3BsYXk6IGdyaWQ7XFxyXFxuICAgIGdyaWQtdGVtcGxhdGUtYXJlYXM6ICd0aXRsZSBidXR0b24nO1xcclxcbiAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IGF1dG8gM3JlbTtcXHJcXG4gICAgZ2FwOiAxcmVtO1xcclxcbiAgICBmb250LXNpemU6IDEuNHJlbTtcXHJcXG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XFxyXFxufVxcclxcblxcclxcbiNzaWRlYmFyLXRpdGxlIHtcXHJcXG4gICAgcGFkZGluZy1sZWZ0OiAxcmVtO1xcclxcbiAgICBoZWlnaHQ6IDRyZW07XFxyXFxuICAgIGRpc3BsYXk6IGZsZXg7XFxyXFxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxyXFxuICAgIGdyaWQtYXJlYTogdGl0bGU7XFxyXFxufVxcclxcblxcclxcbiNoaWRlLXNpZGViYXItYnRuLCAjc2hvdy1zaWRlYmFyLWJ0bntcXHJcXG4gICAgZm9udC1zaXplOiAxLjRyZW07XFxyXFxuICAgIHBhZGRpbmc6IDAgMXJlbTtcXHJcXG4gICAgd2lkdGg6IDFyZW07XFxyXFxuICAgIGdyaWQtYXJlYTogYnV0dG9uO1xcclxcbn1cXHJcXG5cXHJcXG4jc2lkZWJhci1wcm9qZWN0cyB7XFxyXFxuICAgIG1hcmdpbi1ib3R0b206IDAuNXJlbTtcXHJcXG4gICAgZGlzcGxheTogZmxleDtcXHJcXG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXHJcXG59XFxyXFxuXFxyXFxuLnNpZGViYXItcHJvamVjdCB7XFxyXFxuICAgIHBhZGRpbmc6IDAuNXJlbSAxcmVtO1xcclxcbiAgICBkaXNwbGF5OiBncmlkO1xcclxcbiAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IGF1dG8gMjBweCAyMHB4O1xcclxcbiAgICBmb250LXNpemU6IDEuMnJlbTtcXHJcXG4gICAgZ2FwOiAxcmVtO1xcclxcbiAgICBjdXJzb3I6IHBvaW50ZXI7XFxyXFxufVxcclxcblxcclxcbi5zaWRlYmFyLWVkaXQtYnRuLCAuc2lkZWJhci1kZWxldGUtYnRuIHtcXHJcXG4gICAgb3BhY2l0eTogMC4zO1xcclxcbn1cXHJcXG5cXHJcXG4uc2lkZWJhci1lZGl0LWJ0bjpob3ZlciwgLnNpZGViYXItZGVsZXRlLWJ0bjpob3ZlciB7XFxyXFxuICAgIG9wYWNpdHk6IDE7XFxyXFxufVxcclxcblxcclxcbi5zZWdtZW50IHtcXHJcXG4gICAgaGVpZ2h0OiAwLjNyZW07XFxyXFxuICAgIHBhZGRpbmc6IDAuMXJlbSAwO1xcclxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiBpbmhlcml0O1xcclxcbn1cXHJcXG5cXHJcXG4uaG92ZXJpbmcge1xcclxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS10aGVtZS1ibHVlKTtcXHJcXG59XFxyXFxuXFxyXFxuLnNlbGVjdGVkIHtcXHJcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tdGhlbWUtZ3JheSk7XFxyXFxuICAgIG1hcmdpbjogMCAwLjVyZW07XFxyXFxuICAgIGJvcmRlci1yYWRpdXM6IDAuNXJlbTtcXHJcXG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XFxyXFxufVxcclxcblxcclxcbiNzaWRlYmFyLWFkZC1wcm9qZWN0LWJ0biB7XFxyXFxuICAgIGZvbnQtc2l6ZTogMS4ycmVtO1xcclxcbiAgICBwYWRkaW5nOiAwLjVyZW0gMXJlbTtcXHJcXG4gICAgZGlzcGxheTogZ3JpZDtcXHJcXG4gICAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiAxcmVtIGF1dG87XFxyXFxuICAgIGdhcDogMXJlbTtcXHJcXG4gICAgY3Vyc29yOiBwb2ludGVyO1xcclxcbn1cXHJcXG5cXHJcXG4jaGlkZS1zaWRlYmFyLWJ0biwgI3Nob3ctc2lkZWJhci1idG4sXFxyXFxuI3Byb2plY3QtZm9ybS1hZGQtYnRuLCAjcHJvamVjdC1mb3JtLWNsb3NlLWJ0bixcXHJcXG4jc2lkZWJhci1hZGQtcHJvamVjdC1pY29uLCBcXHJcXG4uc2lkZWJhci1hcnJhbmdlLWljb24sIC5zaWRlYmFyLWVkaXQtYnRuLCAuc2lkZWJhci1kZWxldGUtYnRuLFxcclxcbiNwcm9qZWN0LWZvcm0tY2xvc2UtYnRuLCAjcHJvamVjdC1mb3JtLWFkZC1idG4sXFxyXFxuLnRvZG8tYXJyYW5nZSwgLnRvZG8tcHJpb3JpdHktaWNvbixcXHJcXG4jZm9ybS1jbG9zZS1idG5cXHJcXG57XFxyXFxuICAgIGRpc3BsYXk6IGZsZXg7XFxyXFxuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcclxcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcclxcbiAgICBjdXJzb3I6IHBvaW50ZXI7XFxyXFxufVxcclxcblxcclxcbiNwcm9qZWN0LWZvcm0ge1xcclxcbiAgICBkaXNwbGF5OiBmbGV4O1xcclxcbiAgICBnYXA6IDFyZW07XFxyXFxufVxcclxcblxcclxcbiNwcm9qZWN0LWZvcm0tdGl0bGUge1xcclxcbiAgICBwYWRkaW5nOiAwLjVyZW0gMXJlbTtcXHJcXG4gICAgZm9udC1zaXplOiAxLjJyZW07XFxyXFxuICAgIHdpZHRoOiAxMDAlO1xcclxcbiAgICBib3JkZXI6IG5vbmU7XFxyXFxufVxcclxcblxcclxcbiNwcm9qZWN0LWZvcm0tdGl0bGU6Zm9jdXMge1xcclxcbiAgICBvdXRsaW5lOiBub25lO1xcclxcbn1cXHJcXG5cXHJcXG4jZm9ybS10aXRsZS1jb250YWluZXIge1xcclxcbiAgICAvKiBoZWlnaHQ6IDRyZW07ICovXFxyXFxuICAgIGRpc3BsYXk6IGdyaWQ7XFxyXFxuICAgIGdyaWQtdGVtcGxhdGUtY29sdW1uczogMWZyIDFyZW07XFxyXFxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxyXFxuICAgIGdhcDogMXJlbTtcXHJcXG5cXHJcXG59XFxyXFxuXFxyXFxuI2Zvcm0tdGl0bGUge1xcclxcbiAgICBmb250LXNpemU6IDEuMnJlbTtcXHJcXG4gICAgcGFkZGluZzogMC41cmVtO1xcclxcbiAgICBib3JkZXI6IDAuMXJlbSBzb2xpZCB2YXIoLS10aGVtZS1ncmF5KTtcXHJcXG4gICAgYm9yZGVyLXJhZGl1czogMC4ycmVtO1xcclxcbn1cXHJcXG5cXHJcXG4jZm9ybS1kZXNjIHtcXHJcXG4gICAgcGFkZGluZzogMC41cmVtO1xcclxcbiAgICBmb250LXNpemU6IDFyZW07XFxyXFxuICAgIHdpZHRoOiAxMDAlO1xcclxcbiAgICBib3JkZXI6IDAuMXJlbSBzb2xpZCB2YXIoLS10aGVtZS1ncmF5KTtcXHJcXG4gICAgYm9yZGVyLXJhZGl1czogMC4ycmVtO1xcclxcbn1cXHJcXG5cXHJcXG4jZm9ybS1wcm9qZWN0LCAjZm9ybS1kdWVkYXRlIHtcXHJcXG4gICAgcGFkZGluZzogMCAwLjVyZW07XFxyXFxuICAgIGZvbnQtc2l6ZTogMXJlbTtcXHJcXG59XFxyXFxuXFxyXFxuI2Zvcm0tcHJvamVjdC1jb250YWluZXIsICNmb3JtLWR1ZWRhdGUtY29udGFpbmVye1xcclxcbiAgICBkaXNwbGF5OiBncmlkO1xcclxcbiAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IDEwMHB4IDE1MHB4O1xcclxcbn1cXHJcXG5cXHJcXG4jZm9ybS1wcmlvcml0eS1jb250YWluZXIge1xcclxcbiAgICBkaXNwbGF5OiBncmlkO1xcclxcbiAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IDEwMHB4IHJlcGVhdCg0LCA1MHB4KTtcXHJcXG59XFxyXFxuXFxyXFxuI2Zvcm0tcHJpb3JpdHktY29udGFpbmVyIGRpdjpub3QoOmZpcnN0LWNoaWxkKSB7XFxyXFxuICAgIGRpc3BsYXk6IGZsZXg7XFxyXFxuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcclxcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcclxcbn1cXHJcXG5cXHJcXG4jZm9ybS1wcmlvcml0eS1jb250YWluZXIgaW5wdXQge1xcclxcbiAgICBkaXNwbGF5OiBub25lO1xcclxcbn1cXHJcXG5cXHJcXG4jZm9ybS1wcmlvcml0eS1jb250YWluZXIgbGFiZWwge1xcclxcbiAgICBvcGFjaXR5OiAwLjE7XFxyXFxufVxcclxcblxcclxcbiNmb3JtLXByaW9yaXR5LWNvbnRhaW5lciBsYWJlbC5zZWxlY3RlZCB7XFxyXFxuICAgIG9wYWNpdHk6IDE7XFxyXFxuICAgIC8qIGJvcmRlcjogMnB4IHNvbGlkIGJsYWNrICovXFxyXFxufVxcclxcblxcclxcbiNmb3JtLWFjdGlvbnMtY29udGFpbmVyIHtcXHJcXG4gICAgaGVpZ2h0OiAxMDAlO1xcclxcbiAgICBkaXNwbGF5OiBmbGV4O1xcclxcbiAgICBhbGlnbi1pdGVtczogZW5kO1xcclxcbiAgICBnYXA6IDFyZW07XFxyXFxufVxcclxcblxcclxcbiNmb3JtLWFjdGlvbnMtY29udGFpbmVyIGJ1dHRvbntcXHJcXG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XFxyXFxuICAgIGhlaWdodDogbWluLWNvbnRlbnQ7XFxyXFxuICAgIGZvbnQtc2l6ZTogMXJlbTtcXHJcXG4gICAgcGFkZGluZzogMC43cmVtIDFyZW07XFxyXFxuICAgIGJvcmRlci1yYWRpdXM6IDAuNXJlbTtcXHJcXG4gICAgYm9yZGVyOiAwLjFyZW0gc29saWQgdmFyKC0tdGhlbWUtZ3JheSk7XFxyXFxuICAgIGZsZXg6IDE7XFxyXFxuICAgIGN1cnNvcjogcG9pbnRlcjtcXHJcXG59XFxyXFxuXFxyXFxuI2Zvcm0tZGVsZXRlLWJ0biB7XFxyXFxuICAgIGJhY2tncm91bmQtY29sb3I6IGluaGVyaXQ7XFxyXFxufVxcclxcblxcclxcbiNmb3JtLXNhdmUtYnRuIHtcXHJcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogZ29sZDtcXHJcXG59XCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIlwidXNlIHN0cmljdFwiO1xuXG4vKlxuICBNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuICBBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoY3NzV2l0aE1hcHBpbmdUb1N0cmluZykge1xuICB2YXIgbGlzdCA9IFtdO1xuXG4gIC8vIHJldHVybiB0aGUgbGlzdCBvZiBtb2R1bGVzIGFzIGNzcyBzdHJpbmdcbiAgbGlzdC50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgdmFyIGNvbnRlbnQgPSBcIlwiO1xuICAgICAgdmFyIG5lZWRMYXllciA9IHR5cGVvZiBpdGVtWzVdICE9PSBcInVuZGVmaW5lZFwiO1xuICAgICAgaWYgKGl0ZW1bNF0pIHtcbiAgICAgICAgY29udGVudCArPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KGl0ZW1bNF0sIFwiKSB7XCIpO1xuICAgICAgfVxuICAgICAgaWYgKGl0ZW1bMl0pIHtcbiAgICAgICAgY29udGVudCArPSBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCIge1wiKTtcbiAgICAgIH1cbiAgICAgIGlmIChuZWVkTGF5ZXIpIHtcbiAgICAgICAgY29udGVudCArPSBcIkBsYXllclwiLmNvbmNhdChpdGVtWzVdLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQoaXRlbVs1XSkgOiBcIlwiLCBcIiB7XCIpO1xuICAgICAgfVxuICAgICAgY29udGVudCArPSBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0pO1xuICAgICAgaWYgKG5lZWRMYXllcikge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuICAgICAgaWYgKGl0ZW1bMl0pIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cbiAgICAgIGlmIChpdGVtWzRdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG4gICAgICByZXR1cm4gY29udGVudDtcbiAgICB9KS5qb2luKFwiXCIpO1xuICB9O1xuXG4gIC8vIGltcG9ydCBhIGxpc3Qgb2YgbW9kdWxlcyBpbnRvIHRoZSBsaXN0XG4gIGxpc3QuaSA9IGZ1bmN0aW9uIGkobW9kdWxlcywgbWVkaWEsIGRlZHVwZSwgc3VwcG9ydHMsIGxheWVyKSB7XG4gICAgaWYgKHR5cGVvZiBtb2R1bGVzID09PSBcInN0cmluZ1wiKSB7XG4gICAgICBtb2R1bGVzID0gW1tudWxsLCBtb2R1bGVzLCB1bmRlZmluZWRdXTtcbiAgICB9XG4gICAgdmFyIGFscmVhZHlJbXBvcnRlZE1vZHVsZXMgPSB7fTtcbiAgICBpZiAoZGVkdXBlKSB7XG4gICAgICBmb3IgKHZhciBrID0gMDsgayA8IHRoaXMubGVuZ3RoOyBrKyspIHtcbiAgICAgICAgdmFyIGlkID0gdGhpc1trXVswXTtcbiAgICAgICAgaWYgKGlkICE9IG51bGwpIHtcbiAgICAgICAgICBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2lkXSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgZm9yICh2YXIgX2sgPSAwOyBfayA8IG1vZHVsZXMubGVuZ3RoOyBfaysrKSB7XG4gICAgICB2YXIgaXRlbSA9IFtdLmNvbmNhdChtb2R1bGVzW19rXSk7XG4gICAgICBpZiAoZGVkdXBlICYmIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaXRlbVswXV0pIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBpZiAodHlwZW9mIGxheWVyICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIGlmICh0eXBlb2YgaXRlbVs1XSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgIGl0ZW1bNV0gPSBsYXllcjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAbGF5ZXJcIi5jb25jYXQoaXRlbVs1XS5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KGl0ZW1bNV0pIDogXCJcIiwgXCIge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bNV0gPSBsYXllcjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKG1lZGlhKSB7XG4gICAgICAgIGlmICghaXRlbVsyXSkge1xuICAgICAgICAgIGl0ZW1bMl0gPSBtZWRpYTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAbWVkaWEgXCIuY29uY2F0KGl0ZW1bMl0sIFwiIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzJdID0gbWVkaWE7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChzdXBwb3J0cykge1xuICAgICAgICBpZiAoIWl0ZW1bNF0pIHtcbiAgICAgICAgICBpdGVtWzRdID0gXCJcIi5jb25jYXQoc3VwcG9ydHMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KGl0ZW1bNF0sIFwiKSB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVs0XSA9IHN1cHBvcnRzO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBsaXN0LnB1c2goaXRlbSk7XG4gICAgfVxuICB9O1xuICByZXR1cm4gbGlzdDtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0ZW0pIHtcbiAgdmFyIGNvbnRlbnQgPSBpdGVtWzFdO1xuICB2YXIgY3NzTWFwcGluZyA9IGl0ZW1bM107XG4gIGlmICghY3NzTWFwcGluZykge1xuICAgIHJldHVybiBjb250ZW50O1xuICB9XG4gIGlmICh0eXBlb2YgYnRvYSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgdmFyIGJhc2U2NCA9IGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KGNzc01hcHBpbmcpKSkpO1xuICAgIHZhciBkYXRhID0gXCJzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxcIi5jb25jYXQoYmFzZTY0KTtcbiAgICB2YXIgc291cmNlTWFwcGluZyA9IFwiLyojIFwiLmNvbmNhdChkYXRhLCBcIiAqL1wiKTtcbiAgICByZXR1cm4gW2NvbnRlbnRdLmNvbmNhdChbc291cmNlTWFwcGluZ10pLmpvaW4oXCJcXG5cIik7XG4gIH1cbiAgcmV0dXJuIFtjb250ZW50XS5qb2luKFwiXFxuXCIpO1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIHN0eWxlc0luRE9NID0gW107XG5mdW5jdGlvbiBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKSB7XG4gIHZhciByZXN1bHQgPSAtMTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZXNJbkRPTS5sZW5ndGg7IGkrKykge1xuICAgIGlmIChzdHlsZXNJbkRPTVtpXS5pZGVudGlmaWVyID09PSBpZGVudGlmaWVyKSB7XG4gICAgICByZXN1bHQgPSBpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5mdW5jdGlvbiBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucykge1xuICB2YXIgaWRDb3VudE1hcCA9IHt9O1xuICB2YXIgaWRlbnRpZmllcnMgPSBbXTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGl0ZW0gPSBsaXN0W2ldO1xuICAgIHZhciBpZCA9IG9wdGlvbnMuYmFzZSA/IGl0ZW1bMF0gKyBvcHRpb25zLmJhc2UgOiBpdGVtWzBdO1xuICAgIHZhciBjb3VudCA9IGlkQ291bnRNYXBbaWRdIHx8IDA7XG4gICAgdmFyIGlkZW50aWZpZXIgPSBcIlwiLmNvbmNhdChpZCwgXCIgXCIpLmNvbmNhdChjb3VudCk7XG4gICAgaWRDb3VudE1hcFtpZF0gPSBjb3VudCArIDE7XG4gICAgdmFyIGluZGV4QnlJZGVudGlmaWVyID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgdmFyIG9iaiA9IHtcbiAgICAgIGNzczogaXRlbVsxXSxcbiAgICAgIG1lZGlhOiBpdGVtWzJdLFxuICAgICAgc291cmNlTWFwOiBpdGVtWzNdLFxuICAgICAgc3VwcG9ydHM6IGl0ZW1bNF0sXG4gICAgICBsYXllcjogaXRlbVs1XVxuICAgIH07XG4gICAgaWYgKGluZGV4QnlJZGVudGlmaWVyICE9PSAtMSkge1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhCeUlkZW50aWZpZXJdLnJlZmVyZW5jZXMrKztcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4QnlJZGVudGlmaWVyXS51cGRhdGVyKG9iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciB1cGRhdGVyID0gYWRkRWxlbWVudFN0eWxlKG9iaiwgb3B0aW9ucyk7XG4gICAgICBvcHRpb25zLmJ5SW5kZXggPSBpO1xuICAgICAgc3R5bGVzSW5ET00uc3BsaWNlKGksIDAsIHtcbiAgICAgICAgaWRlbnRpZmllcjogaWRlbnRpZmllcixcbiAgICAgICAgdXBkYXRlcjogdXBkYXRlcixcbiAgICAgICAgcmVmZXJlbmNlczogMVxuICAgICAgfSk7XG4gICAgfVxuICAgIGlkZW50aWZpZXJzLnB1c2goaWRlbnRpZmllcik7XG4gIH1cbiAgcmV0dXJuIGlkZW50aWZpZXJzO1xufVxuZnVuY3Rpb24gYWRkRWxlbWVudFN0eWxlKG9iaiwgb3B0aW9ucykge1xuICB2YXIgYXBpID0gb3B0aW9ucy5kb21BUEkob3B0aW9ucyk7XG4gIGFwaS51cGRhdGUob2JqKTtcbiAgdmFyIHVwZGF0ZXIgPSBmdW5jdGlvbiB1cGRhdGVyKG5ld09iaikge1xuICAgIGlmIChuZXdPYmopIHtcbiAgICAgIGlmIChuZXdPYmouY3NzID09PSBvYmouY3NzICYmIG5ld09iai5tZWRpYSA9PT0gb2JqLm1lZGlhICYmIG5ld09iai5zb3VyY2VNYXAgPT09IG9iai5zb3VyY2VNYXAgJiYgbmV3T2JqLnN1cHBvcnRzID09PSBvYmouc3VwcG9ydHMgJiYgbmV3T2JqLmxheWVyID09PSBvYmoubGF5ZXIpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgYXBpLnVwZGF0ZShvYmogPSBuZXdPYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICBhcGkucmVtb3ZlKCk7XG4gICAgfVxuICB9O1xuICByZXR1cm4gdXBkYXRlcjtcbn1cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGxpc3QsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIGxpc3QgPSBsaXN0IHx8IFtdO1xuICB2YXIgbGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpO1xuICByZXR1cm4gZnVuY3Rpb24gdXBkYXRlKG5ld0xpc3QpIHtcbiAgICBuZXdMaXN0ID0gbmV3TGlzdCB8fCBbXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGlkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbaV07XG4gICAgICB2YXIgaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4XS5yZWZlcmVuY2VzLS07XG4gICAgfVxuICAgIHZhciBuZXdMYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obmV3TGlzdCwgb3B0aW9ucyk7XG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IF9pKyspIHtcbiAgICAgIHZhciBfaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tfaV07XG4gICAgICB2YXIgX2luZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoX2lkZW50aWZpZXIpO1xuICAgICAgaWYgKHN0eWxlc0luRE9NW19pbmRleF0ucmVmZXJlbmNlcyA9PT0gMCkge1xuICAgICAgICBzdHlsZXNJbkRPTVtfaW5kZXhdLnVwZGF0ZXIoKTtcbiAgICAgICAgc3R5bGVzSW5ET00uc3BsaWNlKF9pbmRleCwgMSk7XG4gICAgICB9XG4gICAgfVxuICAgIGxhc3RJZGVudGlmaWVycyA9IG5ld0xhc3RJZGVudGlmaWVycztcbiAgfTtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBtZW1vID0ge307XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gZ2V0VGFyZ2V0KHRhcmdldCkge1xuICBpZiAodHlwZW9mIG1lbW9bdGFyZ2V0XSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHZhciBzdHlsZVRhcmdldCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0KTtcblxuICAgIC8vIFNwZWNpYWwgY2FzZSB0byByZXR1cm4gaGVhZCBvZiBpZnJhbWUgaW5zdGVhZCBvZiBpZnJhbWUgaXRzZWxmXG4gICAgaWYgKHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCAmJiBzdHlsZVRhcmdldCBpbnN0YW5jZW9mIHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgLy8gVGhpcyB3aWxsIHRocm93IGFuIGV4Y2VwdGlvbiBpZiBhY2Nlc3MgdG8gaWZyYW1lIGlzIGJsb2NrZWRcbiAgICAgICAgLy8gZHVlIHRvIGNyb3NzLW9yaWdpbiByZXN0cmljdGlvbnNcbiAgICAgICAgc3R5bGVUYXJnZXQgPSBzdHlsZVRhcmdldC5jb250ZW50RG9jdW1lbnQuaGVhZDtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gaXN0YW5idWwgaWdub3JlIG5leHRcbiAgICAgICAgc3R5bGVUYXJnZXQgPSBudWxsO1xuICAgICAgfVxuICAgIH1cbiAgICBtZW1vW3RhcmdldF0gPSBzdHlsZVRhcmdldDtcbiAgfVxuICByZXR1cm4gbWVtb1t0YXJnZXRdO1xufVxuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGluc2VydEJ5U2VsZWN0b3IoaW5zZXJ0LCBzdHlsZSkge1xuICB2YXIgdGFyZ2V0ID0gZ2V0VGFyZ2V0KGluc2VydCk7XG4gIGlmICghdGFyZ2V0KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiQ291bGRuJ3QgZmluZCBhIHN0eWxlIHRhcmdldC4gVGhpcyBwcm9iYWJseSBtZWFucyB0aGF0IHRoZSB2YWx1ZSBmb3IgdGhlICdpbnNlcnQnIHBhcmFtZXRlciBpcyBpbnZhbGlkLlwiKTtcbiAgfVxuICB0YXJnZXQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xufVxubW9kdWxlLmV4cG9ydHMgPSBpbnNlcnRCeVNlbGVjdG9yOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKSB7XG4gIHZhciBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInN0eWxlXCIpO1xuICBvcHRpb25zLnNldEF0dHJpYnV0ZXMoZWxlbWVudCwgb3B0aW9ucy5hdHRyaWJ1dGVzKTtcbiAgb3B0aW9ucy5pbnNlcnQoZWxlbWVudCwgb3B0aW9ucy5vcHRpb25zKTtcbiAgcmV0dXJuIGVsZW1lbnQ7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGluc2VydFN0eWxlRWxlbWVudDsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBzZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMoc3R5bGVFbGVtZW50KSB7XG4gIHZhciBub25jZSA9IHR5cGVvZiBfX3dlYnBhY2tfbm9uY2VfXyAhPT0gXCJ1bmRlZmluZWRcIiA/IF9fd2VicGFja19ub25jZV9fIDogbnVsbDtcbiAgaWYgKG5vbmNlKSB7XG4gICAgc3R5bGVFbGVtZW50LnNldEF0dHJpYnV0ZShcIm5vbmNlXCIsIG5vbmNlKTtcbiAgfVxufVxubW9kdWxlLmV4cG9ydHMgPSBzZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXM7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gYXBwbHkoc3R5bGVFbGVtZW50LCBvcHRpb25zLCBvYmopIHtcbiAgdmFyIGNzcyA9IFwiXCI7XG4gIGlmIChvYmouc3VwcG9ydHMpIHtcbiAgICBjc3MgKz0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChvYmouc3VwcG9ydHMsIFwiKSB7XCIpO1xuICB9XG4gIGlmIChvYmoubWVkaWEpIHtcbiAgICBjc3MgKz0gXCJAbWVkaWEgXCIuY29uY2F0KG9iai5tZWRpYSwgXCIge1wiKTtcbiAgfVxuICB2YXIgbmVlZExheWVyID0gdHlwZW9mIG9iai5sYXllciAhPT0gXCJ1bmRlZmluZWRcIjtcbiAgaWYgKG5lZWRMYXllcikge1xuICAgIGNzcyArPSBcIkBsYXllclwiLmNvbmNhdChvYmoubGF5ZXIubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChvYmoubGF5ZXIpIDogXCJcIiwgXCIge1wiKTtcbiAgfVxuICBjc3MgKz0gb2JqLmNzcztcbiAgaWYgKG5lZWRMYXllcikge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuICBpZiAob2JqLm1lZGlhKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG4gIGlmIChvYmouc3VwcG9ydHMpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cbiAgdmFyIHNvdXJjZU1hcCA9IG9iai5zb3VyY2VNYXA7XG4gIGlmIChzb3VyY2VNYXAgJiYgdHlwZW9mIGJ0b2EgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICBjc3MgKz0gXCJcXG4vKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LFwiLmNvbmNhdChidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpLCBcIiAqL1wiKTtcbiAgfVxuXG4gIC8vIEZvciBvbGQgSUVcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICAqL1xuICBvcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtKGNzcywgc3R5bGVFbGVtZW50LCBvcHRpb25zLm9wdGlvbnMpO1xufVxuZnVuY3Rpb24gcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlRWxlbWVudCkge1xuICAvLyBpc3RhbmJ1bCBpZ25vcmUgaWZcbiAgaWYgKHN0eWxlRWxlbWVudC5wYXJlbnROb2RlID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHN0eWxlRWxlbWVudC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHN0eWxlRWxlbWVudCk7XG59XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gZG9tQVBJKG9wdGlvbnMpIHtcbiAgaWYgKHR5cGVvZiBkb2N1bWVudCA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHJldHVybiB7XG4gICAgICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZSgpIHt9LFxuICAgICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoKSB7fVxuICAgIH07XG4gIH1cbiAgdmFyIHN0eWxlRWxlbWVudCA9IG9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpO1xuICByZXR1cm4ge1xuICAgIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlKG9iaikge1xuICAgICAgYXBwbHkoc3R5bGVFbGVtZW50LCBvcHRpb25zLCBvYmopO1xuICAgIH0sXG4gICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoKSB7XG4gICAgICByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGVFbGVtZW50KTtcbiAgICB9XG4gIH07XG59XG5tb2R1bGUuZXhwb3J0cyA9IGRvbUFQSTsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBzdHlsZVRhZ1RyYW5zZm9ybShjc3MsIHN0eWxlRWxlbWVudCkge1xuICBpZiAoc3R5bGVFbGVtZW50LnN0eWxlU2hlZXQpIHtcbiAgICBzdHlsZUVsZW1lbnQuc3R5bGVTaGVldC5jc3NUZXh0ID0gY3NzO1xuICB9IGVsc2Uge1xuICAgIHdoaWxlIChzdHlsZUVsZW1lbnQuZmlyc3RDaGlsZCkge1xuICAgICAgc3R5bGVFbGVtZW50LnJlbW92ZUNoaWxkKHN0eWxlRWxlbWVudC5maXJzdENoaWxkKTtcbiAgICB9XG4gICAgc3R5bGVFbGVtZW50LmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcykpO1xuICB9XG59XG5tb2R1bGUuZXhwb3J0cyA9IHN0eWxlVGFnVHJhbnNmb3JtOyIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0aWQ6IG1vZHVsZUlkLFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0obW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4iLCIvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuX193ZWJwYWNrX3JlcXVpcmVfXy5uID0gKG1vZHVsZSkgPT4ge1xuXHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cblx0XHQoKSA9PiAobW9kdWxlWydkZWZhdWx0J10pIDpcblx0XHQoKSA9PiAobW9kdWxlKTtcblx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgeyBhOiBnZXR0ZXIgfSk7XG5cdHJldHVybiBnZXR0ZXI7XG59OyIsIi8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uZCA9IChleHBvcnRzLCBkZWZpbml0aW9uKSA9PiB7XG5cdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG5cdFx0fVxuXHR9XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm5jID0gdW5kZWZpbmVkOyIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9zdHlsZS5jc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcblxuICAgICAgb3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbiAgICBcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3N0eWxlLmNzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF90eXBlb2Yobykge1xuICBcIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mXCI7XG5cbiAgcmV0dXJuIF90eXBlb2YgPSBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBcInN5bWJvbFwiID09IHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPyBmdW5jdGlvbiAobykge1xuICAgIHJldHVybiB0eXBlb2YgbztcbiAgfSA6IGZ1bmN0aW9uIChvKSB7XG4gICAgcmV0dXJuIG8gJiYgXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgby5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG8gIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG87XG4gIH0sIF90eXBlb2Yobyk7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcmVxdWlyZWRBcmdzKHJlcXVpcmVkLCBhcmdzKSB7XG4gIGlmIChhcmdzLmxlbmd0aCA8IHJlcXVpcmVkKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihyZXF1aXJlZCArICcgYXJndW1lbnQnICsgKHJlcXVpcmVkID4gMSA/ICdzJyA6ICcnKSArICcgcmVxdWlyZWQsIGJ1dCBvbmx5ICcgKyBhcmdzLmxlbmd0aCArICcgcHJlc2VudCcpO1xuICB9XG59IiwiaW1wb3J0IF90eXBlb2YgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3R5cGVvZlwiO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vX2xpYi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbi8qKlxuICogQG5hbWUgdG9EYXRlXG4gKiBAY2F0ZWdvcnkgQ29tbW9uIEhlbHBlcnNcbiAqIEBzdW1tYXJ5IENvbnZlcnQgdGhlIGdpdmVuIGFyZ3VtZW50IHRvIGFuIGluc3RhbmNlIG9mIERhdGUuXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBDb252ZXJ0IHRoZSBnaXZlbiBhcmd1bWVudCB0byBhbiBpbnN0YW5jZSBvZiBEYXRlLlxuICpcbiAqIElmIHRoZSBhcmd1bWVudCBpcyBhbiBpbnN0YW5jZSBvZiBEYXRlLCB0aGUgZnVuY3Rpb24gcmV0dXJucyBpdHMgY2xvbmUuXG4gKlxuICogSWYgdGhlIGFyZ3VtZW50IGlzIGEgbnVtYmVyLCBpdCBpcyB0cmVhdGVkIGFzIGEgdGltZXN0YW1wLlxuICpcbiAqIElmIHRoZSBhcmd1bWVudCBpcyBub25lIG9mIHRoZSBhYm92ZSwgdGhlIGZ1bmN0aW9uIHJldHVybnMgSW52YWxpZCBEYXRlLlxuICpcbiAqICoqTm90ZSoqOiAqYWxsKiBEYXRlIGFyZ3VtZW50cyBwYXNzZWQgdG8gYW55ICpkYXRlLWZucyogZnVuY3Rpb24gaXMgcHJvY2Vzc2VkIGJ5IGB0b0RhdGVgLlxuICpcbiAqIEBwYXJhbSB7RGF0ZXxOdW1iZXJ9IGFyZ3VtZW50IC0gdGhlIHZhbHVlIHRvIGNvbnZlcnRcbiAqIEByZXR1cm5zIHtEYXRlfSB0aGUgcGFyc2VkIGRhdGUgaW4gdGhlIGxvY2FsIHRpbWUgem9uZVxuICogQHRocm93cyB7VHlwZUVycm9yfSAxIGFyZ3VtZW50IHJlcXVpcmVkXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIENsb25lIHRoZSBkYXRlOlxuICogY29uc3QgcmVzdWx0ID0gdG9EYXRlKG5ldyBEYXRlKDIwMTQsIDEsIDExLCAxMSwgMzAsIDMwKSlcbiAqIC8vPT4gVHVlIEZlYiAxMSAyMDE0IDExOjMwOjMwXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIENvbnZlcnQgdGhlIHRpbWVzdGFtcCB0byBkYXRlOlxuICogY29uc3QgcmVzdWx0ID0gdG9EYXRlKDEzOTIwOTg0MzAwMDApXG4gKiAvLz0+IFR1ZSBGZWIgMTEgMjAxNCAxMTozMDozMFxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB0b0RhdGUoYXJndW1lbnQpIHtcbiAgcmVxdWlyZWRBcmdzKDEsIGFyZ3VtZW50cyk7XG4gIHZhciBhcmdTdHIgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYXJndW1lbnQpO1xuXG4gIC8vIENsb25lIHRoZSBkYXRlXG4gIGlmIChhcmd1bWVudCBpbnN0YW5jZW9mIERhdGUgfHwgX3R5cGVvZihhcmd1bWVudCkgPT09ICdvYmplY3QnICYmIGFyZ1N0ciA9PT0gJ1tvYmplY3QgRGF0ZV0nKSB7XG4gICAgLy8gUHJldmVudCB0aGUgZGF0ZSB0byBsb3NlIHRoZSBtaWxsaXNlY29uZHMgd2hlbiBwYXNzZWQgdG8gbmV3IERhdGUoKSBpbiBJRTEwXG4gICAgcmV0dXJuIG5ldyBEYXRlKGFyZ3VtZW50LmdldFRpbWUoKSk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIGFyZ3VtZW50ID09PSAnbnVtYmVyJyB8fCBhcmdTdHIgPT09ICdbb2JqZWN0IE51bWJlcl0nKSB7XG4gICAgcmV0dXJuIG5ldyBEYXRlKGFyZ3VtZW50KTtcbiAgfSBlbHNlIHtcbiAgICBpZiAoKHR5cGVvZiBhcmd1bWVudCA9PT0gJ3N0cmluZycgfHwgYXJnU3RyID09PSAnW29iamVjdCBTdHJpbmddJykgJiYgdHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgICAgY29uc29sZS53YXJuKFwiU3RhcnRpbmcgd2l0aCB2Mi4wLjAtYmV0YS4xIGRhdGUtZm5zIGRvZXNuJ3QgYWNjZXB0IHN0cmluZ3MgYXMgZGF0ZSBhcmd1bWVudHMuIFBsZWFzZSB1c2UgYHBhcnNlSVNPYCB0byBwYXJzZSBzdHJpbmdzLiBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9ibG9iL21hc3Rlci9kb2NzL3VwZ3JhZGVHdWlkZS5tZCNzdHJpbmctYXJndW1lbnRzXCIpO1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICAgIGNvbnNvbGUud2FybihuZXcgRXJyb3IoKS5zdGFjayk7XG4gICAgfVxuICAgIHJldHVybiBuZXcgRGF0ZShOYU4pO1xuICB9XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdG9JbnRlZ2VyKGRpcnR5TnVtYmVyKSB7XG4gIGlmIChkaXJ0eU51bWJlciA9PT0gbnVsbCB8fCBkaXJ0eU51bWJlciA9PT0gdHJ1ZSB8fCBkaXJ0eU51bWJlciA9PT0gZmFsc2UpIHtcbiAgICByZXR1cm4gTmFOO1xuICB9XG4gIHZhciBudW1iZXIgPSBOdW1iZXIoZGlydHlOdW1iZXIpO1xuICBpZiAoaXNOYU4obnVtYmVyKSkge1xuICAgIHJldHVybiBudW1iZXI7XG4gIH1cbiAgcmV0dXJuIG51bWJlciA8IDAgPyBNYXRoLmNlaWwobnVtYmVyKSA6IE1hdGguZmxvb3IobnVtYmVyKTtcbn0iLCJpbXBvcnQgdG9EYXRlIGZyb20gXCIuLi8uLi90b0RhdGUvaW5kZXguanNcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc3RhcnRPZlVUQ0lTT1dlZWsoZGlydHlEYXRlKSB7XG4gIHJlcXVpcmVkQXJncygxLCBhcmd1bWVudHMpO1xuICB2YXIgd2Vla1N0YXJ0c09uID0gMTtcbiAgdmFyIGRhdGUgPSB0b0RhdGUoZGlydHlEYXRlKTtcbiAgdmFyIGRheSA9IGRhdGUuZ2V0VVRDRGF5KCk7XG4gIHZhciBkaWZmID0gKGRheSA8IHdlZWtTdGFydHNPbiA/IDcgOiAwKSArIGRheSAtIHdlZWtTdGFydHNPbjtcbiAgZGF0ZS5zZXRVVENEYXRlKGRhdGUuZ2V0VVRDRGF0ZSgpIC0gZGlmZik7XG4gIGRhdGUuc2V0VVRDSG91cnMoMCwgMCwgMCwgMCk7XG4gIHJldHVybiBkYXRlO1xufSIsImltcG9ydCB0b0RhdGUgZnJvbSBcIi4uLy4uL3RvRGF0ZS9pbmRleC5qc1wiO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7XG5pbXBvcnQgc3RhcnRPZlVUQ0lTT1dlZWsgZnJvbSBcIi4uL3N0YXJ0T2ZVVENJU09XZWVrL2luZGV4LmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRVVENJU09XZWVrWWVhcihkaXJ0eURhdGUpIHtcbiAgcmVxdWlyZWRBcmdzKDEsIGFyZ3VtZW50cyk7XG4gIHZhciBkYXRlID0gdG9EYXRlKGRpcnR5RGF0ZSk7XG4gIHZhciB5ZWFyID0gZGF0ZS5nZXRVVENGdWxsWWVhcigpO1xuICB2YXIgZm91cnRoT2ZKYW51YXJ5T2ZOZXh0WWVhciA9IG5ldyBEYXRlKDApO1xuICBmb3VydGhPZkphbnVhcnlPZk5leHRZZWFyLnNldFVUQ0Z1bGxZZWFyKHllYXIgKyAxLCAwLCA0KTtcbiAgZm91cnRoT2ZKYW51YXJ5T2ZOZXh0WWVhci5zZXRVVENIb3VycygwLCAwLCAwLCAwKTtcbiAgdmFyIHN0YXJ0T2ZOZXh0WWVhciA9IHN0YXJ0T2ZVVENJU09XZWVrKGZvdXJ0aE9mSmFudWFyeU9mTmV4dFllYXIpO1xuICB2YXIgZm91cnRoT2ZKYW51YXJ5T2ZUaGlzWWVhciA9IG5ldyBEYXRlKDApO1xuICBmb3VydGhPZkphbnVhcnlPZlRoaXNZZWFyLnNldFVUQ0Z1bGxZZWFyKHllYXIsIDAsIDQpO1xuICBmb3VydGhPZkphbnVhcnlPZlRoaXNZZWFyLnNldFVUQ0hvdXJzKDAsIDAsIDAsIDApO1xuICB2YXIgc3RhcnRPZlRoaXNZZWFyID0gc3RhcnRPZlVUQ0lTT1dlZWsoZm91cnRoT2ZKYW51YXJ5T2ZUaGlzWWVhcik7XG4gIGlmIChkYXRlLmdldFRpbWUoKSA+PSBzdGFydE9mTmV4dFllYXIuZ2V0VGltZSgpKSB7XG4gICAgcmV0dXJuIHllYXIgKyAxO1xuICB9IGVsc2UgaWYgKGRhdGUuZ2V0VGltZSgpID49IHN0YXJ0T2ZUaGlzWWVhci5nZXRUaW1lKCkpIHtcbiAgICByZXR1cm4geWVhcjtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4geWVhciAtIDE7XG4gIH1cbn0iLCJ2YXIgZGVmYXVsdE9wdGlvbnMgPSB7fTtcbmV4cG9ydCBmdW5jdGlvbiBnZXREZWZhdWx0T3B0aW9ucygpIHtcbiAgcmV0dXJuIGRlZmF1bHRPcHRpb25zO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHNldERlZmF1bHRPcHRpb25zKG5ld09wdGlvbnMpIHtcbiAgZGVmYXVsdE9wdGlvbnMgPSBuZXdPcHRpb25zO1xufSIsImltcG9ydCB0b0RhdGUgZnJvbSBcIi4uLy4uL3RvRGF0ZS9pbmRleC5qc1wiO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7XG5pbXBvcnQgdG9JbnRlZ2VyIGZyb20gXCIuLi90b0ludGVnZXIvaW5kZXguanNcIjtcbmltcG9ydCB7IGdldERlZmF1bHRPcHRpb25zIH0gZnJvbSBcIi4uL2RlZmF1bHRPcHRpb25zL2luZGV4LmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzdGFydE9mVVRDV2VlayhkaXJ0eURhdGUsIG9wdGlvbnMpIHtcbiAgdmFyIF9yZWYsIF9yZWYyLCBfcmVmMywgX29wdGlvbnMkd2Vla1N0YXJ0c09uLCBfb3B0aW9ucyRsb2NhbGUsIF9vcHRpb25zJGxvY2FsZSRvcHRpbywgX2RlZmF1bHRPcHRpb25zJGxvY2FsLCBfZGVmYXVsdE9wdGlvbnMkbG9jYWwyO1xuICByZXF1aXJlZEFyZ3MoMSwgYXJndW1lbnRzKTtcbiAgdmFyIGRlZmF1bHRPcHRpb25zID0gZ2V0RGVmYXVsdE9wdGlvbnMoKTtcbiAgdmFyIHdlZWtTdGFydHNPbiA9IHRvSW50ZWdlcigoX3JlZiA9IChfcmVmMiA9IChfcmVmMyA9IChfb3B0aW9ucyR3ZWVrU3RhcnRzT24gPSBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMud2Vla1N0YXJ0c09uKSAhPT0gbnVsbCAmJiBfb3B0aW9ucyR3ZWVrU3RhcnRzT24gIT09IHZvaWQgMCA/IF9vcHRpb25zJHdlZWtTdGFydHNPbiA6IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogKF9vcHRpb25zJGxvY2FsZSA9IG9wdGlvbnMubG9jYWxlKSA9PT0gbnVsbCB8fCBfb3B0aW9ucyRsb2NhbGUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IChfb3B0aW9ucyRsb2NhbGUkb3B0aW8gPSBfb3B0aW9ucyRsb2NhbGUub3B0aW9ucykgPT09IG51bGwgfHwgX29wdGlvbnMkbG9jYWxlJG9wdGlvID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfb3B0aW9ucyRsb2NhbGUkb3B0aW8ud2Vla1N0YXJ0c09uKSAhPT0gbnVsbCAmJiBfcmVmMyAhPT0gdm9pZCAwID8gX3JlZjMgOiBkZWZhdWx0T3B0aW9ucy53ZWVrU3RhcnRzT24pICE9PSBudWxsICYmIF9yZWYyICE9PSB2b2lkIDAgPyBfcmVmMiA6IChfZGVmYXVsdE9wdGlvbnMkbG9jYWwgPSBkZWZhdWx0T3B0aW9ucy5sb2NhbGUpID09PSBudWxsIHx8IF9kZWZhdWx0T3B0aW9ucyRsb2NhbCA9PT0gdm9pZCAwID8gdm9pZCAwIDogKF9kZWZhdWx0T3B0aW9ucyRsb2NhbDIgPSBfZGVmYXVsdE9wdGlvbnMkbG9jYWwub3B0aW9ucykgPT09IG51bGwgfHwgX2RlZmF1bHRPcHRpb25zJGxvY2FsMiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2RlZmF1bHRPcHRpb25zJGxvY2FsMi53ZWVrU3RhcnRzT24pICE9PSBudWxsICYmIF9yZWYgIT09IHZvaWQgMCA/IF9yZWYgOiAwKTtcblxuICAvLyBUZXN0IGlmIHdlZWtTdGFydHNPbiBpcyBiZXR3ZWVuIDAgYW5kIDYgX2FuZF8gaXMgbm90IE5hTlxuICBpZiAoISh3ZWVrU3RhcnRzT24gPj0gMCAmJiB3ZWVrU3RhcnRzT24gPD0gNikpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignd2Vla1N0YXJ0c09uIG11c3QgYmUgYmV0d2VlbiAwIGFuZCA2IGluY2x1c2l2ZWx5Jyk7XG4gIH1cbiAgdmFyIGRhdGUgPSB0b0RhdGUoZGlydHlEYXRlKTtcbiAgdmFyIGRheSA9IGRhdGUuZ2V0VVRDRGF5KCk7XG4gIHZhciBkaWZmID0gKGRheSA8IHdlZWtTdGFydHNPbiA/IDcgOiAwKSArIGRheSAtIHdlZWtTdGFydHNPbjtcbiAgZGF0ZS5zZXRVVENEYXRlKGRhdGUuZ2V0VVRDRGF0ZSgpIC0gZGlmZik7XG4gIGRhdGUuc2V0VVRDSG91cnMoMCwgMCwgMCwgMCk7XG4gIHJldHVybiBkYXRlO1xufSIsImltcG9ydCB0b0RhdGUgZnJvbSBcIi4uLy4uL3RvRGF0ZS9pbmRleC5qc1wiO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7XG5pbXBvcnQgc3RhcnRPZlVUQ1dlZWsgZnJvbSBcIi4uL3N0YXJ0T2ZVVENXZWVrL2luZGV4LmpzXCI7XG5pbXBvcnQgdG9JbnRlZ2VyIGZyb20gXCIuLi90b0ludGVnZXIvaW5kZXguanNcIjtcbmltcG9ydCB7IGdldERlZmF1bHRPcHRpb25zIH0gZnJvbSBcIi4uL2RlZmF1bHRPcHRpb25zL2luZGV4LmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRVVENXZWVrWWVhcihkaXJ0eURhdGUsIG9wdGlvbnMpIHtcbiAgdmFyIF9yZWYsIF9yZWYyLCBfcmVmMywgX29wdGlvbnMkZmlyc3RXZWVrQ29uLCBfb3B0aW9ucyRsb2NhbGUsIF9vcHRpb25zJGxvY2FsZSRvcHRpbywgX2RlZmF1bHRPcHRpb25zJGxvY2FsLCBfZGVmYXVsdE9wdGlvbnMkbG9jYWwyO1xuICByZXF1aXJlZEFyZ3MoMSwgYXJndW1lbnRzKTtcbiAgdmFyIGRhdGUgPSB0b0RhdGUoZGlydHlEYXRlKTtcbiAgdmFyIHllYXIgPSBkYXRlLmdldFVUQ0Z1bGxZZWFyKCk7XG4gIHZhciBkZWZhdWx0T3B0aW9ucyA9IGdldERlZmF1bHRPcHRpb25zKCk7XG4gIHZhciBmaXJzdFdlZWtDb250YWluc0RhdGUgPSB0b0ludGVnZXIoKF9yZWYgPSAoX3JlZjIgPSAoX3JlZjMgPSAoX29wdGlvbnMkZmlyc3RXZWVrQ29uID0gb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLmZpcnN0V2Vla0NvbnRhaW5zRGF0ZSkgIT09IG51bGwgJiYgX29wdGlvbnMkZmlyc3RXZWVrQ29uICE9PSB2b2lkIDAgPyBfb3B0aW9ucyRmaXJzdFdlZWtDb24gOiBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IChfb3B0aW9ucyRsb2NhbGUgPSBvcHRpb25zLmxvY2FsZSkgPT09IG51bGwgfHwgX29wdGlvbnMkbG9jYWxlID09PSB2b2lkIDAgPyB2b2lkIDAgOiAoX29wdGlvbnMkbG9jYWxlJG9wdGlvID0gX29wdGlvbnMkbG9jYWxlLm9wdGlvbnMpID09PSBudWxsIHx8IF9vcHRpb25zJGxvY2FsZSRvcHRpbyA9PT0gdm9pZCAwID8gdm9pZCAwIDogX29wdGlvbnMkbG9jYWxlJG9wdGlvLmZpcnN0V2Vla0NvbnRhaW5zRGF0ZSkgIT09IG51bGwgJiYgX3JlZjMgIT09IHZvaWQgMCA/IF9yZWYzIDogZGVmYXVsdE9wdGlvbnMuZmlyc3RXZWVrQ29udGFpbnNEYXRlKSAhPT0gbnVsbCAmJiBfcmVmMiAhPT0gdm9pZCAwID8gX3JlZjIgOiAoX2RlZmF1bHRPcHRpb25zJGxvY2FsID0gZGVmYXVsdE9wdGlvbnMubG9jYWxlKSA9PT0gbnVsbCB8fCBfZGVmYXVsdE9wdGlvbnMkbG9jYWwgPT09IHZvaWQgMCA/IHZvaWQgMCA6IChfZGVmYXVsdE9wdGlvbnMkbG9jYWwyID0gX2RlZmF1bHRPcHRpb25zJGxvY2FsLm9wdGlvbnMpID09PSBudWxsIHx8IF9kZWZhdWx0T3B0aW9ucyRsb2NhbDIgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9kZWZhdWx0T3B0aW9ucyRsb2NhbDIuZmlyc3RXZWVrQ29udGFpbnNEYXRlKSAhPT0gbnVsbCAmJiBfcmVmICE9PSB2b2lkIDAgPyBfcmVmIDogMSk7XG5cbiAgLy8gVGVzdCBpZiB3ZWVrU3RhcnRzT24gaXMgYmV0d2VlbiAxIGFuZCA3IF9hbmRfIGlzIG5vdCBOYU5cbiAgaWYgKCEoZmlyc3RXZWVrQ29udGFpbnNEYXRlID49IDEgJiYgZmlyc3RXZWVrQ29udGFpbnNEYXRlIDw9IDcpKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ2ZpcnN0V2Vla0NvbnRhaW5zRGF0ZSBtdXN0IGJlIGJldHdlZW4gMSBhbmQgNyBpbmNsdXNpdmVseScpO1xuICB9XG4gIHZhciBmaXJzdFdlZWtPZk5leHRZZWFyID0gbmV3IERhdGUoMCk7XG4gIGZpcnN0V2Vla09mTmV4dFllYXIuc2V0VVRDRnVsbFllYXIoeWVhciArIDEsIDAsIGZpcnN0V2Vla0NvbnRhaW5zRGF0ZSk7XG4gIGZpcnN0V2Vla09mTmV4dFllYXIuc2V0VVRDSG91cnMoMCwgMCwgMCwgMCk7XG4gIHZhciBzdGFydE9mTmV4dFllYXIgPSBzdGFydE9mVVRDV2VlayhmaXJzdFdlZWtPZk5leHRZZWFyLCBvcHRpb25zKTtcbiAgdmFyIGZpcnN0V2Vla09mVGhpc1llYXIgPSBuZXcgRGF0ZSgwKTtcbiAgZmlyc3RXZWVrT2ZUaGlzWWVhci5zZXRVVENGdWxsWWVhcih5ZWFyLCAwLCBmaXJzdFdlZWtDb250YWluc0RhdGUpO1xuICBmaXJzdFdlZWtPZlRoaXNZZWFyLnNldFVUQ0hvdXJzKDAsIDAsIDAsIDApO1xuICB2YXIgc3RhcnRPZlRoaXNZZWFyID0gc3RhcnRPZlVUQ1dlZWsoZmlyc3RXZWVrT2ZUaGlzWWVhciwgb3B0aW9ucyk7XG4gIGlmIChkYXRlLmdldFRpbWUoKSA+PSBzdGFydE9mTmV4dFllYXIuZ2V0VGltZSgpKSB7XG4gICAgcmV0dXJuIHllYXIgKyAxO1xuICB9IGVsc2UgaWYgKGRhdGUuZ2V0VGltZSgpID49IHN0YXJ0T2ZUaGlzWWVhci5nZXRUaW1lKCkpIHtcbiAgICByZXR1cm4geWVhcjtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4geWVhciAtIDE7XG4gIH1cbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBhZGRMZWFkaW5nWmVyb3MobnVtYmVyLCB0YXJnZXRMZW5ndGgpIHtcbiAgdmFyIHNpZ24gPSBudW1iZXIgPCAwID8gJy0nIDogJyc7XG4gIHZhciBvdXRwdXQgPSBNYXRoLmFicyhudW1iZXIpLnRvU3RyaW5nKCk7XG4gIHdoaWxlIChvdXRwdXQubGVuZ3RoIDwgdGFyZ2V0TGVuZ3RoKSB7XG4gICAgb3V0cHV0ID0gJzAnICsgb3V0cHV0O1xuICB9XG4gIHJldHVybiBzaWduICsgb3V0cHV0O1xufSIsImltcG9ydCBhZGRMZWFkaW5nWmVyb3MgZnJvbSBcIi4uLy4uL2FkZExlYWRpbmdaZXJvcy9pbmRleC5qc1wiO1xuLypcbiAqIHwgICAgIHwgVW5pdCAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgVW5pdCAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwtLS0tLXwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXwtLS0tLXwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXxcbiAqIHwgIGEgIHwgQU0sIFBNICAgICAgICAgICAgICAgICAgICAgICAgIHwgIEEqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIGQgIHwgRGF5IG9mIG1vbnRoICAgICAgICAgICAgICAgICAgIHwgIEQgIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIGggIHwgSG91ciBbMS0xMl0gICAgICAgICAgICAgICAgICAgIHwgIEggIHwgSG91ciBbMC0yM10gICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIG0gIHwgTWludXRlICAgICAgICAgICAgICAgICAgICAgICAgIHwgIE0gIHwgTW9udGggICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIHMgIHwgU2Vjb25kICAgICAgICAgICAgICAgICAgICAgICAgIHwgIFMgIHwgRnJhY3Rpb24gb2Ygc2Vjb25kICAgICAgICAgICAgIHxcbiAqIHwgIHkgIHwgWWVhciAoYWJzKSAgICAgICAgICAgICAgICAgICAgIHwgIFkgIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqXG4gKiBMZXR0ZXJzIG1hcmtlZCBieSAqIGFyZSBub3QgaW1wbGVtZW50ZWQgYnV0IHJlc2VydmVkIGJ5IFVuaWNvZGUgc3RhbmRhcmQuXG4gKi9cbnZhciBmb3JtYXR0ZXJzID0ge1xuICAvLyBZZWFyXG4gIHk6IGZ1bmN0aW9uIHkoZGF0ZSwgdG9rZW4pIHtcbiAgICAvLyBGcm9tIGh0dHA6Ly93d3cudW5pY29kZS5vcmcvcmVwb3J0cy90cjM1L3RyMzUtMzEvdHIzNS1kYXRlcy5odG1sI0RhdGVfRm9ybWF0X3Rva2Vuc1xuICAgIC8vIHwgWWVhciAgICAgfCAgICAgeSB8IHl5IHwgICB5eXkgfCAgeXl5eSB8IHl5eXl5IHxcbiAgICAvLyB8LS0tLS0tLS0tLXwtLS0tLS0tfC0tLS18LS0tLS0tLXwtLS0tLS0tfC0tLS0tLS18XG4gICAgLy8gfCBBRCAxICAgICB8ICAgICAxIHwgMDEgfCAgIDAwMSB8ICAwMDAxIHwgMDAwMDEgfFxuICAgIC8vIHwgQUQgMTIgICAgfCAgICAxMiB8IDEyIHwgICAwMTIgfCAgMDAxMiB8IDAwMDEyIHxcbiAgICAvLyB8IEFEIDEyMyAgIHwgICAxMjMgfCAyMyB8ICAgMTIzIHwgIDAxMjMgfCAwMDEyMyB8XG4gICAgLy8gfCBBRCAxMjM0ICB8ICAxMjM0IHwgMzQgfCAgMTIzNCB8ICAxMjM0IHwgMDEyMzQgfFxuICAgIC8vIHwgQUQgMTIzNDUgfCAxMjM0NSB8IDQ1IHwgMTIzNDUgfCAxMjM0NSB8IDEyMzQ1IHxcblxuICAgIHZhciBzaWduZWRZZWFyID0gZGF0ZS5nZXRVVENGdWxsWWVhcigpO1xuICAgIC8vIFJldHVybnMgMSBmb3IgMSBCQyAod2hpY2ggaXMgeWVhciAwIGluIEphdmFTY3JpcHQpXG4gICAgdmFyIHllYXIgPSBzaWduZWRZZWFyID4gMCA/IHNpZ25lZFllYXIgOiAxIC0gc2lnbmVkWWVhcjtcbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKHRva2VuID09PSAneXknID8geWVhciAlIDEwMCA6IHllYXIsIHRva2VuLmxlbmd0aCk7XG4gIH0sXG4gIC8vIE1vbnRoXG4gIE06IGZ1bmN0aW9uIE0oZGF0ZSwgdG9rZW4pIHtcbiAgICB2YXIgbW9udGggPSBkYXRlLmdldFVUQ01vbnRoKCk7XG4gICAgcmV0dXJuIHRva2VuID09PSAnTScgPyBTdHJpbmcobW9udGggKyAxKSA6IGFkZExlYWRpbmdaZXJvcyhtb250aCArIDEsIDIpO1xuICB9LFxuICAvLyBEYXkgb2YgdGhlIG1vbnRoXG4gIGQ6IGZ1bmN0aW9uIGQoZGF0ZSwgdG9rZW4pIHtcbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKGRhdGUuZ2V0VVRDRGF0ZSgpLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuICAvLyBBTSBvciBQTVxuICBhOiBmdW5jdGlvbiBhKGRhdGUsIHRva2VuKSB7XG4gICAgdmFyIGRheVBlcmlvZEVudW1WYWx1ZSA9IGRhdGUuZ2V0VVRDSG91cnMoKSAvIDEyID49IDEgPyAncG0nIDogJ2FtJztcbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICBjYXNlICdhJzpcbiAgICAgIGNhc2UgJ2FhJzpcbiAgICAgICAgcmV0dXJuIGRheVBlcmlvZEVudW1WYWx1ZS50b1VwcGVyQ2FzZSgpO1xuICAgICAgY2FzZSAnYWFhJzpcbiAgICAgICAgcmV0dXJuIGRheVBlcmlvZEVudW1WYWx1ZTtcbiAgICAgIGNhc2UgJ2FhYWFhJzpcbiAgICAgICAgcmV0dXJuIGRheVBlcmlvZEVudW1WYWx1ZVswXTtcbiAgICAgIGNhc2UgJ2FhYWEnOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGRheVBlcmlvZEVudW1WYWx1ZSA9PT0gJ2FtJyA/ICdhLm0uJyA6ICdwLm0uJztcbiAgICB9XG4gIH0sXG4gIC8vIEhvdXIgWzEtMTJdXG4gIGg6IGZ1bmN0aW9uIGgoZGF0ZSwgdG9rZW4pIHtcbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKGRhdGUuZ2V0VVRDSG91cnMoKSAlIDEyIHx8IDEyLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuICAvLyBIb3VyIFswLTIzXVxuICBIOiBmdW5jdGlvbiBIKGRhdGUsIHRva2VuKSB7XG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhkYXRlLmdldFVUQ0hvdXJzKCksIHRva2VuLmxlbmd0aCk7XG4gIH0sXG4gIC8vIE1pbnV0ZVxuICBtOiBmdW5jdGlvbiBtKGRhdGUsIHRva2VuKSB7XG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhkYXRlLmdldFVUQ01pbnV0ZXMoKSwgdG9rZW4ubGVuZ3RoKTtcbiAgfSxcbiAgLy8gU2Vjb25kXG4gIHM6IGZ1bmN0aW9uIHMoZGF0ZSwgdG9rZW4pIHtcbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKGRhdGUuZ2V0VVRDU2Vjb25kcygpLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuICAvLyBGcmFjdGlvbiBvZiBzZWNvbmRcbiAgUzogZnVuY3Rpb24gUyhkYXRlLCB0b2tlbikge1xuICAgIHZhciBudW1iZXJPZkRpZ2l0cyA9IHRva2VuLmxlbmd0aDtcbiAgICB2YXIgbWlsbGlzZWNvbmRzID0gZGF0ZS5nZXRVVENNaWxsaXNlY29uZHMoKTtcbiAgICB2YXIgZnJhY3Rpb25hbFNlY29uZHMgPSBNYXRoLmZsb29yKG1pbGxpc2Vjb25kcyAqIE1hdGgucG93KDEwLCBudW1iZXJPZkRpZ2l0cyAtIDMpKTtcbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKGZyYWN0aW9uYWxTZWNvbmRzLCB0b2tlbi5sZW5ndGgpO1xuICB9XG59O1xuZXhwb3J0IGRlZmF1bHQgZm9ybWF0dGVyczsiLCJpbXBvcnQgZ2V0VVRDRGF5T2ZZZWFyIGZyb20gXCIuLi8uLi8uLi9fbGliL2dldFVUQ0RheU9mWWVhci9pbmRleC5qc1wiO1xuaW1wb3J0IGdldFVUQ0lTT1dlZWsgZnJvbSBcIi4uLy4uLy4uL19saWIvZ2V0VVRDSVNPV2Vlay9pbmRleC5qc1wiO1xuaW1wb3J0IGdldFVUQ0lTT1dlZWtZZWFyIGZyb20gXCIuLi8uLi8uLi9fbGliL2dldFVUQ0lTT1dlZWtZZWFyL2luZGV4LmpzXCI7XG5pbXBvcnQgZ2V0VVRDV2VlayBmcm9tIFwiLi4vLi4vLi4vX2xpYi9nZXRVVENXZWVrL2luZGV4LmpzXCI7XG5pbXBvcnQgZ2V0VVRDV2Vla1llYXIgZnJvbSBcIi4uLy4uLy4uL19saWIvZ2V0VVRDV2Vla1llYXIvaW5kZXguanNcIjtcbmltcG9ydCBhZGRMZWFkaW5nWmVyb3MgZnJvbSBcIi4uLy4uL2FkZExlYWRpbmdaZXJvcy9pbmRleC5qc1wiO1xuaW1wb3J0IGxpZ2h0Rm9ybWF0dGVycyBmcm9tIFwiLi4vbGlnaHRGb3JtYXR0ZXJzL2luZGV4LmpzXCI7XG52YXIgZGF5UGVyaW9kRW51bSA9IHtcbiAgYW06ICdhbScsXG4gIHBtOiAncG0nLFxuICBtaWRuaWdodDogJ21pZG5pZ2h0JyxcbiAgbm9vbjogJ25vb24nLFxuICBtb3JuaW5nOiAnbW9ybmluZycsXG4gIGFmdGVybm9vbjogJ2FmdGVybm9vbicsXG4gIGV2ZW5pbmc6ICdldmVuaW5nJyxcbiAgbmlnaHQ6ICduaWdodCdcbn07XG4vKlxuICogfCAgICAgfCBVbml0ICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBVbml0ICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICogfC0tLS0tfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfC0tLS0tfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfFxuICogfCAgYSAgfCBBTSwgUE0gICAgICAgICAgICAgICAgICAgICAgICAgfCAgQSogfCBNaWxsaXNlY29uZHMgaW4gZGF5ICAgICAgICAgICAgfFxuICogfCAgYiAgfCBBTSwgUE0sIG5vb24sIG1pZG5pZ2h0ICAgICAgICAgfCAgQiAgfCBGbGV4aWJsZSBkYXkgcGVyaW9kICAgICAgICAgICAgfFxuICogfCAgYyAgfCBTdGFuZC1hbG9uZSBsb2NhbCBkYXkgb2Ygd2VlayAgfCAgQyogfCBMb2NhbGl6ZWQgaG91ciB3LyBkYXkgcGVyaW9kICAgfFxuICogfCAgZCAgfCBEYXkgb2YgbW9udGggICAgICAgICAgICAgICAgICAgfCAgRCAgfCBEYXkgb2YgeWVhciAgICAgICAgICAgICAgICAgICAgfFxuICogfCAgZSAgfCBMb2NhbCBkYXkgb2Ygd2VlayAgICAgICAgICAgICAgfCAgRSAgfCBEYXkgb2Ygd2VlayAgICAgICAgICAgICAgICAgICAgfFxuICogfCAgZiAgfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgRiogfCBEYXkgb2Ygd2VlayBpbiBtb250aCAgICAgICAgICAgfFxuICogfCAgZyogfCBNb2RpZmllZCBKdWxpYW4gZGF5ICAgICAgICAgICAgfCAgRyAgfCBFcmEgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICogfCAgaCAgfCBIb3VyIFsxLTEyXSAgICAgICAgICAgICAgICAgICAgfCAgSCAgfCBIb3VyIFswLTIzXSAgICAgICAgICAgICAgICAgICAgfFxuICogfCAgaSEgfCBJU08gZGF5IG9mIHdlZWsgICAgICAgICAgICAgICAgfCAgSSEgfCBJU08gd2VlayBvZiB5ZWFyICAgICAgICAgICAgICAgfFxuICogfCAgaiogfCBMb2NhbGl6ZWQgaG91ciB3LyBkYXkgcGVyaW9kICAgfCAgSiogfCBMb2NhbGl6ZWQgaG91ciB3L28gZGF5IHBlcmlvZCAgfFxuICogfCAgayAgfCBIb3VyIFsxLTI0XSAgICAgICAgICAgICAgICAgICAgfCAgSyAgfCBIb3VyIFswLTExXSAgICAgICAgICAgICAgICAgICAgfFxuICogfCAgbCogfCAoZGVwcmVjYXRlZCkgICAgICAgICAgICAgICAgICAgfCAgTCAgfCBTdGFuZC1hbG9uZSBtb250aCAgICAgICAgICAgICAgfFxuICogfCAgbSAgfCBNaW51dGUgICAgICAgICAgICAgICAgICAgICAgICAgfCAgTSAgfCBNb250aCAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICogfCAgbiAgfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgTiAgfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICogfCAgbyEgfCBPcmRpbmFsIG51bWJlciBtb2RpZmllciAgICAgICAgfCAgTyAgfCBUaW1lem9uZSAoR01UKSAgICAgICAgICAgICAgICAgfFxuICogfCAgcCEgfCBMb25nIGxvY2FsaXplZCB0aW1lICAgICAgICAgICAgfCAgUCEgfCBMb25nIGxvY2FsaXplZCBkYXRlICAgICAgICAgICAgfFxuICogfCAgcSAgfCBTdGFuZC1hbG9uZSBxdWFydGVyICAgICAgICAgICAgfCAgUSAgfCBRdWFydGVyICAgICAgICAgICAgICAgICAgICAgICAgfFxuICogfCAgciogfCBSZWxhdGVkIEdyZWdvcmlhbiB5ZWFyICAgICAgICAgfCAgUiEgfCBJU08gd2Vlay1udW1iZXJpbmcgeWVhciAgICAgICAgfFxuICogfCAgcyAgfCBTZWNvbmQgICAgICAgICAgICAgICAgICAgICAgICAgfCAgUyAgfCBGcmFjdGlvbiBvZiBzZWNvbmQgICAgICAgICAgICAgfFxuICogfCAgdCEgfCBTZWNvbmRzIHRpbWVzdGFtcCAgICAgICAgICAgICAgfCAgVCEgfCBNaWxsaXNlY29uZHMgdGltZXN0YW1wICAgICAgICAgfFxuICogfCAgdSAgfCBFeHRlbmRlZCB5ZWFyICAgICAgICAgICAgICAgICAgfCAgVSogfCBDeWNsaWMgeWVhciAgICAgICAgICAgICAgICAgICAgfFxuICogfCAgdiogfCBUaW1lem9uZSAoZ2VuZXJpYyBub24tbG9jYXQuKSAgfCAgViogfCBUaW1lem9uZSAobG9jYXRpb24pICAgICAgICAgICAgfFxuICogfCAgdyAgfCBMb2NhbCB3ZWVrIG9mIHllYXIgICAgICAgICAgICAgfCAgVyogfCBXZWVrIG9mIG1vbnRoICAgICAgICAgICAgICAgICAgfFxuICogfCAgeCAgfCBUaW1lem9uZSAoSVNPLTg2MDEgdy9vIFopICAgICAgfCAgWCAgfCBUaW1lem9uZSAoSVNPLTg2MDEpICAgICAgICAgICAgfFxuICogfCAgeSAgfCBZZWFyIChhYnMpICAgICAgICAgICAgICAgICAgICAgfCAgWSAgfCBMb2NhbCB3ZWVrLW51bWJlcmluZyB5ZWFyICAgICAgfFxuICogfCAgeiAgfCBUaW1lem9uZSAoc3BlY2lmaWMgbm9uLWxvY2F0LikgfCAgWiogfCBUaW1lem9uZSAoYWxpYXNlcykgICAgICAgICAgICAgfFxuICpcbiAqIExldHRlcnMgbWFya2VkIGJ5ICogYXJlIG5vdCBpbXBsZW1lbnRlZCBidXQgcmVzZXJ2ZWQgYnkgVW5pY29kZSBzdGFuZGFyZC5cbiAqXG4gKiBMZXR0ZXJzIG1hcmtlZCBieSAhIGFyZSBub24tc3RhbmRhcmQsIGJ1dCBpbXBsZW1lbnRlZCBieSBkYXRlLWZuczpcbiAqIC0gYG9gIG1vZGlmaWVzIHRoZSBwcmV2aW91cyB0b2tlbiB0byB0dXJuIGl0IGludG8gYW4gb3JkaW5hbCAoc2VlIGBmb3JtYXRgIGRvY3MpXG4gKiAtIGBpYCBpcyBJU08gZGF5IG9mIHdlZWsuIEZvciBgaWAgYW5kIGBpaWAgaXMgcmV0dXJucyBudW1lcmljIElTTyB3ZWVrIGRheXMsXG4gKiAgIGkuZS4gNyBmb3IgU3VuZGF5LCAxIGZvciBNb25kYXksIGV0Yy5cbiAqIC0gYElgIGlzIElTTyB3ZWVrIG9mIHllYXIsIGFzIG9wcG9zZWQgdG8gYHdgIHdoaWNoIGlzIGxvY2FsIHdlZWsgb2YgeWVhci5cbiAqIC0gYFJgIGlzIElTTyB3ZWVrLW51bWJlcmluZyB5ZWFyLCBhcyBvcHBvc2VkIHRvIGBZYCB3aGljaCBpcyBsb2NhbCB3ZWVrLW51bWJlcmluZyB5ZWFyLlxuICogICBgUmAgaXMgc3VwcG9zZWQgdG8gYmUgdXNlZCBpbiBjb25qdW5jdGlvbiB3aXRoIGBJYCBhbmQgYGlgXG4gKiAgIGZvciB1bml2ZXJzYWwgSVNPIHdlZWstbnVtYmVyaW5nIGRhdGUsIHdoZXJlYXNcbiAqICAgYFlgIGlzIHN1cHBvc2VkIHRvIGJlIHVzZWQgaW4gY29uanVuY3Rpb24gd2l0aCBgd2AgYW5kIGBlYFxuICogICBmb3Igd2Vlay1udW1iZXJpbmcgZGF0ZSBzcGVjaWZpYyB0byB0aGUgbG9jYWxlLlxuICogLSBgUGAgaXMgbG9uZyBsb2NhbGl6ZWQgZGF0ZSBmb3JtYXRcbiAqIC0gYHBgIGlzIGxvbmcgbG9jYWxpemVkIHRpbWUgZm9ybWF0XG4gKi9cblxudmFyIGZvcm1hdHRlcnMgPSB7XG4gIC8vIEVyYVxuICBHOiBmdW5jdGlvbiBHKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIHZhciBlcmEgPSBkYXRlLmdldFVUQ0Z1bGxZZWFyKCkgPiAwID8gMSA6IDA7XG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgLy8gQUQsIEJDXG4gICAgICBjYXNlICdHJzpcbiAgICAgIGNhc2UgJ0dHJzpcbiAgICAgIGNhc2UgJ0dHRyc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5lcmEoZXJhLCB7XG4gICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCdcbiAgICAgICAgfSk7XG4gICAgICAvLyBBLCBCXG4gICAgICBjYXNlICdHR0dHRyc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5lcmEoZXJhLCB7XG4gICAgICAgICAgd2lkdGg6ICduYXJyb3cnXG4gICAgICAgIH0pO1xuICAgICAgLy8gQW5ubyBEb21pbmksIEJlZm9yZSBDaHJpc3RcbiAgICAgIGNhc2UgJ0dHR0cnOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmVyYShlcmEsIHtcbiAgICAgICAgICB3aWR0aDogJ3dpZGUnXG4gICAgICAgIH0pO1xuICAgIH1cbiAgfSxcbiAgLy8gWWVhclxuICB5OiBmdW5jdGlvbiB5KGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIC8vIE9yZGluYWwgbnVtYmVyXG4gICAgaWYgKHRva2VuID09PSAneW8nKSB7XG4gICAgICB2YXIgc2lnbmVkWWVhciA9IGRhdGUuZ2V0VVRDRnVsbFllYXIoKTtcbiAgICAgIC8vIFJldHVybnMgMSBmb3IgMSBCQyAod2hpY2ggaXMgeWVhciAwIGluIEphdmFTY3JpcHQpXG4gICAgICB2YXIgeWVhciA9IHNpZ25lZFllYXIgPiAwID8gc2lnbmVkWWVhciA6IDEgLSBzaWduZWRZZWFyO1xuICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIoeWVhciwge1xuICAgICAgICB1bml0OiAneWVhcidcbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gbGlnaHRGb3JtYXR0ZXJzLnkoZGF0ZSwgdG9rZW4pO1xuICB9LFxuICAvLyBMb2NhbCB3ZWVrLW51bWJlcmluZyB5ZWFyXG4gIFk6IGZ1bmN0aW9uIFkoZGF0ZSwgdG9rZW4sIGxvY2FsaXplLCBvcHRpb25zKSB7XG4gICAgdmFyIHNpZ25lZFdlZWtZZWFyID0gZ2V0VVRDV2Vla1llYXIoZGF0ZSwgb3B0aW9ucyk7XG4gICAgLy8gUmV0dXJucyAxIGZvciAxIEJDICh3aGljaCBpcyB5ZWFyIDAgaW4gSmF2YVNjcmlwdClcbiAgICB2YXIgd2Vla1llYXIgPSBzaWduZWRXZWVrWWVhciA+IDAgPyBzaWduZWRXZWVrWWVhciA6IDEgLSBzaWduZWRXZWVrWWVhcjtcblxuICAgIC8vIFR3byBkaWdpdCB5ZWFyXG4gICAgaWYgKHRva2VuID09PSAnWVknKSB7XG4gICAgICB2YXIgdHdvRGlnaXRZZWFyID0gd2Vla1llYXIgJSAxMDA7XG4gICAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKHR3b0RpZ2l0WWVhciwgMik7XG4gICAgfVxuXG4gICAgLy8gT3JkaW5hbCBudW1iZXJcbiAgICBpZiAodG9rZW4gPT09ICdZbycpIHtcbiAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKHdlZWtZZWFyLCB7XG4gICAgICAgIHVuaXQ6ICd5ZWFyJ1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gUGFkZGluZ1xuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3Mod2Vla1llYXIsIHRva2VuLmxlbmd0aCk7XG4gIH0sXG4gIC8vIElTTyB3ZWVrLW51bWJlcmluZyB5ZWFyXG4gIFI6IGZ1bmN0aW9uIFIoZGF0ZSwgdG9rZW4pIHtcbiAgICB2YXIgaXNvV2Vla1llYXIgPSBnZXRVVENJU09XZWVrWWVhcihkYXRlKTtcblxuICAgIC8vIFBhZGRpbmdcbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKGlzb1dlZWtZZWFyLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuICAvLyBFeHRlbmRlZCB5ZWFyLiBUaGlzIGlzIGEgc2luZ2xlIG51bWJlciBkZXNpZ25hdGluZyB0aGUgeWVhciBvZiB0aGlzIGNhbGVuZGFyIHN5c3RlbS5cbiAgLy8gVGhlIG1haW4gZGlmZmVyZW5jZSBiZXR3ZWVuIGB5YCBhbmQgYHVgIGxvY2FsaXplcnMgYXJlIEIuQy4geWVhcnM6XG4gIC8vIHwgWWVhciB8IGB5YCB8IGB1YCB8XG4gIC8vIHwtLS0tLS18LS0tLS18LS0tLS18XG4gIC8vIHwgQUMgMSB8ICAgMSB8ICAgMSB8XG4gIC8vIHwgQkMgMSB8ICAgMSB8ICAgMCB8XG4gIC8vIHwgQkMgMiB8ICAgMiB8ICAtMSB8XG4gIC8vIEFsc28gYHl5YCBhbHdheXMgcmV0dXJucyB0aGUgbGFzdCB0d28gZGlnaXRzIG9mIGEgeWVhcixcbiAgLy8gd2hpbGUgYHV1YCBwYWRzIHNpbmdsZSBkaWdpdCB5ZWFycyB0byAyIGNoYXJhY3RlcnMgYW5kIHJldHVybnMgb3RoZXIgeWVhcnMgdW5jaGFuZ2VkLlxuICB1OiBmdW5jdGlvbiB1KGRhdGUsIHRva2VuKSB7XG4gICAgdmFyIHllYXIgPSBkYXRlLmdldFVUQ0Z1bGxZZWFyKCk7XG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyh5ZWFyLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuICAvLyBRdWFydGVyXG4gIFE6IGZ1bmN0aW9uIFEoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgdmFyIHF1YXJ0ZXIgPSBNYXRoLmNlaWwoKGRhdGUuZ2V0VVRDTW9udGgoKSArIDEpIC8gMyk7XG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgLy8gMSwgMiwgMywgNFxuICAgICAgY2FzZSAnUSc6XG4gICAgICAgIHJldHVybiBTdHJpbmcocXVhcnRlcik7XG4gICAgICAvLyAwMSwgMDIsIDAzLCAwNFxuICAgICAgY2FzZSAnUVEnOlxuICAgICAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKHF1YXJ0ZXIsIDIpO1xuICAgICAgLy8gMXN0LCAybmQsIDNyZCwgNHRoXG4gICAgICBjYXNlICdRbyc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKHF1YXJ0ZXIsIHtcbiAgICAgICAgICB1bml0OiAncXVhcnRlcidcbiAgICAgICAgfSk7XG4gICAgICAvLyBRMSwgUTIsIFEzLCBRNFxuICAgICAgY2FzZSAnUVFRJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLnF1YXJ0ZXIocXVhcnRlciwge1xuICAgICAgICAgIHdpZHRoOiAnYWJicmV2aWF0ZWQnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIDEsIDIsIDMsIDQgKG5hcnJvdyBxdWFydGVyOyBjb3VsZCBiZSBub3QgbnVtZXJpY2FsKVxuICAgICAgY2FzZSAnUVFRUVEnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUucXVhcnRlcihxdWFydGVyLCB7XG4gICAgICAgICAgd2lkdGg6ICduYXJyb3cnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIDFzdCBxdWFydGVyLCAybmQgcXVhcnRlciwgLi4uXG4gICAgICBjYXNlICdRUVFRJzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5xdWFydGVyKHF1YXJ0ZXIsIHtcbiAgICAgICAgICB3aWR0aDogJ3dpZGUnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICB9XG4gIH0sXG4gIC8vIFN0YW5kLWFsb25lIHF1YXJ0ZXJcbiAgcTogZnVuY3Rpb24gcShkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICB2YXIgcXVhcnRlciA9IE1hdGguY2VpbCgoZGF0ZS5nZXRVVENNb250aCgpICsgMSkgLyAzKTtcbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAvLyAxLCAyLCAzLCA0XG4gICAgICBjYXNlICdxJzpcbiAgICAgICAgcmV0dXJuIFN0cmluZyhxdWFydGVyKTtcbiAgICAgIC8vIDAxLCAwMiwgMDMsIDA0XG4gICAgICBjYXNlICdxcSc6XG4gICAgICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MocXVhcnRlciwgMik7XG4gICAgICAvLyAxc3QsIDJuZCwgM3JkLCA0dGhcbiAgICAgIGNhc2UgJ3FvJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIocXVhcnRlciwge1xuICAgICAgICAgIHVuaXQ6ICdxdWFydGVyJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIFExLCBRMiwgUTMsIFE0XG4gICAgICBjYXNlICdxcXEnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUucXVhcnRlcihxdWFydGVyLCB7XG4gICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCcsXG4gICAgICAgICAgY29udGV4dDogJ3N0YW5kYWxvbmUnXG4gICAgICAgIH0pO1xuICAgICAgLy8gMSwgMiwgMywgNCAobmFycm93IHF1YXJ0ZXI7IGNvdWxkIGJlIG5vdCBudW1lcmljYWwpXG4gICAgICBjYXNlICdxcXFxcSc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5xdWFydGVyKHF1YXJ0ZXIsIHtcbiAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgY29udGV4dDogJ3N0YW5kYWxvbmUnXG4gICAgICAgIH0pO1xuICAgICAgLy8gMXN0IHF1YXJ0ZXIsIDJuZCBxdWFydGVyLCAuLi5cbiAgICAgIGNhc2UgJ3FxcXEnOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLnF1YXJ0ZXIocXVhcnRlciwge1xuICAgICAgICAgIHdpZHRoOiAnd2lkZScsXG4gICAgICAgICAgY29udGV4dDogJ3N0YW5kYWxvbmUnXG4gICAgICAgIH0pO1xuICAgIH1cbiAgfSxcbiAgLy8gTW9udGhcbiAgTTogZnVuY3Rpb24gTShkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICB2YXIgbW9udGggPSBkYXRlLmdldFVUQ01vbnRoKCk7XG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgY2FzZSAnTSc6XG4gICAgICBjYXNlICdNTSc6XG4gICAgICAgIHJldHVybiBsaWdodEZvcm1hdHRlcnMuTShkYXRlLCB0b2tlbik7XG4gICAgICAvLyAxc3QsIDJuZCwgLi4uLCAxMnRoXG4gICAgICBjYXNlICdNbyc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKG1vbnRoICsgMSwge1xuICAgICAgICAgIHVuaXQ6ICdtb250aCdcbiAgICAgICAgfSk7XG4gICAgICAvLyBKYW4sIEZlYiwgLi4uLCBEZWNcbiAgICAgIGNhc2UgJ01NTSc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5tb250aChtb250aCwge1xuICAgICAgICAgIHdpZHRoOiAnYWJicmV2aWF0ZWQnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIEosIEYsIC4uLiwgRFxuICAgICAgY2FzZSAnTU1NTU0nOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUubW9udGgobW9udGgsIHtcbiAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgICAgLy8gSmFudWFyeSwgRmVicnVhcnksIC4uLiwgRGVjZW1iZXJcbiAgICAgIGNhc2UgJ01NTU0nOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLm1vbnRoKG1vbnRoLCB7XG4gICAgICAgICAgd2lkdGg6ICd3aWRlJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgfVxuICB9LFxuICAvLyBTdGFuZC1hbG9uZSBtb250aFxuICBMOiBmdW5jdGlvbiBMKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIHZhciBtb250aCA9IGRhdGUuZ2V0VVRDTW9udGgoKTtcbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAvLyAxLCAyLCAuLi4sIDEyXG4gICAgICBjYXNlICdMJzpcbiAgICAgICAgcmV0dXJuIFN0cmluZyhtb250aCArIDEpO1xuICAgICAgLy8gMDEsIDAyLCAuLi4sIDEyXG4gICAgICBjYXNlICdMTCc6XG4gICAgICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MobW9udGggKyAxLCAyKTtcbiAgICAgIC8vIDFzdCwgMm5kLCAuLi4sIDEydGhcbiAgICAgIGNhc2UgJ0xvJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIobW9udGggKyAxLCB7XG4gICAgICAgICAgdW5pdDogJ21vbnRoJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIEphbiwgRmViLCAuLi4sIERlY1xuICAgICAgY2FzZSAnTExMJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLm1vbnRoKG1vbnRoLCB7XG4gICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCcsXG4gICAgICAgICAgY29udGV4dDogJ3N0YW5kYWxvbmUnXG4gICAgICAgIH0pO1xuICAgICAgLy8gSiwgRiwgLi4uLCBEXG4gICAgICBjYXNlICdMTExMTCc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5tb250aChtb250aCwge1xuICAgICAgICAgIHdpZHRoOiAnbmFycm93JyxcbiAgICAgICAgICBjb250ZXh0OiAnc3RhbmRhbG9uZSdcbiAgICAgICAgfSk7XG4gICAgICAvLyBKYW51YXJ5LCBGZWJydWFyeSwgLi4uLCBEZWNlbWJlclxuICAgICAgY2FzZSAnTExMTCc6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gbG9jYWxpemUubW9udGgobW9udGgsIHtcbiAgICAgICAgICB3aWR0aDogJ3dpZGUnLFxuICAgICAgICAgIGNvbnRleHQ6ICdzdGFuZGFsb25lJ1xuICAgICAgICB9KTtcbiAgICB9XG4gIH0sXG4gIC8vIExvY2FsIHdlZWsgb2YgeWVhclxuICB3OiBmdW5jdGlvbiB3KGRhdGUsIHRva2VuLCBsb2NhbGl6ZSwgb3B0aW9ucykge1xuICAgIHZhciB3ZWVrID0gZ2V0VVRDV2VlayhkYXRlLCBvcHRpb25zKTtcbiAgICBpZiAodG9rZW4gPT09ICd3bycpIHtcbiAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKHdlZWssIHtcbiAgICAgICAgdW5pdDogJ3dlZWsnXG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyh3ZWVrLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuICAvLyBJU08gd2VlayBvZiB5ZWFyXG4gIEk6IGZ1bmN0aW9uIEkoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgdmFyIGlzb1dlZWsgPSBnZXRVVENJU09XZWVrKGRhdGUpO1xuICAgIGlmICh0b2tlbiA9PT0gJ0lvJykge1xuICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIoaXNvV2Vlaywge1xuICAgICAgICB1bml0OiAnd2VlaydcbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKGlzb1dlZWssIHRva2VuLmxlbmd0aCk7XG4gIH0sXG4gIC8vIERheSBvZiB0aGUgbW9udGhcbiAgZDogZnVuY3Rpb24gZChkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICBpZiAodG9rZW4gPT09ICdkbycpIHtcbiAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKGRhdGUuZ2V0VVRDRGF0ZSgpLCB7XG4gICAgICAgIHVuaXQ6ICdkYXRlJ1xuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBsaWdodEZvcm1hdHRlcnMuZChkYXRlLCB0b2tlbik7XG4gIH0sXG4gIC8vIERheSBvZiB5ZWFyXG4gIEQ6IGZ1bmN0aW9uIEQoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgdmFyIGRheU9mWWVhciA9IGdldFVUQ0RheU9mWWVhcihkYXRlKTtcbiAgICBpZiAodG9rZW4gPT09ICdEbycpIHtcbiAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKGRheU9mWWVhciwge1xuICAgICAgICB1bml0OiAnZGF5T2ZZZWFyJ1xuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MoZGF5T2ZZZWFyLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuICAvLyBEYXkgb2Ygd2Vla1xuICBFOiBmdW5jdGlvbiBFKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIHZhciBkYXlPZldlZWsgPSBkYXRlLmdldFVUQ0RheSgpO1xuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIC8vIFR1ZVxuICAgICAgY2FzZSAnRSc6XG4gICAgICBjYXNlICdFRSc6XG4gICAgICBjYXNlICdFRUUnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiAnYWJicmV2aWF0ZWQnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIFRcbiAgICAgIGNhc2UgJ0VFRUVFJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgICAgLy8gVHVcbiAgICAgIGNhc2UgJ0VFRUVFRSc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6ICdzaG9ydCcsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgICAgLy8gVHVlc2RheVxuICAgICAgY2FzZSAnRUVFRSc6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiAnd2lkZScsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgIH1cbiAgfSxcbiAgLy8gTG9jYWwgZGF5IG9mIHdlZWtcbiAgZTogZnVuY3Rpb24gZShkYXRlLCB0b2tlbiwgbG9jYWxpemUsIG9wdGlvbnMpIHtcbiAgICB2YXIgZGF5T2ZXZWVrID0gZGF0ZS5nZXRVVENEYXkoKTtcbiAgICB2YXIgbG9jYWxEYXlPZldlZWsgPSAoZGF5T2ZXZWVrIC0gb3B0aW9ucy53ZWVrU3RhcnRzT24gKyA4KSAlIDcgfHwgNztcbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAvLyBOdW1lcmljYWwgdmFsdWUgKE50aCBkYXkgb2Ygd2VlayB3aXRoIGN1cnJlbnQgbG9jYWxlIG9yIHdlZWtTdGFydHNPbilcbiAgICAgIGNhc2UgJ2UnOlxuICAgICAgICByZXR1cm4gU3RyaW5nKGxvY2FsRGF5T2ZXZWVrKTtcbiAgICAgIC8vIFBhZGRlZCBudW1lcmljYWwgdmFsdWVcbiAgICAgIGNhc2UgJ2VlJzpcbiAgICAgICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhsb2NhbERheU9mV2VlaywgMik7XG4gICAgICAvLyAxc3QsIDJuZCwgLi4uLCA3dGhcbiAgICAgIGNhc2UgJ2VvJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIobG9jYWxEYXlPZldlZWssIHtcbiAgICAgICAgICB1bml0OiAnZGF5J1xuICAgICAgICB9KTtcbiAgICAgIGNhc2UgJ2VlZSc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCcsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgICAgLy8gVFxuICAgICAgY2FzZSAnZWVlZWUnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiAnbmFycm93JyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgICAvLyBUdVxuICAgICAgY2FzZSAnZWVlZWVlJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogJ3Nob3J0JyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgICAvLyBUdWVzZGF5XG4gICAgICBjYXNlICdlZWVlJzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6ICd3aWRlJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgfVxuICB9LFxuICAvLyBTdGFuZC1hbG9uZSBsb2NhbCBkYXkgb2Ygd2Vla1xuICBjOiBmdW5jdGlvbiBjKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSwgb3B0aW9ucykge1xuICAgIHZhciBkYXlPZldlZWsgPSBkYXRlLmdldFVUQ0RheSgpO1xuICAgIHZhciBsb2NhbERheU9mV2VlayA9IChkYXlPZldlZWsgLSBvcHRpb25zLndlZWtTdGFydHNPbiArIDgpICUgNyB8fCA3O1xuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIC8vIE51bWVyaWNhbCB2YWx1ZSAoc2FtZSBhcyBpbiBgZWApXG4gICAgICBjYXNlICdjJzpcbiAgICAgICAgcmV0dXJuIFN0cmluZyhsb2NhbERheU9mV2Vlayk7XG4gICAgICAvLyBQYWRkZWQgbnVtZXJpY2FsIHZhbHVlXG4gICAgICBjYXNlICdjYyc6XG4gICAgICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MobG9jYWxEYXlPZldlZWssIHRva2VuLmxlbmd0aCk7XG4gICAgICAvLyAxc3QsIDJuZCwgLi4uLCA3dGhcbiAgICAgIGNhc2UgJ2NvJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIobG9jYWxEYXlPZldlZWssIHtcbiAgICAgICAgICB1bml0OiAnZGF5J1xuICAgICAgICB9KTtcbiAgICAgIGNhc2UgJ2NjYyc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCcsXG4gICAgICAgICAgY29udGV4dDogJ3N0YW5kYWxvbmUnXG4gICAgICAgIH0pO1xuICAgICAgLy8gVFxuICAgICAgY2FzZSAnY2NjY2MnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiAnbmFycm93JyxcbiAgICAgICAgICBjb250ZXh0OiAnc3RhbmRhbG9uZSdcbiAgICAgICAgfSk7XG4gICAgICAvLyBUdVxuICAgICAgY2FzZSAnY2NjY2NjJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogJ3Nob3J0JyxcbiAgICAgICAgICBjb250ZXh0OiAnc3RhbmRhbG9uZSdcbiAgICAgICAgfSk7XG4gICAgICAvLyBUdWVzZGF5XG4gICAgICBjYXNlICdjY2NjJzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6ICd3aWRlJyxcbiAgICAgICAgICBjb250ZXh0OiAnc3RhbmRhbG9uZSdcbiAgICAgICAgfSk7XG4gICAgfVxuICB9LFxuICAvLyBJU08gZGF5IG9mIHdlZWtcbiAgaTogZnVuY3Rpb24gaShkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICB2YXIgZGF5T2ZXZWVrID0gZGF0ZS5nZXRVVENEYXkoKTtcbiAgICB2YXIgaXNvRGF5T2ZXZWVrID0gZGF5T2ZXZWVrID09PSAwID8gNyA6IGRheU9mV2VlaztcbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAvLyAyXG4gICAgICBjYXNlICdpJzpcbiAgICAgICAgcmV0dXJuIFN0cmluZyhpc29EYXlPZldlZWspO1xuICAgICAgLy8gMDJcbiAgICAgIGNhc2UgJ2lpJzpcbiAgICAgICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhpc29EYXlPZldlZWssIHRva2VuLmxlbmd0aCk7XG4gICAgICAvLyAybmRcbiAgICAgIGNhc2UgJ2lvJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIoaXNvRGF5T2ZXZWVrLCB7XG4gICAgICAgICAgdW5pdDogJ2RheSdcbiAgICAgICAgfSk7XG4gICAgICAvLyBUdWVcbiAgICAgIGNhc2UgJ2lpaSc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCcsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgICAgLy8gVFxuICAgICAgY2FzZSAnaWlpaWknOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiAnbmFycm93JyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgICAvLyBUdVxuICAgICAgY2FzZSAnaWlpaWlpJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogJ3Nob3J0JyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgICAvLyBUdWVzZGF5XG4gICAgICBjYXNlICdpaWlpJzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6ICd3aWRlJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgfVxuICB9LFxuICAvLyBBTSBvciBQTVxuICBhOiBmdW5jdGlvbiBhKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIHZhciBob3VycyA9IGRhdGUuZ2V0VVRDSG91cnMoKTtcbiAgICB2YXIgZGF5UGVyaW9kRW51bVZhbHVlID0gaG91cnMgLyAxMiA+PSAxID8gJ3BtJyA6ICdhbSc7XG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgY2FzZSAnYSc6XG4gICAgICBjYXNlICdhYSc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXlQZXJpb2QoZGF5UGVyaW9kRW51bVZhbHVlLCB7XG4gICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCcsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgICAgY2FzZSAnYWFhJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheVBlcmlvZChkYXlQZXJpb2RFbnVtVmFsdWUsIHtcbiAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSkudG9Mb3dlckNhc2UoKTtcbiAgICAgIGNhc2UgJ2FhYWFhJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheVBlcmlvZChkYXlQZXJpb2RFbnVtVmFsdWUsIHtcbiAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgICAgY2FzZSAnYWFhYSc6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5UGVyaW9kKGRheVBlcmlvZEVudW1WYWx1ZSwge1xuICAgICAgICAgIHdpZHRoOiAnd2lkZScsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgIH1cbiAgfSxcbiAgLy8gQU0sIFBNLCBtaWRuaWdodCwgbm9vblxuICBiOiBmdW5jdGlvbiBiKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIHZhciBob3VycyA9IGRhdGUuZ2V0VVRDSG91cnMoKTtcbiAgICB2YXIgZGF5UGVyaW9kRW51bVZhbHVlO1xuICAgIGlmIChob3VycyA9PT0gMTIpIHtcbiAgICAgIGRheVBlcmlvZEVudW1WYWx1ZSA9IGRheVBlcmlvZEVudW0ubm9vbjtcbiAgICB9IGVsc2UgaWYgKGhvdXJzID09PSAwKSB7XG4gICAgICBkYXlQZXJpb2RFbnVtVmFsdWUgPSBkYXlQZXJpb2RFbnVtLm1pZG5pZ2h0O1xuICAgIH0gZWxzZSB7XG4gICAgICBkYXlQZXJpb2RFbnVtVmFsdWUgPSBob3VycyAvIDEyID49IDEgPyAncG0nIDogJ2FtJztcbiAgICB9XG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgY2FzZSAnYic6XG4gICAgICBjYXNlICdiYic6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXlQZXJpb2QoZGF5UGVyaW9kRW51bVZhbHVlLCB7XG4gICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCcsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgICAgY2FzZSAnYmJiJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheVBlcmlvZChkYXlQZXJpb2RFbnVtVmFsdWUsIHtcbiAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSkudG9Mb3dlckNhc2UoKTtcbiAgICAgIGNhc2UgJ2JiYmJiJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheVBlcmlvZChkYXlQZXJpb2RFbnVtVmFsdWUsIHtcbiAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgICAgY2FzZSAnYmJiYic6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5UGVyaW9kKGRheVBlcmlvZEVudW1WYWx1ZSwge1xuICAgICAgICAgIHdpZHRoOiAnd2lkZScsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgIH1cbiAgfSxcbiAgLy8gaW4gdGhlIG1vcm5pbmcsIGluIHRoZSBhZnRlcm5vb24sIGluIHRoZSBldmVuaW5nLCBhdCBuaWdodFxuICBCOiBmdW5jdGlvbiBCKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIHZhciBob3VycyA9IGRhdGUuZ2V0VVRDSG91cnMoKTtcbiAgICB2YXIgZGF5UGVyaW9kRW51bVZhbHVlO1xuICAgIGlmIChob3VycyA+PSAxNykge1xuICAgICAgZGF5UGVyaW9kRW51bVZhbHVlID0gZGF5UGVyaW9kRW51bS5ldmVuaW5nO1xuICAgIH0gZWxzZSBpZiAoaG91cnMgPj0gMTIpIHtcbiAgICAgIGRheVBlcmlvZEVudW1WYWx1ZSA9IGRheVBlcmlvZEVudW0uYWZ0ZXJub29uO1xuICAgIH0gZWxzZSBpZiAoaG91cnMgPj0gNCkge1xuICAgICAgZGF5UGVyaW9kRW51bVZhbHVlID0gZGF5UGVyaW9kRW51bS5tb3JuaW5nO1xuICAgIH0gZWxzZSB7XG4gICAgICBkYXlQZXJpb2RFbnVtVmFsdWUgPSBkYXlQZXJpb2RFbnVtLm5pZ2h0O1xuICAgIH1cbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICBjYXNlICdCJzpcbiAgICAgIGNhc2UgJ0JCJzpcbiAgICAgIGNhc2UgJ0JCQic6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXlQZXJpb2QoZGF5UGVyaW9kRW51bVZhbHVlLCB7XG4gICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCcsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgICAgY2FzZSAnQkJCQkInOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5UGVyaW9kKGRheVBlcmlvZEVudW1WYWx1ZSwge1xuICAgICAgICAgIHdpZHRoOiAnbmFycm93JyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgICBjYXNlICdCQkJCJzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXlQZXJpb2QoZGF5UGVyaW9kRW51bVZhbHVlLCB7XG4gICAgICAgICAgd2lkdGg6ICd3aWRlJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgfVxuICB9LFxuICAvLyBIb3VyIFsxLTEyXVxuICBoOiBmdW5jdGlvbiBoKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIGlmICh0b2tlbiA9PT0gJ2hvJykge1xuICAgICAgdmFyIGhvdXJzID0gZGF0ZS5nZXRVVENIb3VycygpICUgMTI7XG4gICAgICBpZiAoaG91cnMgPT09IDApIGhvdXJzID0gMTI7XG4gICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihob3Vycywge1xuICAgICAgICB1bml0OiAnaG91cidcbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gbGlnaHRGb3JtYXR0ZXJzLmgoZGF0ZSwgdG9rZW4pO1xuICB9LFxuICAvLyBIb3VyIFswLTIzXVxuICBIOiBmdW5jdGlvbiBIKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIGlmICh0b2tlbiA9PT0gJ0hvJykge1xuICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIoZGF0ZS5nZXRVVENIb3VycygpLCB7XG4gICAgICAgIHVuaXQ6ICdob3VyJ1xuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBsaWdodEZvcm1hdHRlcnMuSChkYXRlLCB0b2tlbik7XG4gIH0sXG4gIC8vIEhvdXIgWzAtMTFdXG4gIEs6IGZ1bmN0aW9uIEsoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgdmFyIGhvdXJzID0gZGF0ZS5nZXRVVENIb3VycygpICUgMTI7XG4gICAgaWYgKHRva2VuID09PSAnS28nKSB7XG4gICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihob3Vycywge1xuICAgICAgICB1bml0OiAnaG91cidcbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKGhvdXJzLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuICAvLyBIb3VyIFsxLTI0XVxuICBrOiBmdW5jdGlvbiBrKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIHZhciBob3VycyA9IGRhdGUuZ2V0VVRDSG91cnMoKTtcbiAgICBpZiAoaG91cnMgPT09IDApIGhvdXJzID0gMjQ7XG4gICAgaWYgKHRva2VuID09PSAna28nKSB7XG4gICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihob3Vycywge1xuICAgICAgICB1bml0OiAnaG91cidcbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKGhvdXJzLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuICAvLyBNaW51dGVcbiAgbTogZnVuY3Rpb24gbShkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICBpZiAodG9rZW4gPT09ICdtbycpIHtcbiAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKGRhdGUuZ2V0VVRDTWludXRlcygpLCB7XG4gICAgICAgIHVuaXQ6ICdtaW51dGUnXG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIGxpZ2h0Rm9ybWF0dGVycy5tKGRhdGUsIHRva2VuKTtcbiAgfSxcbiAgLy8gU2Vjb25kXG4gIHM6IGZ1bmN0aW9uIHMoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgaWYgKHRva2VuID09PSAnc28nKSB7XG4gICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihkYXRlLmdldFVUQ1NlY29uZHMoKSwge1xuICAgICAgICB1bml0OiAnc2Vjb25kJ1xuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBsaWdodEZvcm1hdHRlcnMucyhkYXRlLCB0b2tlbik7XG4gIH0sXG4gIC8vIEZyYWN0aW9uIG9mIHNlY29uZFxuICBTOiBmdW5jdGlvbiBTKGRhdGUsIHRva2VuKSB7XG4gICAgcmV0dXJuIGxpZ2h0Rm9ybWF0dGVycy5TKGRhdGUsIHRva2VuKTtcbiAgfSxcbiAgLy8gVGltZXpvbmUgKElTTy04NjAxLiBJZiBvZmZzZXQgaXMgMCwgb3V0cHV0IGlzIGFsd2F5cyBgJ1onYClcbiAgWDogZnVuY3Rpb24gWChkYXRlLCB0b2tlbiwgX2xvY2FsaXplLCBvcHRpb25zKSB7XG4gICAgdmFyIG9yaWdpbmFsRGF0ZSA9IG9wdGlvbnMuX29yaWdpbmFsRGF0ZSB8fCBkYXRlO1xuICAgIHZhciB0aW1lem9uZU9mZnNldCA9IG9yaWdpbmFsRGF0ZS5nZXRUaW1lem9uZU9mZnNldCgpO1xuICAgIGlmICh0aW1lem9uZU9mZnNldCA9PT0gMCkge1xuICAgICAgcmV0dXJuICdaJztcbiAgICB9XG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgLy8gSG91cnMgYW5kIG9wdGlvbmFsIG1pbnV0ZXNcbiAgICAgIGNhc2UgJ1gnOlxuICAgICAgICByZXR1cm4gZm9ybWF0VGltZXpvbmVXaXRoT3B0aW9uYWxNaW51dGVzKHRpbWV6b25lT2Zmc2V0KTtcblxuICAgICAgLy8gSG91cnMsIG1pbnV0ZXMgYW5kIG9wdGlvbmFsIHNlY29uZHMgd2l0aG91dCBgOmAgZGVsaW1pdGVyXG4gICAgICAvLyBOb3RlOiBuZWl0aGVyIElTTy04NjAxIG5vciBKYXZhU2NyaXB0IHN1cHBvcnRzIHNlY29uZHMgaW4gdGltZXpvbmUgb2Zmc2V0c1xuICAgICAgLy8gc28gdGhpcyB0b2tlbiBhbHdheXMgaGFzIHRoZSBzYW1lIG91dHB1dCBhcyBgWFhgXG4gICAgICBjYXNlICdYWFhYJzpcbiAgICAgIGNhc2UgJ1hYJzpcbiAgICAgICAgLy8gSG91cnMgYW5kIG1pbnV0ZXMgd2l0aG91dCBgOmAgZGVsaW1pdGVyXG4gICAgICAgIHJldHVybiBmb3JtYXRUaW1lem9uZSh0aW1lem9uZU9mZnNldCk7XG5cbiAgICAgIC8vIEhvdXJzLCBtaW51dGVzIGFuZCBvcHRpb25hbCBzZWNvbmRzIHdpdGggYDpgIGRlbGltaXRlclxuICAgICAgLy8gTm90ZTogbmVpdGhlciBJU08tODYwMSBub3IgSmF2YVNjcmlwdCBzdXBwb3J0cyBzZWNvbmRzIGluIHRpbWV6b25lIG9mZnNldHNcbiAgICAgIC8vIHNvIHRoaXMgdG9rZW4gYWx3YXlzIGhhcyB0aGUgc2FtZSBvdXRwdXQgYXMgYFhYWGBcbiAgICAgIGNhc2UgJ1hYWFhYJzpcbiAgICAgIGNhc2UgJ1hYWCc6IC8vIEhvdXJzIGFuZCBtaW51dGVzIHdpdGggYDpgIGRlbGltaXRlclxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGZvcm1hdFRpbWV6b25lKHRpbWV6b25lT2Zmc2V0LCAnOicpO1xuICAgIH1cbiAgfSxcbiAgLy8gVGltZXpvbmUgKElTTy04NjAxLiBJZiBvZmZzZXQgaXMgMCwgb3V0cHV0IGlzIGAnKzAwOjAwJ2Agb3IgZXF1aXZhbGVudClcbiAgeDogZnVuY3Rpb24geChkYXRlLCB0b2tlbiwgX2xvY2FsaXplLCBvcHRpb25zKSB7XG4gICAgdmFyIG9yaWdpbmFsRGF0ZSA9IG9wdGlvbnMuX29yaWdpbmFsRGF0ZSB8fCBkYXRlO1xuICAgIHZhciB0aW1lem9uZU9mZnNldCA9IG9yaWdpbmFsRGF0ZS5nZXRUaW1lem9uZU9mZnNldCgpO1xuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIC8vIEhvdXJzIGFuZCBvcHRpb25hbCBtaW51dGVzXG4gICAgICBjYXNlICd4JzpcbiAgICAgICAgcmV0dXJuIGZvcm1hdFRpbWV6b25lV2l0aE9wdGlvbmFsTWludXRlcyh0aW1lem9uZU9mZnNldCk7XG5cbiAgICAgIC8vIEhvdXJzLCBtaW51dGVzIGFuZCBvcHRpb25hbCBzZWNvbmRzIHdpdGhvdXQgYDpgIGRlbGltaXRlclxuICAgICAgLy8gTm90ZTogbmVpdGhlciBJU08tODYwMSBub3IgSmF2YVNjcmlwdCBzdXBwb3J0cyBzZWNvbmRzIGluIHRpbWV6b25lIG9mZnNldHNcbiAgICAgIC8vIHNvIHRoaXMgdG9rZW4gYWx3YXlzIGhhcyB0aGUgc2FtZSBvdXRwdXQgYXMgYHh4YFxuICAgICAgY2FzZSAneHh4eCc6XG4gICAgICBjYXNlICd4eCc6XG4gICAgICAgIC8vIEhvdXJzIGFuZCBtaW51dGVzIHdpdGhvdXQgYDpgIGRlbGltaXRlclxuICAgICAgICByZXR1cm4gZm9ybWF0VGltZXpvbmUodGltZXpvbmVPZmZzZXQpO1xuXG4gICAgICAvLyBIb3VycywgbWludXRlcyBhbmQgb3B0aW9uYWwgc2Vjb25kcyB3aXRoIGA6YCBkZWxpbWl0ZXJcbiAgICAgIC8vIE5vdGU6IG5laXRoZXIgSVNPLTg2MDEgbm9yIEphdmFTY3JpcHQgc3VwcG9ydHMgc2Vjb25kcyBpbiB0aW1lem9uZSBvZmZzZXRzXG4gICAgICAvLyBzbyB0aGlzIHRva2VuIGFsd2F5cyBoYXMgdGhlIHNhbWUgb3V0cHV0IGFzIGB4eHhgXG4gICAgICBjYXNlICd4eHh4eCc6XG4gICAgICBjYXNlICd4eHgnOiAvLyBIb3VycyBhbmQgbWludXRlcyB3aXRoIGA6YCBkZWxpbWl0ZXJcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBmb3JtYXRUaW1lem9uZSh0aW1lem9uZU9mZnNldCwgJzonKTtcbiAgICB9XG4gIH0sXG4gIC8vIFRpbWV6b25lIChHTVQpXG4gIE86IGZ1bmN0aW9uIE8oZGF0ZSwgdG9rZW4sIF9sb2NhbGl6ZSwgb3B0aW9ucykge1xuICAgIHZhciBvcmlnaW5hbERhdGUgPSBvcHRpb25zLl9vcmlnaW5hbERhdGUgfHwgZGF0ZTtcbiAgICB2YXIgdGltZXpvbmVPZmZzZXQgPSBvcmlnaW5hbERhdGUuZ2V0VGltZXpvbmVPZmZzZXQoKTtcbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAvLyBTaG9ydFxuICAgICAgY2FzZSAnTyc6XG4gICAgICBjYXNlICdPTyc6XG4gICAgICBjYXNlICdPT08nOlxuICAgICAgICByZXR1cm4gJ0dNVCcgKyBmb3JtYXRUaW1lem9uZVNob3J0KHRpbWV6b25lT2Zmc2V0LCAnOicpO1xuICAgICAgLy8gTG9uZ1xuICAgICAgY2FzZSAnT09PTyc6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gJ0dNVCcgKyBmb3JtYXRUaW1lem9uZSh0aW1lem9uZU9mZnNldCwgJzonKTtcbiAgICB9XG4gIH0sXG4gIC8vIFRpbWV6b25lIChzcGVjaWZpYyBub24tbG9jYXRpb24pXG4gIHo6IGZ1bmN0aW9uIHooZGF0ZSwgdG9rZW4sIF9sb2NhbGl6ZSwgb3B0aW9ucykge1xuICAgIHZhciBvcmlnaW5hbERhdGUgPSBvcHRpb25zLl9vcmlnaW5hbERhdGUgfHwgZGF0ZTtcbiAgICB2YXIgdGltZXpvbmVPZmZzZXQgPSBvcmlnaW5hbERhdGUuZ2V0VGltZXpvbmVPZmZzZXQoKTtcbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAvLyBTaG9ydFxuICAgICAgY2FzZSAneic6XG4gICAgICBjYXNlICd6eic6XG4gICAgICBjYXNlICd6enonOlxuICAgICAgICByZXR1cm4gJ0dNVCcgKyBmb3JtYXRUaW1lem9uZVNob3J0KHRpbWV6b25lT2Zmc2V0LCAnOicpO1xuICAgICAgLy8gTG9uZ1xuICAgICAgY2FzZSAnenp6eic6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gJ0dNVCcgKyBmb3JtYXRUaW1lem9uZSh0aW1lem9uZU9mZnNldCwgJzonKTtcbiAgICB9XG4gIH0sXG4gIC8vIFNlY29uZHMgdGltZXN0YW1wXG4gIHQ6IGZ1bmN0aW9uIHQoZGF0ZSwgdG9rZW4sIF9sb2NhbGl6ZSwgb3B0aW9ucykge1xuICAgIHZhciBvcmlnaW5hbERhdGUgPSBvcHRpb25zLl9vcmlnaW5hbERhdGUgfHwgZGF0ZTtcbiAgICB2YXIgdGltZXN0YW1wID0gTWF0aC5mbG9vcihvcmlnaW5hbERhdGUuZ2V0VGltZSgpIC8gMTAwMCk7XG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyh0aW1lc3RhbXAsIHRva2VuLmxlbmd0aCk7XG4gIH0sXG4gIC8vIE1pbGxpc2Vjb25kcyB0aW1lc3RhbXBcbiAgVDogZnVuY3Rpb24gVChkYXRlLCB0b2tlbiwgX2xvY2FsaXplLCBvcHRpb25zKSB7XG4gICAgdmFyIG9yaWdpbmFsRGF0ZSA9IG9wdGlvbnMuX29yaWdpbmFsRGF0ZSB8fCBkYXRlO1xuICAgIHZhciB0aW1lc3RhbXAgPSBvcmlnaW5hbERhdGUuZ2V0VGltZSgpO1xuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3ModGltZXN0YW1wLCB0b2tlbi5sZW5ndGgpO1xuICB9XG59O1xuZnVuY3Rpb24gZm9ybWF0VGltZXpvbmVTaG9ydChvZmZzZXQsIGRpcnR5RGVsaW1pdGVyKSB7XG4gIHZhciBzaWduID0gb2Zmc2V0ID4gMCA/ICctJyA6ICcrJztcbiAgdmFyIGFic09mZnNldCA9IE1hdGguYWJzKG9mZnNldCk7XG4gIHZhciBob3VycyA9IE1hdGguZmxvb3IoYWJzT2Zmc2V0IC8gNjApO1xuICB2YXIgbWludXRlcyA9IGFic09mZnNldCAlIDYwO1xuICBpZiAobWludXRlcyA9PT0gMCkge1xuICAgIHJldHVybiBzaWduICsgU3RyaW5nKGhvdXJzKTtcbiAgfVxuICB2YXIgZGVsaW1pdGVyID0gZGlydHlEZWxpbWl0ZXIgfHwgJyc7XG4gIHJldHVybiBzaWduICsgU3RyaW5nKGhvdXJzKSArIGRlbGltaXRlciArIGFkZExlYWRpbmdaZXJvcyhtaW51dGVzLCAyKTtcbn1cbmZ1bmN0aW9uIGZvcm1hdFRpbWV6b25lV2l0aE9wdGlvbmFsTWludXRlcyhvZmZzZXQsIGRpcnR5RGVsaW1pdGVyKSB7XG4gIGlmIChvZmZzZXQgJSA2MCA9PT0gMCkge1xuICAgIHZhciBzaWduID0gb2Zmc2V0ID4gMCA/ICctJyA6ICcrJztcbiAgICByZXR1cm4gc2lnbiArIGFkZExlYWRpbmdaZXJvcyhNYXRoLmFicyhvZmZzZXQpIC8gNjAsIDIpO1xuICB9XG4gIHJldHVybiBmb3JtYXRUaW1lem9uZShvZmZzZXQsIGRpcnR5RGVsaW1pdGVyKTtcbn1cbmZ1bmN0aW9uIGZvcm1hdFRpbWV6b25lKG9mZnNldCwgZGlydHlEZWxpbWl0ZXIpIHtcbiAgdmFyIGRlbGltaXRlciA9IGRpcnR5RGVsaW1pdGVyIHx8ICcnO1xuICB2YXIgc2lnbiA9IG9mZnNldCA+IDAgPyAnLScgOiAnKyc7XG4gIHZhciBhYnNPZmZzZXQgPSBNYXRoLmFicyhvZmZzZXQpO1xuICB2YXIgaG91cnMgPSBhZGRMZWFkaW5nWmVyb3MoTWF0aC5mbG9vcihhYnNPZmZzZXQgLyA2MCksIDIpO1xuICB2YXIgbWludXRlcyA9IGFkZExlYWRpbmdaZXJvcyhhYnNPZmZzZXQgJSA2MCwgMik7XG4gIHJldHVybiBzaWduICsgaG91cnMgKyBkZWxpbWl0ZXIgKyBtaW51dGVzO1xufVxuZXhwb3J0IGRlZmF1bHQgZm9ybWF0dGVyczsiLCJpbXBvcnQgdG9EYXRlIGZyb20gXCIuLi8uLi90b0RhdGUvaW5kZXguanNcIjtcbmltcG9ydCBzdGFydE9mVVRDV2VlayBmcm9tIFwiLi4vc3RhcnRPZlVUQ1dlZWsvaW5kZXguanNcIjtcbmltcG9ydCBzdGFydE9mVVRDV2Vla1llYXIgZnJvbSBcIi4uL3N0YXJ0T2ZVVENXZWVrWWVhci9pbmRleC5qc1wiO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7XG52YXIgTUlMTElTRUNPTkRTX0lOX1dFRUsgPSA2MDQ4MDAwMDA7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRVVENXZWVrKGRpcnR5RGF0ZSwgb3B0aW9ucykge1xuICByZXF1aXJlZEFyZ3MoMSwgYXJndW1lbnRzKTtcbiAgdmFyIGRhdGUgPSB0b0RhdGUoZGlydHlEYXRlKTtcbiAgdmFyIGRpZmYgPSBzdGFydE9mVVRDV2VlayhkYXRlLCBvcHRpb25zKS5nZXRUaW1lKCkgLSBzdGFydE9mVVRDV2Vla1llYXIoZGF0ZSwgb3B0aW9ucykuZ2V0VGltZSgpO1xuXG4gIC8vIFJvdW5kIHRoZSBudW1iZXIgb2YgZGF5cyB0byB0aGUgbmVhcmVzdCBpbnRlZ2VyXG4gIC8vIGJlY2F1c2UgdGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgaW4gYSB3ZWVrIGlzIG5vdCBjb25zdGFudFxuICAvLyAoZS5nLiBpdCdzIGRpZmZlcmVudCBpbiB0aGUgd2VlayBvZiB0aGUgZGF5bGlnaHQgc2F2aW5nIHRpbWUgY2xvY2sgc2hpZnQpXG4gIHJldHVybiBNYXRoLnJvdW5kKGRpZmYgLyBNSUxMSVNFQ09ORFNfSU5fV0VFSykgKyAxO1xufSIsImltcG9ydCBnZXRVVENXZWVrWWVhciBmcm9tIFwiLi4vZ2V0VVRDV2Vla1llYXIvaW5kZXguanNcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xuaW1wb3J0IHN0YXJ0T2ZVVENXZWVrIGZyb20gXCIuLi9zdGFydE9mVVRDV2Vlay9pbmRleC5qc1wiO1xuaW1wb3J0IHRvSW50ZWdlciBmcm9tIFwiLi4vdG9JbnRlZ2VyL2luZGV4LmpzXCI7XG5pbXBvcnQgeyBnZXREZWZhdWx0T3B0aW9ucyB9IGZyb20gXCIuLi9kZWZhdWx0T3B0aW9ucy9pbmRleC5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc3RhcnRPZlVUQ1dlZWtZZWFyKGRpcnR5RGF0ZSwgb3B0aW9ucykge1xuICB2YXIgX3JlZiwgX3JlZjIsIF9yZWYzLCBfb3B0aW9ucyRmaXJzdFdlZWtDb24sIF9vcHRpb25zJGxvY2FsZSwgX29wdGlvbnMkbG9jYWxlJG9wdGlvLCBfZGVmYXVsdE9wdGlvbnMkbG9jYWwsIF9kZWZhdWx0T3B0aW9ucyRsb2NhbDI7XG4gIHJlcXVpcmVkQXJncygxLCBhcmd1bWVudHMpO1xuICB2YXIgZGVmYXVsdE9wdGlvbnMgPSBnZXREZWZhdWx0T3B0aW9ucygpO1xuICB2YXIgZmlyc3RXZWVrQ29udGFpbnNEYXRlID0gdG9JbnRlZ2VyKChfcmVmID0gKF9yZWYyID0gKF9yZWYzID0gKF9vcHRpb25zJGZpcnN0V2Vla0NvbiA9IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5maXJzdFdlZWtDb250YWluc0RhdGUpICE9PSBudWxsICYmIF9vcHRpb25zJGZpcnN0V2Vla0NvbiAhPT0gdm9pZCAwID8gX29wdGlvbnMkZmlyc3RXZWVrQ29uIDogb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiAoX29wdGlvbnMkbG9jYWxlID0gb3B0aW9ucy5sb2NhbGUpID09PSBudWxsIHx8IF9vcHRpb25zJGxvY2FsZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogKF9vcHRpb25zJGxvY2FsZSRvcHRpbyA9IF9vcHRpb25zJGxvY2FsZS5vcHRpb25zKSA9PT0gbnVsbCB8fCBfb3B0aW9ucyRsb2NhbGUkb3B0aW8gPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9vcHRpb25zJGxvY2FsZSRvcHRpby5maXJzdFdlZWtDb250YWluc0RhdGUpICE9PSBudWxsICYmIF9yZWYzICE9PSB2b2lkIDAgPyBfcmVmMyA6IGRlZmF1bHRPcHRpb25zLmZpcnN0V2Vla0NvbnRhaW5zRGF0ZSkgIT09IG51bGwgJiYgX3JlZjIgIT09IHZvaWQgMCA/IF9yZWYyIDogKF9kZWZhdWx0T3B0aW9ucyRsb2NhbCA9IGRlZmF1bHRPcHRpb25zLmxvY2FsZSkgPT09IG51bGwgfHwgX2RlZmF1bHRPcHRpb25zJGxvY2FsID09PSB2b2lkIDAgPyB2b2lkIDAgOiAoX2RlZmF1bHRPcHRpb25zJGxvY2FsMiA9IF9kZWZhdWx0T3B0aW9ucyRsb2NhbC5vcHRpb25zKSA9PT0gbnVsbCB8fCBfZGVmYXVsdE9wdGlvbnMkbG9jYWwyID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZGVmYXVsdE9wdGlvbnMkbG9jYWwyLmZpcnN0V2Vla0NvbnRhaW5zRGF0ZSkgIT09IG51bGwgJiYgX3JlZiAhPT0gdm9pZCAwID8gX3JlZiA6IDEpO1xuICB2YXIgeWVhciA9IGdldFVUQ1dlZWtZZWFyKGRpcnR5RGF0ZSwgb3B0aW9ucyk7XG4gIHZhciBmaXJzdFdlZWsgPSBuZXcgRGF0ZSgwKTtcbiAgZmlyc3RXZWVrLnNldFVUQ0Z1bGxZZWFyKHllYXIsIDAsIGZpcnN0V2Vla0NvbnRhaW5zRGF0ZSk7XG4gIGZpcnN0V2Vlay5zZXRVVENIb3VycygwLCAwLCAwLCAwKTtcbiAgdmFyIGRhdGUgPSBzdGFydE9mVVRDV2VlayhmaXJzdFdlZWssIG9wdGlvbnMpO1xuICByZXR1cm4gZGF0ZTtcbn0iLCJpbXBvcnQgdG9EYXRlIGZyb20gXCIuLi8uLi90b0RhdGUvaW5kZXguanNcIjtcbmltcG9ydCBzdGFydE9mVVRDSVNPV2VlayBmcm9tIFwiLi4vc3RhcnRPZlVUQ0lTT1dlZWsvaW5kZXguanNcIjtcbmltcG9ydCBzdGFydE9mVVRDSVNPV2Vla1llYXIgZnJvbSBcIi4uL3N0YXJ0T2ZVVENJU09XZWVrWWVhci9pbmRleC5qc1wiO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7XG52YXIgTUlMTElTRUNPTkRTX0lOX1dFRUsgPSA2MDQ4MDAwMDA7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRVVENJU09XZWVrKGRpcnR5RGF0ZSkge1xuICByZXF1aXJlZEFyZ3MoMSwgYXJndW1lbnRzKTtcbiAgdmFyIGRhdGUgPSB0b0RhdGUoZGlydHlEYXRlKTtcbiAgdmFyIGRpZmYgPSBzdGFydE9mVVRDSVNPV2VlayhkYXRlKS5nZXRUaW1lKCkgLSBzdGFydE9mVVRDSVNPV2Vla1llYXIoZGF0ZSkuZ2V0VGltZSgpO1xuXG4gIC8vIFJvdW5kIHRoZSBudW1iZXIgb2YgZGF5cyB0byB0aGUgbmVhcmVzdCBpbnRlZ2VyXG4gIC8vIGJlY2F1c2UgdGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgaW4gYSB3ZWVrIGlzIG5vdCBjb25zdGFudFxuICAvLyAoZS5nLiBpdCdzIGRpZmZlcmVudCBpbiB0aGUgd2VlayBvZiB0aGUgZGF5bGlnaHQgc2F2aW5nIHRpbWUgY2xvY2sgc2hpZnQpXG4gIHJldHVybiBNYXRoLnJvdW5kKGRpZmYgLyBNSUxMSVNFQ09ORFNfSU5fV0VFSykgKyAxO1xufSIsImltcG9ydCBnZXRVVENJU09XZWVrWWVhciBmcm9tIFwiLi4vZ2V0VVRDSVNPV2Vla1llYXIvaW5kZXguanNcIjtcbmltcG9ydCBzdGFydE9mVVRDSVNPV2VlayBmcm9tIFwiLi4vc3RhcnRPZlVUQ0lTT1dlZWsvaW5kZXguanNcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc3RhcnRPZlVUQ0lTT1dlZWtZZWFyKGRpcnR5RGF0ZSkge1xuICByZXF1aXJlZEFyZ3MoMSwgYXJndW1lbnRzKTtcbiAgdmFyIHllYXIgPSBnZXRVVENJU09XZWVrWWVhcihkaXJ0eURhdGUpO1xuICB2YXIgZm91cnRoT2ZKYW51YXJ5ID0gbmV3IERhdGUoMCk7XG4gIGZvdXJ0aE9mSmFudWFyeS5zZXRVVENGdWxsWWVhcih5ZWFyLCAwLCA0KTtcbiAgZm91cnRoT2ZKYW51YXJ5LnNldFVUQ0hvdXJzKDAsIDAsIDAsIDApO1xuICB2YXIgZGF0ZSA9IHN0YXJ0T2ZVVENJU09XZWVrKGZvdXJ0aE9mSmFudWFyeSk7XG4gIHJldHVybiBkYXRlO1xufSIsImltcG9ydCB0b0RhdGUgZnJvbSBcIi4uLy4uL3RvRGF0ZS9pbmRleC5qc1wiO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7XG52YXIgTUlMTElTRUNPTkRTX0lOX0RBWSA9IDg2NDAwMDAwO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0VVRDRGF5T2ZZZWFyKGRpcnR5RGF0ZSkge1xuICByZXF1aXJlZEFyZ3MoMSwgYXJndW1lbnRzKTtcbiAgdmFyIGRhdGUgPSB0b0RhdGUoZGlydHlEYXRlKTtcbiAgdmFyIHRpbWVzdGFtcCA9IGRhdGUuZ2V0VGltZSgpO1xuICBkYXRlLnNldFVUQ01vbnRoKDAsIDEpO1xuICBkYXRlLnNldFVUQ0hvdXJzKDAsIDAsIDAsIDApO1xuICB2YXIgc3RhcnRPZlllYXJUaW1lc3RhbXAgPSBkYXRlLmdldFRpbWUoKTtcbiAgdmFyIGRpZmZlcmVuY2UgPSB0aW1lc3RhbXAgLSBzdGFydE9mWWVhclRpbWVzdGFtcDtcbiAgcmV0dXJuIE1hdGguZmxvb3IoZGlmZmVyZW5jZSAvIE1JTExJU0VDT05EU19JTl9EQVkpICsgMTtcbn0iLCJ2YXIgZGF0ZUxvbmdGb3JtYXR0ZXIgPSBmdW5jdGlvbiBkYXRlTG9uZ0Zvcm1hdHRlcihwYXR0ZXJuLCBmb3JtYXRMb25nKSB7XG4gIHN3aXRjaCAocGF0dGVybikge1xuICAgIGNhc2UgJ1AnOlxuICAgICAgcmV0dXJuIGZvcm1hdExvbmcuZGF0ZSh7XG4gICAgICAgIHdpZHRoOiAnc2hvcnQnXG4gICAgICB9KTtcbiAgICBjYXNlICdQUCc6XG4gICAgICByZXR1cm4gZm9ybWF0TG9uZy5kYXRlKHtcbiAgICAgICAgd2lkdGg6ICdtZWRpdW0nXG4gICAgICB9KTtcbiAgICBjYXNlICdQUFAnOlxuICAgICAgcmV0dXJuIGZvcm1hdExvbmcuZGF0ZSh7XG4gICAgICAgIHdpZHRoOiAnbG9uZydcbiAgICAgIH0pO1xuICAgIGNhc2UgJ1BQUFAnOlxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gZm9ybWF0TG9uZy5kYXRlKHtcbiAgICAgICAgd2lkdGg6ICdmdWxsJ1xuICAgICAgfSk7XG4gIH1cbn07XG52YXIgdGltZUxvbmdGb3JtYXR0ZXIgPSBmdW5jdGlvbiB0aW1lTG9uZ0Zvcm1hdHRlcihwYXR0ZXJuLCBmb3JtYXRMb25nKSB7XG4gIHN3aXRjaCAocGF0dGVybikge1xuICAgIGNhc2UgJ3AnOlxuICAgICAgcmV0dXJuIGZvcm1hdExvbmcudGltZSh7XG4gICAgICAgIHdpZHRoOiAnc2hvcnQnXG4gICAgICB9KTtcbiAgICBjYXNlICdwcCc6XG4gICAgICByZXR1cm4gZm9ybWF0TG9uZy50aW1lKHtcbiAgICAgICAgd2lkdGg6ICdtZWRpdW0nXG4gICAgICB9KTtcbiAgICBjYXNlICdwcHAnOlxuICAgICAgcmV0dXJuIGZvcm1hdExvbmcudGltZSh7XG4gICAgICAgIHdpZHRoOiAnbG9uZydcbiAgICAgIH0pO1xuICAgIGNhc2UgJ3BwcHAnOlxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gZm9ybWF0TG9uZy50aW1lKHtcbiAgICAgICAgd2lkdGg6ICdmdWxsJ1xuICAgICAgfSk7XG4gIH1cbn07XG52YXIgZGF0ZVRpbWVMb25nRm9ybWF0dGVyID0gZnVuY3Rpb24gZGF0ZVRpbWVMb25nRm9ybWF0dGVyKHBhdHRlcm4sIGZvcm1hdExvbmcpIHtcbiAgdmFyIG1hdGNoUmVzdWx0ID0gcGF0dGVybi5tYXRjaCgvKFArKShwKyk/LykgfHwgW107XG4gIHZhciBkYXRlUGF0dGVybiA9IG1hdGNoUmVzdWx0WzFdO1xuICB2YXIgdGltZVBhdHRlcm4gPSBtYXRjaFJlc3VsdFsyXTtcbiAgaWYgKCF0aW1lUGF0dGVybikge1xuICAgIHJldHVybiBkYXRlTG9uZ0Zvcm1hdHRlcihwYXR0ZXJuLCBmb3JtYXRMb25nKTtcbiAgfVxuICB2YXIgZGF0ZVRpbWVGb3JtYXQ7XG4gIHN3aXRjaCAoZGF0ZVBhdHRlcm4pIHtcbiAgICBjYXNlICdQJzpcbiAgICAgIGRhdGVUaW1lRm9ybWF0ID0gZm9ybWF0TG9uZy5kYXRlVGltZSh7XG4gICAgICAgIHdpZHRoOiAnc2hvcnQnXG4gICAgICB9KTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ1BQJzpcbiAgICAgIGRhdGVUaW1lRm9ybWF0ID0gZm9ybWF0TG9uZy5kYXRlVGltZSh7XG4gICAgICAgIHdpZHRoOiAnbWVkaXVtJ1xuICAgICAgfSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlICdQUFAnOlxuICAgICAgZGF0ZVRpbWVGb3JtYXQgPSBmb3JtYXRMb25nLmRhdGVUaW1lKHtcbiAgICAgICAgd2lkdGg6ICdsb25nJ1xuICAgICAgfSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlICdQUFBQJzpcbiAgICBkZWZhdWx0OlxuICAgICAgZGF0ZVRpbWVGb3JtYXQgPSBmb3JtYXRMb25nLmRhdGVUaW1lKHtcbiAgICAgICAgd2lkdGg6ICdmdWxsJ1xuICAgICAgfSk7XG4gICAgICBicmVhaztcbiAgfVxuICByZXR1cm4gZGF0ZVRpbWVGb3JtYXQucmVwbGFjZSgne3tkYXRlfX0nLCBkYXRlTG9uZ0Zvcm1hdHRlcihkYXRlUGF0dGVybiwgZm9ybWF0TG9uZykpLnJlcGxhY2UoJ3t7dGltZX19JywgdGltZUxvbmdGb3JtYXR0ZXIodGltZVBhdHRlcm4sIGZvcm1hdExvbmcpKTtcbn07XG52YXIgbG9uZ0Zvcm1hdHRlcnMgPSB7XG4gIHA6IHRpbWVMb25nRm9ybWF0dGVyLFxuICBQOiBkYXRlVGltZUxvbmdGb3JtYXR0ZXJcbn07XG5leHBvcnQgZGVmYXVsdCBsb25nRm9ybWF0dGVyczsiLCJ2YXIgcHJvdGVjdGVkRGF5T2ZZZWFyVG9rZW5zID0gWydEJywgJ0REJ107XG52YXIgcHJvdGVjdGVkV2Vla1llYXJUb2tlbnMgPSBbJ1lZJywgJ1lZWVknXTtcbmV4cG9ydCBmdW5jdGlvbiBpc1Byb3RlY3RlZERheU9mWWVhclRva2VuKHRva2VuKSB7XG4gIHJldHVybiBwcm90ZWN0ZWREYXlPZlllYXJUb2tlbnMuaW5kZXhPZih0b2tlbikgIT09IC0xO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzUHJvdGVjdGVkV2Vla1llYXJUb2tlbih0b2tlbikge1xuICByZXR1cm4gcHJvdGVjdGVkV2Vla1llYXJUb2tlbnMuaW5kZXhPZih0b2tlbikgIT09IC0xO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHRocm93UHJvdGVjdGVkRXJyb3IodG9rZW4sIGZvcm1hdCwgaW5wdXQpIHtcbiAgaWYgKHRva2VuID09PSAnWVlZWScpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIlVzZSBgeXl5eWAgaW5zdGVhZCBvZiBgWVlZWWAgKGluIGBcIi5jb25jYXQoZm9ybWF0LCBcImApIGZvciBmb3JtYXR0aW5nIHllYXJzIHRvIHRoZSBpbnB1dCBgXCIpLmNvbmNhdChpbnB1dCwgXCJgOyBzZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9ibG9iL21hc3Rlci9kb2NzL3VuaWNvZGVUb2tlbnMubWRcIikpO1xuICB9IGVsc2UgaWYgKHRva2VuID09PSAnWVknKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJVc2UgYHl5YCBpbnN0ZWFkIG9mIGBZWWAgKGluIGBcIi5jb25jYXQoZm9ybWF0LCBcImApIGZvciBmb3JtYXR0aW5nIHllYXJzIHRvIHRoZSBpbnB1dCBgXCIpLmNvbmNhdChpbnB1dCwgXCJgOyBzZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9ibG9iL21hc3Rlci9kb2NzL3VuaWNvZGVUb2tlbnMubWRcIikpO1xuICB9IGVsc2UgaWYgKHRva2VuID09PSAnRCcpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIlVzZSBgZGAgaW5zdGVhZCBvZiBgRGAgKGluIGBcIi5jb25jYXQoZm9ybWF0LCBcImApIGZvciBmb3JtYXR0aW5nIGRheXMgb2YgdGhlIG1vbnRoIHRvIHRoZSBpbnB1dCBgXCIpLmNvbmNhdChpbnB1dCwgXCJgOyBzZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9ibG9iL21hc3Rlci9kb2NzL3VuaWNvZGVUb2tlbnMubWRcIikpO1xuICB9IGVsc2UgaWYgKHRva2VuID09PSAnREQnKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJVc2UgYGRkYCBpbnN0ZWFkIG9mIGBERGAgKGluIGBcIi5jb25jYXQoZm9ybWF0LCBcImApIGZvciBmb3JtYXR0aW5nIGRheXMgb2YgdGhlIG1vbnRoIHRvIHRoZSBpbnB1dCBgXCIpLmNvbmNhdChpbnB1dCwgXCJgOyBzZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9ibG9iL21hc3Rlci9kb2NzL3VuaWNvZGVUb2tlbnMubWRcIikpO1xuICB9XG59IiwidmFyIGZvcm1hdERpc3RhbmNlTG9jYWxlID0ge1xuICBsZXNzVGhhblhTZWNvbmRzOiB7XG4gICAgb25lOiAnbGVzcyB0aGFuIGEgc2Vjb25kJyxcbiAgICBvdGhlcjogJ2xlc3MgdGhhbiB7e2NvdW50fX0gc2Vjb25kcydcbiAgfSxcbiAgeFNlY29uZHM6IHtcbiAgICBvbmU6ICcxIHNlY29uZCcsXG4gICAgb3RoZXI6ICd7e2NvdW50fX0gc2Vjb25kcydcbiAgfSxcbiAgaGFsZkFNaW51dGU6ICdoYWxmIGEgbWludXRlJyxcbiAgbGVzc1RoYW5YTWludXRlczoge1xuICAgIG9uZTogJ2xlc3MgdGhhbiBhIG1pbnV0ZScsXG4gICAgb3RoZXI6ICdsZXNzIHRoYW4ge3tjb3VudH19IG1pbnV0ZXMnXG4gIH0sXG4gIHhNaW51dGVzOiB7XG4gICAgb25lOiAnMSBtaW51dGUnLFxuICAgIG90aGVyOiAne3tjb3VudH19IG1pbnV0ZXMnXG4gIH0sXG4gIGFib3V0WEhvdXJzOiB7XG4gICAgb25lOiAnYWJvdXQgMSBob3VyJyxcbiAgICBvdGhlcjogJ2Fib3V0IHt7Y291bnR9fSBob3VycydcbiAgfSxcbiAgeEhvdXJzOiB7XG4gICAgb25lOiAnMSBob3VyJyxcbiAgICBvdGhlcjogJ3t7Y291bnR9fSBob3VycydcbiAgfSxcbiAgeERheXM6IHtcbiAgICBvbmU6ICcxIGRheScsXG4gICAgb3RoZXI6ICd7e2NvdW50fX0gZGF5cydcbiAgfSxcbiAgYWJvdXRYV2Vla3M6IHtcbiAgICBvbmU6ICdhYm91dCAxIHdlZWsnLFxuICAgIG90aGVyOiAnYWJvdXQge3tjb3VudH19IHdlZWtzJ1xuICB9LFxuICB4V2Vla3M6IHtcbiAgICBvbmU6ICcxIHdlZWsnLFxuICAgIG90aGVyOiAne3tjb3VudH19IHdlZWtzJ1xuICB9LFxuICBhYm91dFhNb250aHM6IHtcbiAgICBvbmU6ICdhYm91dCAxIG1vbnRoJyxcbiAgICBvdGhlcjogJ2Fib3V0IHt7Y291bnR9fSBtb250aHMnXG4gIH0sXG4gIHhNb250aHM6IHtcbiAgICBvbmU6ICcxIG1vbnRoJyxcbiAgICBvdGhlcjogJ3t7Y291bnR9fSBtb250aHMnXG4gIH0sXG4gIGFib3V0WFllYXJzOiB7XG4gICAgb25lOiAnYWJvdXQgMSB5ZWFyJyxcbiAgICBvdGhlcjogJ2Fib3V0IHt7Y291bnR9fSB5ZWFycydcbiAgfSxcbiAgeFllYXJzOiB7XG4gICAgb25lOiAnMSB5ZWFyJyxcbiAgICBvdGhlcjogJ3t7Y291bnR9fSB5ZWFycydcbiAgfSxcbiAgb3ZlclhZZWFyczoge1xuICAgIG9uZTogJ292ZXIgMSB5ZWFyJyxcbiAgICBvdGhlcjogJ292ZXIge3tjb3VudH19IHllYXJzJ1xuICB9LFxuICBhbG1vc3RYWWVhcnM6IHtcbiAgICBvbmU6ICdhbG1vc3QgMSB5ZWFyJyxcbiAgICBvdGhlcjogJ2FsbW9zdCB7e2NvdW50fX0geWVhcnMnXG4gIH1cbn07XG52YXIgZm9ybWF0RGlzdGFuY2UgPSBmdW5jdGlvbiBmb3JtYXREaXN0YW5jZSh0b2tlbiwgY291bnQsIG9wdGlvbnMpIHtcbiAgdmFyIHJlc3VsdDtcbiAgdmFyIHRva2VuVmFsdWUgPSBmb3JtYXREaXN0YW5jZUxvY2FsZVt0b2tlbl07XG4gIGlmICh0eXBlb2YgdG9rZW5WYWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICByZXN1bHQgPSB0b2tlblZhbHVlO1xuICB9IGVsc2UgaWYgKGNvdW50ID09PSAxKSB7XG4gICAgcmVzdWx0ID0gdG9rZW5WYWx1ZS5vbmU7XG4gIH0gZWxzZSB7XG4gICAgcmVzdWx0ID0gdG9rZW5WYWx1ZS5vdGhlci5yZXBsYWNlKCd7e2NvdW50fX0nLCBjb3VudC50b1N0cmluZygpKTtcbiAgfVxuICBpZiAob3B0aW9ucyAhPT0gbnVsbCAmJiBvcHRpb25zICE9PSB2b2lkIDAgJiYgb3B0aW9ucy5hZGRTdWZmaXgpIHtcbiAgICBpZiAob3B0aW9ucy5jb21wYXJpc29uICYmIG9wdGlvbnMuY29tcGFyaXNvbiA+IDApIHtcbiAgICAgIHJldHVybiAnaW4gJyArIHJlc3VsdDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHJlc3VsdCArICcgYWdvJztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5leHBvcnQgZGVmYXVsdCBmb3JtYXREaXN0YW5jZTsiLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBidWlsZEZvcm1hdExvbmdGbihhcmdzKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuICAgIC8vIFRPRE86IFJlbW92ZSBTdHJpbmcoKVxuICAgIHZhciB3aWR0aCA9IG9wdGlvbnMud2lkdGggPyBTdHJpbmcob3B0aW9ucy53aWR0aCkgOiBhcmdzLmRlZmF1bHRXaWR0aDtcbiAgICB2YXIgZm9ybWF0ID0gYXJncy5mb3JtYXRzW3dpZHRoXSB8fCBhcmdzLmZvcm1hdHNbYXJncy5kZWZhdWx0V2lkdGhdO1xuICAgIHJldHVybiBmb3JtYXQ7XG4gIH07XG59IiwiaW1wb3J0IGJ1aWxkRm9ybWF0TG9uZ0ZuIGZyb20gXCIuLi8uLi8uLi9fbGliL2J1aWxkRm9ybWF0TG9uZ0ZuL2luZGV4LmpzXCI7XG52YXIgZGF0ZUZvcm1hdHMgPSB7XG4gIGZ1bGw6ICdFRUVFLCBNTU1NIGRvLCB5JyxcbiAgbG9uZzogJ01NTU0gZG8sIHknLFxuICBtZWRpdW06ICdNTU0gZCwgeScsXG4gIHNob3J0OiAnTU0vZGQveXl5eSdcbn07XG52YXIgdGltZUZvcm1hdHMgPSB7XG4gIGZ1bGw6ICdoOm1tOnNzIGEgenp6eicsXG4gIGxvbmc6ICdoOm1tOnNzIGEgeicsXG4gIG1lZGl1bTogJ2g6bW06c3MgYScsXG4gIHNob3J0OiAnaDptbSBhJ1xufTtcbnZhciBkYXRlVGltZUZvcm1hdHMgPSB7XG4gIGZ1bGw6IFwie3tkYXRlfX0gJ2F0JyB7e3RpbWV9fVwiLFxuICBsb25nOiBcInt7ZGF0ZX19ICdhdCcge3t0aW1lfX1cIixcbiAgbWVkaXVtOiAne3tkYXRlfX0sIHt7dGltZX19JyxcbiAgc2hvcnQ6ICd7e2RhdGV9fSwge3t0aW1lfX0nXG59O1xudmFyIGZvcm1hdExvbmcgPSB7XG4gIGRhdGU6IGJ1aWxkRm9ybWF0TG9uZ0ZuKHtcbiAgICBmb3JtYXRzOiBkYXRlRm9ybWF0cyxcbiAgICBkZWZhdWx0V2lkdGg6ICdmdWxsJ1xuICB9KSxcbiAgdGltZTogYnVpbGRGb3JtYXRMb25nRm4oe1xuICAgIGZvcm1hdHM6IHRpbWVGb3JtYXRzLFxuICAgIGRlZmF1bHRXaWR0aDogJ2Z1bGwnXG4gIH0pLFxuICBkYXRlVGltZTogYnVpbGRGb3JtYXRMb25nRm4oe1xuICAgIGZvcm1hdHM6IGRhdGVUaW1lRm9ybWF0cyxcbiAgICBkZWZhdWx0V2lkdGg6ICdmdWxsJ1xuICB9KVxufTtcbmV4cG9ydCBkZWZhdWx0IGZvcm1hdExvbmc7IiwidmFyIGZvcm1hdFJlbGF0aXZlTG9jYWxlID0ge1xuICBsYXN0V2VlazogXCInbGFzdCcgZWVlZSAnYXQnIHBcIixcbiAgeWVzdGVyZGF5OiBcIid5ZXN0ZXJkYXkgYXQnIHBcIixcbiAgdG9kYXk6IFwiJ3RvZGF5IGF0JyBwXCIsXG4gIHRvbW9ycm93OiBcIid0b21vcnJvdyBhdCcgcFwiLFxuICBuZXh0V2VlazogXCJlZWVlICdhdCcgcFwiLFxuICBvdGhlcjogJ1AnXG59O1xudmFyIGZvcm1hdFJlbGF0aXZlID0gZnVuY3Rpb24gZm9ybWF0UmVsYXRpdmUodG9rZW4sIF9kYXRlLCBfYmFzZURhdGUsIF9vcHRpb25zKSB7XG4gIHJldHVybiBmb3JtYXRSZWxhdGl2ZUxvY2FsZVt0b2tlbl07XG59O1xuZXhwb3J0IGRlZmF1bHQgZm9ybWF0UmVsYXRpdmU7IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYnVpbGRMb2NhbGl6ZUZuKGFyZ3MpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChkaXJ0eUluZGV4LCBvcHRpb25zKSB7XG4gICAgdmFyIGNvbnRleHQgPSBvcHRpb25zICE9PSBudWxsICYmIG9wdGlvbnMgIT09IHZvaWQgMCAmJiBvcHRpb25zLmNvbnRleHQgPyBTdHJpbmcob3B0aW9ucy5jb250ZXh0KSA6ICdzdGFuZGFsb25lJztcbiAgICB2YXIgdmFsdWVzQXJyYXk7XG4gICAgaWYgKGNvbnRleHQgPT09ICdmb3JtYXR0aW5nJyAmJiBhcmdzLmZvcm1hdHRpbmdWYWx1ZXMpIHtcbiAgICAgIHZhciBkZWZhdWx0V2lkdGggPSBhcmdzLmRlZmF1bHRGb3JtYXR0aW5nV2lkdGggfHwgYXJncy5kZWZhdWx0V2lkdGg7XG4gICAgICB2YXIgd2lkdGggPSBvcHRpb25zICE9PSBudWxsICYmIG9wdGlvbnMgIT09IHZvaWQgMCAmJiBvcHRpb25zLndpZHRoID8gU3RyaW5nKG9wdGlvbnMud2lkdGgpIDogZGVmYXVsdFdpZHRoO1xuICAgICAgdmFsdWVzQXJyYXkgPSBhcmdzLmZvcm1hdHRpbmdWYWx1ZXNbd2lkdGhdIHx8IGFyZ3MuZm9ybWF0dGluZ1ZhbHVlc1tkZWZhdWx0V2lkdGhdO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgX2RlZmF1bHRXaWR0aCA9IGFyZ3MuZGVmYXVsdFdpZHRoO1xuICAgICAgdmFyIF93aWR0aCA9IG9wdGlvbnMgIT09IG51bGwgJiYgb3B0aW9ucyAhPT0gdm9pZCAwICYmIG9wdGlvbnMud2lkdGggPyBTdHJpbmcob3B0aW9ucy53aWR0aCkgOiBhcmdzLmRlZmF1bHRXaWR0aDtcbiAgICAgIHZhbHVlc0FycmF5ID0gYXJncy52YWx1ZXNbX3dpZHRoXSB8fCBhcmdzLnZhbHVlc1tfZGVmYXVsdFdpZHRoXTtcbiAgICB9XG4gICAgdmFyIGluZGV4ID0gYXJncy5hcmd1bWVudENhbGxiYWNrID8gYXJncy5hcmd1bWVudENhbGxiYWNrKGRpcnR5SW5kZXgpIDogZGlydHlJbmRleDtcbiAgICAvLyBAdHMtaWdub3JlOiBGb3Igc29tZSByZWFzb24gVHlwZVNjcmlwdCBqdXN0IGRvbid0IHdhbnQgdG8gbWF0Y2ggaXQsIG5vIG1hdHRlciBob3cgaGFyZCB3ZSB0cnkuIEkgY2hhbGxlbmdlIHlvdSB0byB0cnkgdG8gcmVtb3ZlIGl0IVxuICAgIHJldHVybiB2YWx1ZXNBcnJheVtpbmRleF07XG4gIH07XG59IiwiaW1wb3J0IGJ1aWxkTG9jYWxpemVGbiBmcm9tIFwiLi4vLi4vLi4vX2xpYi9idWlsZExvY2FsaXplRm4vaW5kZXguanNcIjtcbnZhciBlcmFWYWx1ZXMgPSB7XG4gIG5hcnJvdzogWydCJywgJ0EnXSxcbiAgYWJicmV2aWF0ZWQ6IFsnQkMnLCAnQUQnXSxcbiAgd2lkZTogWydCZWZvcmUgQ2hyaXN0JywgJ0Fubm8gRG9taW5pJ11cbn07XG52YXIgcXVhcnRlclZhbHVlcyA9IHtcbiAgbmFycm93OiBbJzEnLCAnMicsICczJywgJzQnXSxcbiAgYWJicmV2aWF0ZWQ6IFsnUTEnLCAnUTInLCAnUTMnLCAnUTQnXSxcbiAgd2lkZTogWycxc3QgcXVhcnRlcicsICcybmQgcXVhcnRlcicsICczcmQgcXVhcnRlcicsICc0dGggcXVhcnRlciddXG59O1xuXG4vLyBOb3RlOiBpbiBFbmdsaXNoLCB0aGUgbmFtZXMgb2YgZGF5cyBvZiB0aGUgd2VlayBhbmQgbW9udGhzIGFyZSBjYXBpdGFsaXplZC5cbi8vIElmIHlvdSBhcmUgbWFraW5nIGEgbmV3IGxvY2FsZSBiYXNlZCBvbiB0aGlzIG9uZSwgY2hlY2sgaWYgdGhlIHNhbWUgaXMgdHJ1ZSBmb3IgdGhlIGxhbmd1YWdlIHlvdSdyZSB3b3JraW5nIG9uLlxuLy8gR2VuZXJhbGx5LCBmb3JtYXR0ZWQgZGF0ZXMgc2hvdWxkIGxvb2sgbGlrZSB0aGV5IGFyZSBpbiB0aGUgbWlkZGxlIG9mIGEgc2VudGVuY2UsXG4vLyBlLmcuIGluIFNwYW5pc2ggbGFuZ3VhZ2UgdGhlIHdlZWtkYXlzIGFuZCBtb250aHMgc2hvdWxkIGJlIGluIHRoZSBsb3dlcmNhc2UuXG52YXIgbW9udGhWYWx1ZXMgPSB7XG4gIG5hcnJvdzogWydKJywgJ0YnLCAnTScsICdBJywgJ00nLCAnSicsICdKJywgJ0EnLCAnUycsICdPJywgJ04nLCAnRCddLFxuICBhYmJyZXZpYXRlZDogWydKYW4nLCAnRmViJywgJ01hcicsICdBcHInLCAnTWF5JywgJ0p1bicsICdKdWwnLCAnQXVnJywgJ1NlcCcsICdPY3QnLCAnTm92JywgJ0RlYyddLFxuICB3aWRlOiBbJ0phbnVhcnknLCAnRmVicnVhcnknLCAnTWFyY2gnLCAnQXByaWwnLCAnTWF5JywgJ0p1bmUnLCAnSnVseScsICdBdWd1c3QnLCAnU2VwdGVtYmVyJywgJ09jdG9iZXInLCAnTm92ZW1iZXInLCAnRGVjZW1iZXInXVxufTtcbnZhciBkYXlWYWx1ZXMgPSB7XG4gIG5hcnJvdzogWydTJywgJ00nLCAnVCcsICdXJywgJ1QnLCAnRicsICdTJ10sXG4gIHNob3J0OiBbJ1N1JywgJ01vJywgJ1R1JywgJ1dlJywgJ1RoJywgJ0ZyJywgJ1NhJ10sXG4gIGFiYnJldmlhdGVkOiBbJ1N1bicsICdNb24nLCAnVHVlJywgJ1dlZCcsICdUaHUnLCAnRnJpJywgJ1NhdCddLFxuICB3aWRlOiBbJ1N1bmRheScsICdNb25kYXknLCAnVHVlc2RheScsICdXZWRuZXNkYXknLCAnVGh1cnNkYXknLCAnRnJpZGF5JywgJ1NhdHVyZGF5J11cbn07XG52YXIgZGF5UGVyaW9kVmFsdWVzID0ge1xuICBuYXJyb3c6IHtcbiAgICBhbTogJ2EnLFxuICAgIHBtOiAncCcsXG4gICAgbWlkbmlnaHQ6ICdtaScsXG4gICAgbm9vbjogJ24nLFxuICAgIG1vcm5pbmc6ICdtb3JuaW5nJyxcbiAgICBhZnRlcm5vb246ICdhZnRlcm5vb24nLFxuICAgIGV2ZW5pbmc6ICdldmVuaW5nJyxcbiAgICBuaWdodDogJ25pZ2h0J1xuICB9LFxuICBhYmJyZXZpYXRlZDoge1xuICAgIGFtOiAnQU0nLFxuICAgIHBtOiAnUE0nLFxuICAgIG1pZG5pZ2h0OiAnbWlkbmlnaHQnLFxuICAgIG5vb246ICdub29uJyxcbiAgICBtb3JuaW5nOiAnbW9ybmluZycsXG4gICAgYWZ0ZXJub29uOiAnYWZ0ZXJub29uJyxcbiAgICBldmVuaW5nOiAnZXZlbmluZycsXG4gICAgbmlnaHQ6ICduaWdodCdcbiAgfSxcbiAgd2lkZToge1xuICAgIGFtOiAnYS5tLicsXG4gICAgcG06ICdwLm0uJyxcbiAgICBtaWRuaWdodDogJ21pZG5pZ2h0JyxcbiAgICBub29uOiAnbm9vbicsXG4gICAgbW9ybmluZzogJ21vcm5pbmcnLFxuICAgIGFmdGVybm9vbjogJ2FmdGVybm9vbicsXG4gICAgZXZlbmluZzogJ2V2ZW5pbmcnLFxuICAgIG5pZ2h0OiAnbmlnaHQnXG4gIH1cbn07XG52YXIgZm9ybWF0dGluZ0RheVBlcmlvZFZhbHVlcyA9IHtcbiAgbmFycm93OiB7XG4gICAgYW06ICdhJyxcbiAgICBwbTogJ3AnLFxuICAgIG1pZG5pZ2h0OiAnbWknLFxuICAgIG5vb246ICduJyxcbiAgICBtb3JuaW5nOiAnaW4gdGhlIG1vcm5pbmcnLFxuICAgIGFmdGVybm9vbjogJ2luIHRoZSBhZnRlcm5vb24nLFxuICAgIGV2ZW5pbmc6ICdpbiB0aGUgZXZlbmluZycsXG4gICAgbmlnaHQ6ICdhdCBuaWdodCdcbiAgfSxcbiAgYWJicmV2aWF0ZWQ6IHtcbiAgICBhbTogJ0FNJyxcbiAgICBwbTogJ1BNJyxcbiAgICBtaWRuaWdodDogJ21pZG5pZ2h0JyxcbiAgICBub29uOiAnbm9vbicsXG4gICAgbW9ybmluZzogJ2luIHRoZSBtb3JuaW5nJyxcbiAgICBhZnRlcm5vb246ICdpbiB0aGUgYWZ0ZXJub29uJyxcbiAgICBldmVuaW5nOiAnaW4gdGhlIGV2ZW5pbmcnLFxuICAgIG5pZ2h0OiAnYXQgbmlnaHQnXG4gIH0sXG4gIHdpZGU6IHtcbiAgICBhbTogJ2EubS4nLFxuICAgIHBtOiAncC5tLicsXG4gICAgbWlkbmlnaHQ6ICdtaWRuaWdodCcsXG4gICAgbm9vbjogJ25vb24nLFxuICAgIG1vcm5pbmc6ICdpbiB0aGUgbW9ybmluZycsXG4gICAgYWZ0ZXJub29uOiAnaW4gdGhlIGFmdGVybm9vbicsXG4gICAgZXZlbmluZzogJ2luIHRoZSBldmVuaW5nJyxcbiAgICBuaWdodDogJ2F0IG5pZ2h0J1xuICB9XG59O1xudmFyIG9yZGluYWxOdW1iZXIgPSBmdW5jdGlvbiBvcmRpbmFsTnVtYmVyKGRpcnR5TnVtYmVyLCBfb3B0aW9ucykge1xuICB2YXIgbnVtYmVyID0gTnVtYmVyKGRpcnR5TnVtYmVyKTtcblxuICAvLyBJZiBvcmRpbmFsIG51bWJlcnMgZGVwZW5kIG9uIGNvbnRleHQsIGZvciBleGFtcGxlLFxuICAvLyBpZiB0aGV5IGFyZSBkaWZmZXJlbnQgZm9yIGRpZmZlcmVudCBncmFtbWF0aWNhbCBnZW5kZXJzLFxuICAvLyB1c2UgYG9wdGlvbnMudW5pdGAuXG4gIC8vXG4gIC8vIGB1bml0YCBjYW4gYmUgJ3llYXInLCAncXVhcnRlcicsICdtb250aCcsICd3ZWVrJywgJ2RhdGUnLCAnZGF5T2ZZZWFyJyxcbiAgLy8gJ2RheScsICdob3VyJywgJ21pbnV0ZScsICdzZWNvbmQnLlxuXG4gIHZhciByZW0xMDAgPSBudW1iZXIgJSAxMDA7XG4gIGlmIChyZW0xMDAgPiAyMCB8fCByZW0xMDAgPCAxMCkge1xuICAgIHN3aXRjaCAocmVtMTAwICUgMTApIHtcbiAgICAgIGNhc2UgMTpcbiAgICAgICAgcmV0dXJuIG51bWJlciArICdzdCc7XG4gICAgICBjYXNlIDI6XG4gICAgICAgIHJldHVybiBudW1iZXIgKyAnbmQnO1xuICAgICAgY2FzZSAzOlxuICAgICAgICByZXR1cm4gbnVtYmVyICsgJ3JkJztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG51bWJlciArICd0aCc7XG59O1xudmFyIGxvY2FsaXplID0ge1xuICBvcmRpbmFsTnVtYmVyOiBvcmRpbmFsTnVtYmVyLFxuICBlcmE6IGJ1aWxkTG9jYWxpemVGbih7XG4gICAgdmFsdWVzOiBlcmFWYWx1ZXMsXG4gICAgZGVmYXVsdFdpZHRoOiAnd2lkZSdcbiAgfSksXG4gIHF1YXJ0ZXI6IGJ1aWxkTG9jYWxpemVGbih7XG4gICAgdmFsdWVzOiBxdWFydGVyVmFsdWVzLFxuICAgIGRlZmF1bHRXaWR0aDogJ3dpZGUnLFxuICAgIGFyZ3VtZW50Q2FsbGJhY2s6IGZ1bmN0aW9uIGFyZ3VtZW50Q2FsbGJhY2socXVhcnRlcikge1xuICAgICAgcmV0dXJuIHF1YXJ0ZXIgLSAxO1xuICAgIH1cbiAgfSksXG4gIG1vbnRoOiBidWlsZExvY2FsaXplRm4oe1xuICAgIHZhbHVlczogbW9udGhWYWx1ZXMsXG4gICAgZGVmYXVsdFdpZHRoOiAnd2lkZSdcbiAgfSksXG4gIGRheTogYnVpbGRMb2NhbGl6ZUZuKHtcbiAgICB2YWx1ZXM6IGRheVZhbHVlcyxcbiAgICBkZWZhdWx0V2lkdGg6ICd3aWRlJ1xuICB9KSxcbiAgZGF5UGVyaW9kOiBidWlsZExvY2FsaXplRm4oe1xuICAgIHZhbHVlczogZGF5UGVyaW9kVmFsdWVzLFxuICAgIGRlZmF1bHRXaWR0aDogJ3dpZGUnLFxuICAgIGZvcm1hdHRpbmdWYWx1ZXM6IGZvcm1hdHRpbmdEYXlQZXJpb2RWYWx1ZXMsXG4gICAgZGVmYXVsdEZvcm1hdHRpbmdXaWR0aDogJ3dpZGUnXG4gIH0pXG59O1xuZXhwb3J0IGRlZmF1bHQgbG9jYWxpemU7IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYnVpbGRNYXRjaEZuKGFyZ3MpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XG4gICAgdmFyIHdpZHRoID0gb3B0aW9ucy53aWR0aDtcbiAgICB2YXIgbWF0Y2hQYXR0ZXJuID0gd2lkdGggJiYgYXJncy5tYXRjaFBhdHRlcm5zW3dpZHRoXSB8fCBhcmdzLm1hdGNoUGF0dGVybnNbYXJncy5kZWZhdWx0TWF0Y2hXaWR0aF07XG4gICAgdmFyIG1hdGNoUmVzdWx0ID0gc3RyaW5nLm1hdGNoKG1hdGNoUGF0dGVybik7XG4gICAgaWYgKCFtYXRjaFJlc3VsdCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHZhciBtYXRjaGVkU3RyaW5nID0gbWF0Y2hSZXN1bHRbMF07XG4gICAgdmFyIHBhcnNlUGF0dGVybnMgPSB3aWR0aCAmJiBhcmdzLnBhcnNlUGF0dGVybnNbd2lkdGhdIHx8IGFyZ3MucGFyc2VQYXR0ZXJuc1thcmdzLmRlZmF1bHRQYXJzZVdpZHRoXTtcbiAgICB2YXIga2V5ID0gQXJyYXkuaXNBcnJheShwYXJzZVBhdHRlcm5zKSA/IGZpbmRJbmRleChwYXJzZVBhdHRlcm5zLCBmdW5jdGlvbiAocGF0dGVybikge1xuICAgICAgcmV0dXJuIHBhdHRlcm4udGVzdChtYXRjaGVkU3RyaW5nKTtcbiAgICB9KSA6IGZpbmRLZXkocGFyc2VQYXR0ZXJucywgZnVuY3Rpb24gKHBhdHRlcm4pIHtcbiAgICAgIHJldHVybiBwYXR0ZXJuLnRlc3QobWF0Y2hlZFN0cmluZyk7XG4gICAgfSk7XG4gICAgdmFyIHZhbHVlO1xuICAgIHZhbHVlID0gYXJncy52YWx1ZUNhbGxiYWNrID8gYXJncy52YWx1ZUNhbGxiYWNrKGtleSkgOiBrZXk7XG4gICAgdmFsdWUgPSBvcHRpb25zLnZhbHVlQ2FsbGJhY2sgPyBvcHRpb25zLnZhbHVlQ2FsbGJhY2sodmFsdWUpIDogdmFsdWU7XG4gICAgdmFyIHJlc3QgPSBzdHJpbmcuc2xpY2UobWF0Y2hlZFN0cmluZy5sZW5ndGgpO1xuICAgIHJldHVybiB7XG4gICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICByZXN0OiByZXN0XG4gICAgfTtcbiAgfTtcbn1cbmZ1bmN0aW9uIGZpbmRLZXkob2JqZWN0LCBwcmVkaWNhdGUpIHtcbiAgZm9yICh2YXIga2V5IGluIG9iamVjdCkge1xuICAgIGlmIChvYmplY3QuaGFzT3duUHJvcGVydHkoa2V5KSAmJiBwcmVkaWNhdGUob2JqZWN0W2tleV0pKSB7XG4gICAgICByZXR1cm4ga2V5O1xuICAgIH1cbiAgfVxuICByZXR1cm4gdW5kZWZpbmVkO1xufVxuZnVuY3Rpb24gZmluZEluZGV4KGFycmF5LCBwcmVkaWNhdGUpIHtcbiAgZm9yICh2YXIga2V5ID0gMDsga2V5IDwgYXJyYXkubGVuZ3RoOyBrZXkrKykge1xuICAgIGlmIChwcmVkaWNhdGUoYXJyYXlba2V5XSkpIHtcbiAgICAgIHJldHVybiBrZXk7XG4gICAgfVxuICB9XG4gIHJldHVybiB1bmRlZmluZWQ7XG59IiwiaW1wb3J0IGJ1aWxkTWF0Y2hGbiBmcm9tIFwiLi4vLi4vLi4vX2xpYi9idWlsZE1hdGNoRm4vaW5kZXguanNcIjtcbmltcG9ydCBidWlsZE1hdGNoUGF0dGVybkZuIGZyb20gXCIuLi8uLi8uLi9fbGliL2J1aWxkTWF0Y2hQYXR0ZXJuRm4vaW5kZXguanNcIjtcbnZhciBtYXRjaE9yZGluYWxOdW1iZXJQYXR0ZXJuID0gL14oXFxkKykodGh8c3R8bmR8cmQpPy9pO1xudmFyIHBhcnNlT3JkaW5hbE51bWJlclBhdHRlcm4gPSAvXFxkKy9pO1xudmFyIG1hdGNoRXJhUGF0dGVybnMgPSB7XG4gIG5hcnJvdzogL14oYnxhKS9pLFxuICBhYmJyZXZpYXRlZDogL14oYlxcLj9cXHM/Y1xcLj98YlxcLj9cXHM/Y1xcLj9cXHM/ZVxcLj98YVxcLj9cXHM/ZFxcLj98Y1xcLj9cXHM/ZVxcLj8pL2ksXG4gIHdpZGU6IC9eKGJlZm9yZSBjaHJpc3R8YmVmb3JlIGNvbW1vbiBlcmF8YW5ubyBkb21pbml8Y29tbW9uIGVyYSkvaVxufTtcbnZhciBwYXJzZUVyYVBhdHRlcm5zID0ge1xuICBhbnk6IFsvXmIvaSwgL14oYXxjKS9pXVxufTtcbnZhciBtYXRjaFF1YXJ0ZXJQYXR0ZXJucyA9IHtcbiAgbmFycm93OiAvXlsxMjM0XS9pLFxuICBhYmJyZXZpYXRlZDogL15xWzEyMzRdL2ksXG4gIHdpZGU6IC9eWzEyMzRdKHRofHN0fG5kfHJkKT8gcXVhcnRlci9pXG59O1xudmFyIHBhcnNlUXVhcnRlclBhdHRlcm5zID0ge1xuICBhbnk6IFsvMS9pLCAvMi9pLCAvMy9pLCAvNC9pXVxufTtcbnZhciBtYXRjaE1vbnRoUGF0dGVybnMgPSB7XG4gIG5hcnJvdzogL15bamZtYXNvbmRdL2ksXG4gIGFiYnJldmlhdGVkOiAvXihqYW58ZmVifG1hcnxhcHJ8bWF5fGp1bnxqdWx8YXVnfHNlcHxvY3R8bm92fGRlYykvaSxcbiAgd2lkZTogL14oamFudWFyeXxmZWJydWFyeXxtYXJjaHxhcHJpbHxtYXl8anVuZXxqdWx5fGF1Z3VzdHxzZXB0ZW1iZXJ8b2N0b2Jlcnxub3ZlbWJlcnxkZWNlbWJlcikvaVxufTtcbnZhciBwYXJzZU1vbnRoUGF0dGVybnMgPSB7XG4gIG5hcnJvdzogWy9eai9pLCAvXmYvaSwgL15tL2ksIC9eYS9pLCAvXm0vaSwgL15qL2ksIC9eai9pLCAvXmEvaSwgL15zL2ksIC9eby9pLCAvXm4vaSwgL15kL2ldLFxuICBhbnk6IFsvXmphL2ksIC9eZi9pLCAvXm1hci9pLCAvXmFwL2ksIC9ebWF5L2ksIC9eanVuL2ksIC9eanVsL2ksIC9eYXUvaSwgL15zL2ksIC9eby9pLCAvXm4vaSwgL15kL2ldXG59O1xudmFyIG1hdGNoRGF5UGF0dGVybnMgPSB7XG4gIG5hcnJvdzogL15bc210d2ZdL2ksXG4gIHNob3J0OiAvXihzdXxtb3x0dXx3ZXx0aHxmcnxzYSkvaSxcbiAgYWJicmV2aWF0ZWQ6IC9eKHN1bnxtb258dHVlfHdlZHx0aHV8ZnJpfHNhdCkvaSxcbiAgd2lkZTogL14oc3VuZGF5fG1vbmRheXx0dWVzZGF5fHdlZG5lc2RheXx0aHVyc2RheXxmcmlkYXl8c2F0dXJkYXkpL2lcbn07XG52YXIgcGFyc2VEYXlQYXR0ZXJucyA9IHtcbiAgbmFycm93OiBbL15zL2ksIC9ebS9pLCAvXnQvaSwgL153L2ksIC9edC9pLCAvXmYvaSwgL15zL2ldLFxuICBhbnk6IFsvXnN1L2ksIC9ebS9pLCAvXnR1L2ksIC9edy9pLCAvXnRoL2ksIC9eZi9pLCAvXnNhL2ldXG59O1xudmFyIG1hdGNoRGF5UGVyaW9kUGF0dGVybnMgPSB7XG4gIG5hcnJvdzogL14oYXxwfG1pfG58KGluIHRoZXxhdCkgKG1vcm5pbmd8YWZ0ZXJub29ufGV2ZW5pbmd8bmlnaHQpKS9pLFxuICBhbnk6IC9eKFthcF1cXC4/XFxzP21cXC4/fG1pZG5pZ2h0fG5vb258KGluIHRoZXxhdCkgKG1vcm5pbmd8YWZ0ZXJub29ufGV2ZW5pbmd8bmlnaHQpKS9pXG59O1xudmFyIHBhcnNlRGF5UGVyaW9kUGF0dGVybnMgPSB7XG4gIGFueToge1xuICAgIGFtOiAvXmEvaSxcbiAgICBwbTogL15wL2ksXG4gICAgbWlkbmlnaHQ6IC9ebWkvaSxcbiAgICBub29uOiAvXm5vL2ksXG4gICAgbW9ybmluZzogL21vcm5pbmcvaSxcbiAgICBhZnRlcm5vb246IC9hZnRlcm5vb24vaSxcbiAgICBldmVuaW5nOiAvZXZlbmluZy9pLFxuICAgIG5pZ2h0OiAvbmlnaHQvaVxuICB9XG59O1xudmFyIG1hdGNoID0ge1xuICBvcmRpbmFsTnVtYmVyOiBidWlsZE1hdGNoUGF0dGVybkZuKHtcbiAgICBtYXRjaFBhdHRlcm46IG1hdGNoT3JkaW5hbE51bWJlclBhdHRlcm4sXG4gICAgcGFyc2VQYXR0ZXJuOiBwYXJzZU9yZGluYWxOdW1iZXJQYXR0ZXJuLFxuICAgIHZhbHVlQ2FsbGJhY2s6IGZ1bmN0aW9uIHZhbHVlQ2FsbGJhY2sodmFsdWUpIHtcbiAgICAgIHJldHVybiBwYXJzZUludCh2YWx1ZSwgMTApO1xuICAgIH1cbiAgfSksXG4gIGVyYTogYnVpbGRNYXRjaEZuKHtcbiAgICBtYXRjaFBhdHRlcm5zOiBtYXRjaEVyYVBhdHRlcm5zLFxuICAgIGRlZmF1bHRNYXRjaFdpZHRoOiAnd2lkZScsXG4gICAgcGFyc2VQYXR0ZXJuczogcGFyc2VFcmFQYXR0ZXJucyxcbiAgICBkZWZhdWx0UGFyc2VXaWR0aDogJ2FueSdcbiAgfSksXG4gIHF1YXJ0ZXI6IGJ1aWxkTWF0Y2hGbih7XG4gICAgbWF0Y2hQYXR0ZXJuczogbWF0Y2hRdWFydGVyUGF0dGVybnMsXG4gICAgZGVmYXVsdE1hdGNoV2lkdGg6ICd3aWRlJyxcbiAgICBwYXJzZVBhdHRlcm5zOiBwYXJzZVF1YXJ0ZXJQYXR0ZXJucyxcbiAgICBkZWZhdWx0UGFyc2VXaWR0aDogJ2FueScsXG4gICAgdmFsdWVDYWxsYmFjazogZnVuY3Rpb24gdmFsdWVDYWxsYmFjayhpbmRleCkge1xuICAgICAgcmV0dXJuIGluZGV4ICsgMTtcbiAgICB9XG4gIH0pLFxuICBtb250aDogYnVpbGRNYXRjaEZuKHtcbiAgICBtYXRjaFBhdHRlcm5zOiBtYXRjaE1vbnRoUGF0dGVybnMsXG4gICAgZGVmYXVsdE1hdGNoV2lkdGg6ICd3aWRlJyxcbiAgICBwYXJzZVBhdHRlcm5zOiBwYXJzZU1vbnRoUGF0dGVybnMsXG4gICAgZGVmYXVsdFBhcnNlV2lkdGg6ICdhbnknXG4gIH0pLFxuICBkYXk6IGJ1aWxkTWF0Y2hGbih7XG4gICAgbWF0Y2hQYXR0ZXJuczogbWF0Y2hEYXlQYXR0ZXJucyxcbiAgICBkZWZhdWx0TWF0Y2hXaWR0aDogJ3dpZGUnLFxuICAgIHBhcnNlUGF0dGVybnM6IHBhcnNlRGF5UGF0dGVybnMsXG4gICAgZGVmYXVsdFBhcnNlV2lkdGg6ICdhbnknXG4gIH0pLFxuICBkYXlQZXJpb2Q6IGJ1aWxkTWF0Y2hGbih7XG4gICAgbWF0Y2hQYXR0ZXJuczogbWF0Y2hEYXlQZXJpb2RQYXR0ZXJucyxcbiAgICBkZWZhdWx0TWF0Y2hXaWR0aDogJ2FueScsXG4gICAgcGFyc2VQYXR0ZXJuczogcGFyc2VEYXlQZXJpb2RQYXR0ZXJucyxcbiAgICBkZWZhdWx0UGFyc2VXaWR0aDogJ2FueSdcbiAgfSlcbn07XG5leHBvcnQgZGVmYXVsdCBtYXRjaDsiLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBidWlsZE1hdGNoUGF0dGVybkZuKGFyZ3MpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XG4gICAgdmFyIG1hdGNoUmVzdWx0ID0gc3RyaW5nLm1hdGNoKGFyZ3MubWF0Y2hQYXR0ZXJuKTtcbiAgICBpZiAoIW1hdGNoUmVzdWx0KSByZXR1cm4gbnVsbDtcbiAgICB2YXIgbWF0Y2hlZFN0cmluZyA9IG1hdGNoUmVzdWx0WzBdO1xuICAgIHZhciBwYXJzZVJlc3VsdCA9IHN0cmluZy5tYXRjaChhcmdzLnBhcnNlUGF0dGVybik7XG4gICAgaWYgKCFwYXJzZVJlc3VsdCkgcmV0dXJuIG51bGw7XG4gICAgdmFyIHZhbHVlID0gYXJncy52YWx1ZUNhbGxiYWNrID8gYXJncy52YWx1ZUNhbGxiYWNrKHBhcnNlUmVzdWx0WzBdKSA6IHBhcnNlUmVzdWx0WzBdO1xuICAgIHZhbHVlID0gb3B0aW9ucy52YWx1ZUNhbGxiYWNrID8gb3B0aW9ucy52YWx1ZUNhbGxiYWNrKHZhbHVlKSA6IHZhbHVlO1xuICAgIHZhciByZXN0ID0gc3RyaW5nLnNsaWNlKG1hdGNoZWRTdHJpbmcubGVuZ3RoKTtcbiAgICByZXR1cm4ge1xuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgcmVzdDogcmVzdFxuICAgIH07XG4gIH07XG59IiwiaW1wb3J0IGZvcm1hdERpc3RhbmNlIGZyb20gXCIuL19saWIvZm9ybWF0RGlzdGFuY2UvaW5kZXguanNcIjtcbmltcG9ydCBmb3JtYXRMb25nIGZyb20gXCIuL19saWIvZm9ybWF0TG9uZy9pbmRleC5qc1wiO1xuaW1wb3J0IGZvcm1hdFJlbGF0aXZlIGZyb20gXCIuL19saWIvZm9ybWF0UmVsYXRpdmUvaW5kZXguanNcIjtcbmltcG9ydCBsb2NhbGl6ZSBmcm9tIFwiLi9fbGliL2xvY2FsaXplL2luZGV4LmpzXCI7XG5pbXBvcnQgbWF0Y2ggZnJvbSBcIi4vX2xpYi9tYXRjaC9pbmRleC5qc1wiO1xuLyoqXG4gKiBAdHlwZSB7TG9jYWxlfVxuICogQGNhdGVnb3J5IExvY2FsZXNcbiAqIEBzdW1tYXJ5IEVuZ2xpc2ggbG9jYWxlIChVbml0ZWQgU3RhdGVzKS5cbiAqIEBsYW5ndWFnZSBFbmdsaXNoXG4gKiBAaXNvLTYzOS0yIGVuZ1xuICogQGF1dGhvciBTYXNoYSBLb3NzIFtAa29zc25vY29ycF17QGxpbmsgaHR0cHM6Ly9naXRodWIuY29tL2tvc3Nub2NvcnB9XG4gKiBAYXV0aG9yIExlc2hhIEtvc3MgW0BsZXNoYWtvc3Nde0BsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9sZXNoYWtvc3N9XG4gKi9cbnZhciBsb2NhbGUgPSB7XG4gIGNvZGU6ICdlbi1VUycsXG4gIGZvcm1hdERpc3RhbmNlOiBmb3JtYXREaXN0YW5jZSxcbiAgZm9ybWF0TG9uZzogZm9ybWF0TG9uZyxcbiAgZm9ybWF0UmVsYXRpdmU6IGZvcm1hdFJlbGF0aXZlLFxuICBsb2NhbGl6ZTogbG9jYWxpemUsXG4gIG1hdGNoOiBtYXRjaCxcbiAgb3B0aW9uczoge1xuICAgIHdlZWtTdGFydHNPbjogMCAvKiBTdW5kYXkgKi8sXG4gICAgZmlyc3RXZWVrQ29udGFpbnNEYXRlOiAxXG4gIH1cbn07XG5leHBvcnQgZGVmYXVsdCBsb2NhbGU7IiwiaW1wb3J0IGRlZmF1bHRMb2NhbGUgZnJvbSBcIi4uLy4uL2xvY2FsZS9lbi1VUy9pbmRleC5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZGVmYXVsdExvY2FsZTsiLCJpbXBvcnQgaXNWYWxpZCBmcm9tIFwiLi4vaXNWYWxpZC9pbmRleC5qc1wiO1xuaW1wb3J0IHN1Yk1pbGxpc2Vjb25kcyBmcm9tIFwiLi4vc3ViTWlsbGlzZWNvbmRzL2luZGV4LmpzXCI7XG5pbXBvcnQgdG9EYXRlIGZyb20gXCIuLi90b0RhdGUvaW5kZXguanNcIjtcbmltcG9ydCBmb3JtYXR0ZXJzIGZyb20gXCIuLi9fbGliL2Zvcm1hdC9mb3JtYXR0ZXJzL2luZGV4LmpzXCI7XG5pbXBvcnQgbG9uZ0Zvcm1hdHRlcnMgZnJvbSBcIi4uL19saWIvZm9ybWF0L2xvbmdGb3JtYXR0ZXJzL2luZGV4LmpzXCI7XG5pbXBvcnQgZ2V0VGltZXpvbmVPZmZzZXRJbk1pbGxpc2Vjb25kcyBmcm9tIFwiLi4vX2xpYi9nZXRUaW1lem9uZU9mZnNldEluTWlsbGlzZWNvbmRzL2luZGV4LmpzXCI7XG5pbXBvcnQgeyBpc1Byb3RlY3RlZERheU9mWWVhclRva2VuLCBpc1Byb3RlY3RlZFdlZWtZZWFyVG9rZW4sIHRocm93UHJvdGVjdGVkRXJyb3IgfSBmcm9tIFwiLi4vX2xpYi9wcm90ZWN0ZWRUb2tlbnMvaW5kZXguanNcIjtcbmltcG9ydCB0b0ludGVnZXIgZnJvbSBcIi4uL19saWIvdG9JbnRlZ2VyL2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9fbGliL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xuaW1wb3J0IHsgZ2V0RGVmYXVsdE9wdGlvbnMgfSBmcm9tIFwiLi4vX2xpYi9kZWZhdWx0T3B0aW9ucy9pbmRleC5qc1wiO1xuaW1wb3J0IGRlZmF1bHRMb2NhbGUgZnJvbSBcIi4uL19saWIvZGVmYXVsdExvY2FsZS9pbmRleC5qc1wiOyAvLyBUaGlzIFJlZ0V4cCBjb25zaXN0cyBvZiB0aHJlZSBwYXJ0cyBzZXBhcmF0ZWQgYnkgYHxgOlxuLy8gLSBbeVlRcU1Md0lkRGVjaWhIS2ttc11vIG1hdGNoZXMgYW55IGF2YWlsYWJsZSBvcmRpbmFsIG51bWJlciB0b2tlblxuLy8gICAob25lIG9mIHRoZSBjZXJ0YWluIGxldHRlcnMgZm9sbG93ZWQgYnkgYG9gKVxuLy8gLSAoXFx3KVxcMSogbWF0Y2hlcyBhbnkgc2VxdWVuY2VzIG9mIHRoZSBzYW1lIGxldHRlclxuLy8gLSAnJyBtYXRjaGVzIHR3byBxdW90ZSBjaGFyYWN0ZXJzIGluIGEgcm93XG4vLyAtICcoJyd8W14nXSkrKCd8JCkgbWF0Y2hlcyBhbnl0aGluZyBzdXJyb3VuZGVkIGJ5IHR3byBxdW90ZSBjaGFyYWN0ZXJzICgnKSxcbi8vICAgZXhjZXB0IGEgc2luZ2xlIHF1b3RlIHN5bWJvbCwgd2hpY2ggZW5kcyB0aGUgc2VxdWVuY2UuXG4vLyAgIFR3byBxdW90ZSBjaGFyYWN0ZXJzIGRvIG5vdCBlbmQgdGhlIHNlcXVlbmNlLlxuLy8gICBJZiB0aGVyZSBpcyBubyBtYXRjaGluZyBzaW5nbGUgcXVvdGVcbi8vICAgdGhlbiB0aGUgc2VxdWVuY2Ugd2lsbCBjb250aW51ZSB1bnRpbCB0aGUgZW5kIG9mIHRoZSBzdHJpbmcuXG4vLyAtIC4gbWF0Y2hlcyBhbnkgc2luZ2xlIGNoYXJhY3RlciB1bm1hdGNoZWQgYnkgcHJldmlvdXMgcGFydHMgb2YgdGhlIFJlZ0V4cHNcbnZhciBmb3JtYXR0aW5nVG9rZW5zUmVnRXhwID0gL1t5WVFxTUx3SWREZWNpaEhLa21zXW98KFxcdylcXDEqfCcnfCcoJyd8W14nXSkrKCd8JCl8Li9nO1xuXG4vLyBUaGlzIFJlZ0V4cCBjYXRjaGVzIHN5bWJvbHMgZXNjYXBlZCBieSBxdW90ZXMsIGFuZCBhbHNvXG4vLyBzZXF1ZW5jZXMgb2Ygc3ltYm9scyBQLCBwLCBhbmQgdGhlIGNvbWJpbmF0aW9ucyBsaWtlIGBQUFBQUFBQcHBwcHBgXG52YXIgbG9uZ0Zvcm1hdHRpbmdUb2tlbnNSZWdFeHAgPSAvUCtwK3xQK3xwK3wnJ3wnKCcnfFteJ10pKygnfCQpfC4vZztcbnZhciBlc2NhcGVkU3RyaW5nUmVnRXhwID0gL14nKFteXSo/KSc/JC87XG52YXIgZG91YmxlUXVvdGVSZWdFeHAgPSAvJycvZztcbnZhciB1bmVzY2FwZWRMYXRpbkNoYXJhY3RlclJlZ0V4cCA9IC9bYS16QS1aXS87XG5cbi8qKlxuICogQG5hbWUgZm9ybWF0XG4gKiBAY2F0ZWdvcnkgQ29tbW9uIEhlbHBlcnNcbiAqIEBzdW1tYXJ5IEZvcm1hdCB0aGUgZGF0ZS5cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFJldHVybiB0aGUgZm9ybWF0dGVkIGRhdGUgc3RyaW5nIGluIHRoZSBnaXZlbiBmb3JtYXQuIFRoZSByZXN1bHQgbWF5IHZhcnkgYnkgbG9jYWxlLlxuICpcbiAqID4g4pqg77iPIFBsZWFzZSBub3RlIHRoYXQgdGhlIGBmb3JtYXRgIHRva2VucyBkaWZmZXIgZnJvbSBNb21lbnQuanMgYW5kIG90aGVyIGxpYnJhcmllcy5cbiAqID4gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvYmxvYi9tYXN0ZXIvZG9jcy91bmljb2RlVG9rZW5zLm1kXG4gKlxuICogVGhlIGNoYXJhY3RlcnMgd3JhcHBlZCBiZXR3ZWVuIHR3byBzaW5nbGUgcXVvdGVzIGNoYXJhY3RlcnMgKCcpIGFyZSBlc2NhcGVkLlxuICogVHdvIHNpbmdsZSBxdW90ZXMgaW4gYSByb3csIHdoZXRoZXIgaW5zaWRlIG9yIG91dHNpZGUgYSBxdW90ZWQgc2VxdWVuY2UsIHJlcHJlc2VudCBhICdyZWFsJyBzaW5nbGUgcXVvdGUuXG4gKiAoc2VlIHRoZSBsYXN0IGV4YW1wbGUpXG4gKlxuICogRm9ybWF0IG9mIHRoZSBzdHJpbmcgaXMgYmFzZWQgb24gVW5pY29kZSBUZWNobmljYWwgU3RhbmRhcmQgIzM1OlxuICogaHR0cHM6Ly93d3cudW5pY29kZS5vcmcvcmVwb3J0cy90cjM1L3RyMzUtZGF0ZXMuaHRtbCNEYXRlX0ZpZWxkX1N5bWJvbF9UYWJsZVxuICogd2l0aCBhIGZldyBhZGRpdGlvbnMgKHNlZSBub3RlIDcgYmVsb3cgdGhlIHRhYmxlKS5cbiAqXG4gKiBBY2NlcHRlZCBwYXR0ZXJuczpcbiAqIHwgVW5pdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFBhdHRlcm4gfCBSZXN1bHQgZXhhbXBsZXMgICAgICAgICAgICAgICAgICAgfCBOb3RlcyB8XG4gKiB8LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfC0tLS0tLS0tLXwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXwtLS0tLS0tfFxuICogfCBFcmEgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgRy4uR0dHICB8IEFELCBCQyAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEdHR0cgICAgfCBBbm5vIERvbWluaSwgQmVmb3JlIENocmlzdCAgICAgICAgfCAyICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBHR0dHRyAgIHwgQSwgQiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCBDYWxlbmRhciB5ZWFyICAgICAgICAgICAgICAgICAgIHwgeSAgICAgICB8IDQ0LCAxLCAxOTAwLCAyMDE3ICAgICAgICAgICAgICAgICB8IDUgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHlvICAgICAgfCA0NHRoLCAxc3QsIDB0aCwgMTd0aCAgICAgICAgICAgICAgfCA1LDcgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB5eSAgICAgIHwgNDQsIDAxLCAwMCwgMTcgICAgICAgICAgICAgICAgICAgIHwgNSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgeXl5ICAgICB8IDA0NCwgMDAxLCAxOTAwLCAyMDE3ICAgICAgICAgICAgICB8IDUgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHl5eXkgICAgfCAwMDQ0LCAwMDAxLCAxOTAwLCAyMDE3ICAgICAgICAgICAgfCA1ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB5eXl5eSAgIHwgLi4uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgMyw1ICAgfFxuICogfCBMb2NhbCB3ZWVrLW51bWJlcmluZyB5ZWFyICAgICAgIHwgWSAgICAgICB8IDQ0LCAxLCAxOTAwLCAyMDE3ICAgICAgICAgICAgICAgICB8IDUgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFlvICAgICAgfCA0NHRoLCAxc3QsIDE5MDB0aCwgMjAxN3RoICAgICAgICAgfCA1LDcgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBZWSAgICAgIHwgNDQsIDAxLCAwMCwgMTcgICAgICAgICAgICAgICAgICAgIHwgNSw4ICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgWVlZICAgICB8IDA0NCwgMDAxLCAxOTAwLCAyMDE3ICAgICAgICAgICAgICB8IDUgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFlZWVkgICAgfCAwMDQ0LCAwMDAxLCAxOTAwLCAyMDE3ICAgICAgICAgICAgfCA1LDggICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBZWVlZWSAgIHwgLi4uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgMyw1ICAgfFxuICogfCBJU08gd2Vlay1udW1iZXJpbmcgeWVhciAgICAgICAgIHwgUiAgICAgICB8IC00MywgMCwgMSwgMTkwMCwgMjAxNyAgICAgICAgICAgICB8IDUsNyAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFJSICAgICAgfCAtNDMsIDAwLCAwMSwgMTkwMCwgMjAxNyAgICAgICAgICAgfCA1LDcgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBSUlIgICAgIHwgLTA0MywgMDAwLCAwMDEsIDE5MDAsIDIwMTcgICAgICAgIHwgNSw3ICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUlJSUiAgICB8IC0wMDQzLCAwMDAwLCAwMDAxLCAxOTAwLCAyMDE3ICAgICB8IDUsNyAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFJSUlJSICAgfCAuLi4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAzLDUsNyB8XG4gKiB8IEV4dGVuZGVkIHllYXIgICAgICAgICAgICAgICAgICAgfCB1ICAgICAgIHwgLTQzLCAwLCAxLCAxOTAwLCAyMDE3ICAgICAgICAgICAgIHwgNSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgdXUgICAgICB8IC00MywgMDEsIDE5MDAsIDIwMTcgICAgICAgICAgICAgICB8IDUgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHV1dSAgICAgfCAtMDQzLCAwMDEsIDE5MDAsIDIwMTcgICAgICAgICAgICAgfCA1ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB1dXV1ICAgIHwgLTAwNDMsIDAwMDEsIDE5MDAsIDIwMTcgICAgICAgICAgIHwgNSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgdXV1dXUgICB8IC4uLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IDMsNSAgIHxcbiAqIHwgUXVhcnRlciAoZm9ybWF0dGluZykgICAgICAgICAgICB8IFEgICAgICAgfCAxLCAyLCAzLCA0ICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBRbyAgICAgIHwgMXN0LCAybmQsIDNyZCwgNHRoICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUVEgICAgICB8IDAxLCAwMiwgMDMsIDA0ICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFFRUSAgICAgfCBRMSwgUTIsIFEzLCBRNCAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBRUVFRICAgIHwgMXN0IHF1YXJ0ZXIsIDJuZCBxdWFydGVyLCAuLi4gICAgIHwgMiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUVFRUVEgICB8IDEsIDIsIDMsIDQgICAgICAgICAgICAgICAgICAgICAgICB8IDQgICAgIHxcbiAqIHwgUXVhcnRlciAoc3RhbmQtYWxvbmUpICAgICAgICAgICB8IHEgICAgICAgfCAxLCAyLCAzLCA0ICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBxbyAgICAgIHwgMXN0LCAybmQsIDNyZCwgNHRoICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgcXEgICAgICB8IDAxLCAwMiwgMDMsIDA0ICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHFxcSAgICAgfCBRMSwgUTIsIFEzLCBRNCAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBxcXFxICAgIHwgMXN0IHF1YXJ0ZXIsIDJuZCBxdWFydGVyLCAuLi4gICAgIHwgMiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgcXFxcXEgICB8IDEsIDIsIDMsIDQgICAgICAgICAgICAgICAgICAgICAgICB8IDQgICAgIHxcbiAqIHwgTW9udGggKGZvcm1hdHRpbmcpICAgICAgICAgICAgICB8IE0gICAgICAgfCAxLCAyLCAuLi4sIDEyICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBNbyAgICAgIHwgMXN0LCAybmQsIC4uLiwgMTJ0aCAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgTU0gICAgICB8IDAxLCAwMiwgLi4uLCAxMiAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IE1NTSAgICAgfCBKYW4sIEZlYiwgLi4uLCBEZWMgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBNTU1NICAgIHwgSmFudWFyeSwgRmVicnVhcnksIC4uLiwgRGVjZW1iZXIgIHwgMiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgTU1NTU0gICB8IEosIEYsIC4uLiwgRCAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgTW9udGggKHN0YW5kLWFsb25lKSAgICAgICAgICAgICB8IEwgICAgICAgfCAxLCAyLCAuLi4sIDEyICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBMbyAgICAgIHwgMXN0LCAybmQsIC4uLiwgMTJ0aCAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgTEwgICAgICB8IDAxLCAwMiwgLi4uLCAxMiAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IExMTCAgICAgfCBKYW4sIEZlYiwgLi4uLCBEZWMgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBMTExMICAgIHwgSmFudWFyeSwgRmVicnVhcnksIC4uLiwgRGVjZW1iZXIgIHwgMiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgTExMTEwgICB8IEosIEYsIC4uLiwgRCAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgTG9jYWwgd2VlayBvZiB5ZWFyICAgICAgICAgICAgICB8IHcgICAgICAgfCAxLCAyLCAuLi4sIDUzICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB3byAgICAgIHwgMXN0LCAybmQsIC4uLiwgNTN0aCAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgd3cgICAgICB8IDAxLCAwMiwgLi4uLCA1MyAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgSVNPIHdlZWsgb2YgeWVhciAgICAgICAgICAgICAgICB8IEkgICAgICAgfCAxLCAyLCAuLi4sIDUzICAgICAgICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBJbyAgICAgIHwgMXN0LCAybmQsIC4uLiwgNTN0aCAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgSUkgICAgICB8IDAxLCAwMiwgLi4uLCA1MyAgICAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgRGF5IG9mIG1vbnRoICAgICAgICAgICAgICAgICAgICB8IGQgICAgICAgfCAxLCAyLCAuLi4sIDMxICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBkbyAgICAgIHwgMXN0LCAybmQsIC4uLiwgMzFzdCAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgZGQgICAgICB8IDAxLCAwMiwgLi4uLCAzMSAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgRGF5IG9mIHllYXIgICAgICAgICAgICAgICAgICAgICB8IEQgICAgICAgfCAxLCAyLCAuLi4sIDM2NSwgMzY2ICAgICAgICAgICAgICAgfCA5ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBEbyAgICAgIHwgMXN0LCAybmQsIC4uLiwgMzY1dGgsIDM2NnRoICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgREQgICAgICB8IDAxLCAwMiwgLi4uLCAzNjUsIDM2NiAgICAgICAgICAgICB8IDkgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IERERCAgICAgfCAwMDEsIDAwMiwgLi4uLCAzNjUsIDM2NiAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBEREREICAgIHwgLi4uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgMyAgICAgfFxuICogfCBEYXkgb2Ygd2VlayAoZm9ybWF0dGluZykgICAgICAgIHwgRS4uRUVFICB8IE1vbiwgVHVlLCBXZWQsIC4uLiwgU3VuICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEVFRUUgICAgfCBNb25kYXksIFR1ZXNkYXksIC4uLiwgU3VuZGF5ICAgICAgfCAyICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBFRUVFRSAgIHwgTSwgVCwgVywgVCwgRiwgUywgUyAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgRUVFRUVFICB8IE1vLCBUdSwgV2UsIFRoLCBGciwgU2EsIFN1ICAgICAgICB8ICAgICAgIHxcbiAqIHwgSVNPIGRheSBvZiB3ZWVrIChmb3JtYXR0aW5nKSAgICB8IGkgICAgICAgfCAxLCAyLCAzLCAuLi4sIDcgICAgICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBpbyAgICAgIHwgMXN0LCAybmQsIC4uLiwgN3RoICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgaWkgICAgICB8IDAxLCAwMiwgLi4uLCAwNyAgICAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGlpaSAgICAgfCBNb24sIFR1ZSwgV2VkLCAuLi4sIFN1biAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBpaWlpICAgIHwgTW9uZGF5LCBUdWVzZGF5LCAuLi4sIFN1bmRheSAgICAgIHwgMiw3ICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgaWlpaWkgICB8IE0sIFQsIFcsIFQsIEYsIFMsIFMgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGlpaWlpaSAgfCBNbywgVHUsIFdlLCBUaCwgRnIsIFNhLCBTdSAgICAgICAgfCA3ICAgICB8XG4gKiB8IExvY2FsIGRheSBvZiB3ZWVrIChmb3JtYXR0aW5nKSAgfCBlICAgICAgIHwgMiwgMywgNCwgLi4uLCAxICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgZW8gICAgICB8IDJuZCwgM3JkLCAuLi4sIDFzdCAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGVlICAgICAgfCAwMiwgMDMsIC4uLiwgMDEgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBlZWUgICAgIHwgTW9uLCBUdWUsIFdlZCwgLi4uLCBTdW4gICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgZWVlZSAgICB8IE1vbmRheSwgVHVlc2RheSwgLi4uLCBTdW5kYXkgICAgICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGVlZWVlICAgfCBNLCBULCBXLCBULCBGLCBTLCBTICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBlZWVlZWUgIHwgTW8sIFR1LCBXZSwgVGgsIEZyLCBTYSwgU3UgICAgICAgIHwgICAgICAgfFxuICogfCBMb2NhbCBkYXkgb2Ygd2VlayAoc3RhbmQtYWxvbmUpIHwgYyAgICAgICB8IDIsIDMsIDQsIC4uLiwgMSAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGNvICAgICAgfCAybmQsIDNyZCwgLi4uLCAxc3QgICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBjYyAgICAgIHwgMDIsIDAzLCAuLi4sIDAxICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgY2NjICAgICB8IE1vbiwgVHVlLCBXZWQsIC4uLiwgU3VuICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGNjY2MgICAgfCBNb25kYXksIFR1ZXNkYXksIC4uLiwgU3VuZGF5ICAgICAgfCAyICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBjY2NjYyAgIHwgTSwgVCwgVywgVCwgRiwgUywgUyAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgY2NjY2NjICB8IE1vLCBUdSwgV2UsIFRoLCBGciwgU2EsIFN1ICAgICAgICB8ICAgICAgIHxcbiAqIHwgQU0sIFBNICAgICAgICAgICAgICAgICAgICAgICAgICB8IGEuLmFhICAgfCBBTSwgUE0gICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBhYWEgICAgIHwgYW0sIHBtICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgYWFhYSAgICB8IGEubS4sIHAubS4gICAgICAgICAgICAgICAgICAgICAgICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGFhYWFhICAgfCBhLCBwICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IEFNLCBQTSwgbm9vbiwgbWlkbmlnaHQgICAgICAgICAgfCBiLi5iYiAgIHwgQU0sIFBNLCBub29uLCBtaWRuaWdodCAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgYmJiICAgICB8IGFtLCBwbSwgbm9vbiwgbWlkbmlnaHQgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGJiYmIgICAgfCBhLm0uLCBwLm0uLCBub29uLCBtaWRuaWdodCAgICAgICAgfCAyICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBiYmJiYiAgIHwgYSwgcCwgbiwgbWkgICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCBGbGV4aWJsZSBkYXkgcGVyaW9kICAgICAgICAgICAgIHwgQi4uQkJCICB8IGF0IG5pZ2h0LCBpbiB0aGUgbW9ybmluZywgLi4uICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEJCQkIgICAgfCBhdCBuaWdodCwgaW4gdGhlIG1vcm5pbmcsIC4uLiAgICAgfCAyICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBCQkJCQiAgIHwgYXQgbmlnaHQsIGluIHRoZSBtb3JuaW5nLCAuLi4gICAgIHwgICAgICAgfFxuICogfCBIb3VyIFsxLTEyXSAgICAgICAgICAgICAgICAgICAgIHwgaCAgICAgICB8IDEsIDIsIC4uLiwgMTEsIDEyICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGhvICAgICAgfCAxc3QsIDJuZCwgLi4uLCAxMXRoLCAxMnRoICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBoaCAgICAgIHwgMDEsIDAyLCAuLi4sIDExLCAxMiAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCBIb3VyIFswLTIzXSAgICAgICAgICAgICAgICAgICAgIHwgSCAgICAgICB8IDAsIDEsIDIsIC4uLiwgMjMgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEhvICAgICAgfCAwdGgsIDFzdCwgMm5kLCAuLi4sIDIzcmQgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBISCAgICAgIHwgMDAsIDAxLCAwMiwgLi4uLCAyMyAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCBIb3VyIFswLTExXSAgICAgICAgICAgICAgICAgICAgIHwgSyAgICAgICB8IDEsIDIsIC4uLiwgMTEsIDAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEtvICAgICAgfCAxc3QsIDJuZCwgLi4uLCAxMXRoLCAwdGggICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBLSyAgICAgIHwgMDEsIDAyLCAuLi4sIDExLCAwMCAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCBIb3VyIFsxLTI0XSAgICAgICAgICAgICAgICAgICAgIHwgayAgICAgICB8IDI0LCAxLCAyLCAuLi4sIDIzICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGtvICAgICAgfCAyNHRoLCAxc3QsIDJuZCwgLi4uLCAyM3JkICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBrayAgICAgIHwgMjQsIDAxLCAwMiwgLi4uLCAyMyAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCBNaW51dGUgICAgICAgICAgICAgICAgICAgICAgICAgIHwgbSAgICAgICB8IDAsIDEsIC4uLiwgNTkgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IG1vICAgICAgfCAwdGgsIDFzdCwgLi4uLCA1OXRoICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBtbSAgICAgIHwgMDAsIDAxLCAuLi4sIDU5ICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCBTZWNvbmQgICAgICAgICAgICAgICAgICAgICAgICAgIHwgcyAgICAgICB8IDAsIDEsIC4uLiwgNTkgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHNvICAgICAgfCAwdGgsIDFzdCwgLi4uLCA1OXRoICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBzcyAgICAgIHwgMDAsIDAxLCAuLi4sIDU5ICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCBGcmFjdGlvbiBvZiBzZWNvbmQgICAgICAgICAgICAgIHwgUyAgICAgICB8IDAsIDEsIC4uLiwgOSAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFNTICAgICAgfCAwMCwgMDEsIC4uLiwgOTkgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBTU1MgICAgIHwgMDAwLCAwMDEsIC4uLiwgOTk5ICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgU1NTUyAgICB8IC4uLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IDMgICAgIHxcbiAqIHwgVGltZXpvbmUgKElTTy04NjAxIHcvIFopICAgICAgICB8IFggICAgICAgfCAtMDgsICswNTMwLCBaICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBYWCAgICAgIHwgLTA4MDAsICswNTMwLCBaICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgWFhYICAgICB8IC0wODowMCwgKzA1OjMwLCBaICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFhYWFggICAgfCAtMDgwMCwgKzA1MzAsIFosICsxMjM0NTYgICAgICAgICAgfCAyICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBYWFhYWCAgIHwgLTA4OjAwLCArMDU6MzAsIFosICsxMjozNDo1NiAgICAgIHwgICAgICAgfFxuICogfCBUaW1lem9uZSAoSVNPLTg2MDEgdy9vIFopICAgICAgIHwgeCAgICAgICB8IC0wOCwgKzA1MzAsICswMCAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHh4ICAgICAgfCAtMDgwMCwgKzA1MzAsICswMDAwICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB4eHggICAgIHwgLTA4OjAwLCArMDU6MzAsICswMDowMCAgICAgICAgICAgIHwgMiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgeHh4eCAgICB8IC0wODAwLCArMDUzMCwgKzAwMDAsICsxMjM0NTYgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHh4eHh4ICAgfCAtMDg6MDAsICswNTozMCwgKzAwOjAwLCArMTI6MzQ6NTYgfCAgICAgICB8XG4gKiB8IFRpbWV6b25lIChHTVQpICAgICAgICAgICAgICAgICAgfCBPLi4uT09PIHwgR01ULTgsIEdNVCs1OjMwLCBHTVQrMCAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgT09PTyAgICB8IEdNVC0wODowMCwgR01UKzA1OjMwLCBHTVQrMDA6MDAgICB8IDIgICAgIHxcbiAqIHwgVGltZXpvbmUgKHNwZWNpZmljIG5vbi1sb2NhdC4pICB8IHouLi56enogfCBHTVQtOCwgR01UKzU6MzAsIEdNVCswICAgICAgICAgICAgfCA2ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB6enp6ICAgIHwgR01ULTA4OjAwLCBHTVQrMDU6MzAsIEdNVCswMDowMCAgIHwgMiw2ICAgfFxuICogfCBTZWNvbmRzIHRpbWVzdGFtcCAgICAgICAgICAgICAgIHwgdCAgICAgICB8IDUxMjk2OTUyMCAgICAgICAgICAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHR0ICAgICAgfCAuLi4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAzLDcgICB8XG4gKiB8IE1pbGxpc2Vjb25kcyB0aW1lc3RhbXAgICAgICAgICAgfCBUICAgICAgIHwgNTEyOTY5NTIwOTAwICAgICAgICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgVFQgICAgICB8IC4uLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IDMsNyAgIHxcbiAqIHwgTG9uZyBsb2NhbGl6ZWQgZGF0ZSAgICAgICAgICAgICB8IFAgICAgICAgfCAwNC8yOS8xNDUzICAgICAgICAgICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBQUCAgICAgIHwgQXByIDI5LCAxNDUzICAgICAgICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUFBQICAgICB8IEFwcmlsIDI5dGgsIDE0NTMgICAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFBQUFAgICAgfCBGcmlkYXksIEFwcmlsIDI5dGgsIDE0NTMgICAgICAgICAgfCAyLDcgICB8XG4gKiB8IExvbmcgbG9jYWxpemVkIHRpbWUgICAgICAgICAgICAgfCBwICAgICAgIHwgMTI6MDAgQU0gICAgICAgICAgICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgcHAgICAgICB8IDEyOjAwOjAwIEFNICAgICAgICAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHBwcCAgICAgfCAxMjowMDowMCBBTSBHTVQrMiAgICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBwcHBwICAgIHwgMTI6MDA6MDAgQU0gR01UKzAyOjAwICAgICAgICAgICAgIHwgMiw3ICAgfFxuICogfCBDb21iaW5hdGlvbiBvZiBkYXRlIGFuZCB0aW1lICAgIHwgUHAgICAgICB8IDA0LzI5LzE0NTMsIDEyOjAwIEFNICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFBQcHAgICAgfCBBcHIgMjksIDE0NTMsIDEyOjAwOjAwIEFNICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBQUFBwcHAgIHwgQXByaWwgMjl0aCwgMTQ1MyBhdCAuLi4gICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUFBQUHBwcHB8IEZyaWRheSwgQXByaWwgMjl0aCwgMTQ1MyBhdCAuLi4gICB8IDIsNyAgIHxcbiAqIE5vdGVzOlxuICogMS4gXCJGb3JtYXR0aW5nXCIgdW5pdHMgKGUuZy4gZm9ybWF0dGluZyBxdWFydGVyKSBpbiB0aGUgZGVmYXVsdCBlbi1VUyBsb2NhbGVcbiAqICAgIGFyZSB0aGUgc2FtZSBhcyBcInN0YW5kLWFsb25lXCIgdW5pdHMsIGJ1dCBhcmUgZGlmZmVyZW50IGluIHNvbWUgbGFuZ3VhZ2VzLlxuICogICAgXCJGb3JtYXR0aW5nXCIgdW5pdHMgYXJlIGRlY2xpbmVkIGFjY29yZGluZyB0byB0aGUgcnVsZXMgb2YgdGhlIGxhbmd1YWdlXG4gKiAgICBpbiB0aGUgY29udGV4dCBvZiBhIGRhdGUuIFwiU3RhbmQtYWxvbmVcIiB1bml0cyBhcmUgYWx3YXlzIG5vbWluYXRpdmUgc2luZ3VsYXI6XG4gKlxuICogICAgYGZvcm1hdChuZXcgRGF0ZSgyMDE3LCAxMCwgNiksICdkbyBMTExMJywge2xvY2FsZTogY3N9KSAvLz0+ICc2LiBsaXN0b3BhZCdgXG4gKlxuICogICAgYGZvcm1hdChuZXcgRGF0ZSgyMDE3LCAxMCwgNiksICdkbyBNTU1NJywge2xvY2FsZTogY3N9KSAvLz0+ICc2LiBsaXN0b3BhZHUnYFxuICpcbiAqIDIuIEFueSBzZXF1ZW5jZSBvZiB0aGUgaWRlbnRpY2FsIGxldHRlcnMgaXMgYSBwYXR0ZXJuLCB1bmxlc3MgaXQgaXMgZXNjYXBlZCBieVxuICogICAgdGhlIHNpbmdsZSBxdW90ZSBjaGFyYWN0ZXJzIChzZWUgYmVsb3cpLlxuICogICAgSWYgdGhlIHNlcXVlbmNlIGlzIGxvbmdlciB0aGFuIGxpc3RlZCBpbiB0YWJsZSAoZS5nLiBgRUVFRUVFRUVFRUVgKVxuICogICAgdGhlIG91dHB1dCB3aWxsIGJlIHRoZSBzYW1lIGFzIGRlZmF1bHQgcGF0dGVybiBmb3IgdGhpcyB1bml0LCB1c3VhbGx5XG4gKiAgICB0aGUgbG9uZ2VzdCBvbmUgKGluIGNhc2Ugb2YgSVNPIHdlZWtkYXlzLCBgRUVFRWApLiBEZWZhdWx0IHBhdHRlcm5zIGZvciB1bml0c1xuICogICAgYXJlIG1hcmtlZCB3aXRoIFwiMlwiIGluIHRoZSBsYXN0IGNvbHVtbiBvZiB0aGUgdGFibGUuXG4gKlxuICogICAgYGZvcm1hdChuZXcgRGF0ZSgyMDE3LCAxMCwgNiksICdNTU0nKSAvLz0+ICdOb3YnYFxuICpcbiAqICAgIGBmb3JtYXQobmV3IERhdGUoMjAxNywgMTAsIDYpLCAnTU1NTScpIC8vPT4gJ05vdmVtYmVyJ2BcbiAqXG4gKiAgICBgZm9ybWF0KG5ldyBEYXRlKDIwMTcsIDEwLCA2KSwgJ01NTU1NJykgLy89PiAnTidgXG4gKlxuICogICAgYGZvcm1hdChuZXcgRGF0ZSgyMDE3LCAxMCwgNiksICdNTU1NTU0nKSAvLz0+ICdOb3ZlbWJlcidgXG4gKlxuICogICAgYGZvcm1hdChuZXcgRGF0ZSgyMDE3LCAxMCwgNiksICdNTU1NTU1NJykgLy89PiAnTm92ZW1iZXInYFxuICpcbiAqIDMuIFNvbWUgcGF0dGVybnMgY291bGQgYmUgdW5saW1pdGVkIGxlbmd0aCAoc3VjaCBhcyBgeXl5eXl5eXlgKS5cbiAqICAgIFRoZSBvdXRwdXQgd2lsbCBiZSBwYWRkZWQgd2l0aCB6ZXJvcyB0byBtYXRjaCB0aGUgbGVuZ3RoIG9mIHRoZSBwYXR0ZXJuLlxuICpcbiAqICAgIGBmb3JtYXQobmV3IERhdGUoMjAxNywgMTAsIDYpLCAneXl5eXl5eXknKSAvLz0+ICcwMDAwMjAxNydgXG4gKlxuICogNC4gYFFRUVFRYCBhbmQgYHFxcXFxYCBjb3VsZCBiZSBub3Qgc3RyaWN0bHkgbnVtZXJpY2FsIGluIHNvbWUgbG9jYWxlcy5cbiAqICAgIFRoZXNlIHRva2VucyByZXByZXNlbnQgdGhlIHNob3J0ZXN0IGZvcm0gb2YgdGhlIHF1YXJ0ZXIuXG4gKlxuICogNS4gVGhlIG1haW4gZGlmZmVyZW5jZSBiZXR3ZWVuIGB5YCBhbmQgYHVgIHBhdHRlcm5zIGFyZSBCLkMuIHllYXJzOlxuICpcbiAqICAgIHwgWWVhciB8IGB5YCB8IGB1YCB8XG4gKiAgICB8LS0tLS0tfC0tLS0tfC0tLS0tfFxuICogICAgfCBBQyAxIHwgICAxIHwgICAxIHxcbiAqICAgIHwgQkMgMSB8ICAgMSB8ICAgMCB8XG4gKiAgICB8IEJDIDIgfCAgIDIgfCAgLTEgfFxuICpcbiAqICAgIEFsc28gYHl5YCBhbHdheXMgcmV0dXJucyB0aGUgbGFzdCB0d28gZGlnaXRzIG9mIGEgeWVhcixcbiAqICAgIHdoaWxlIGB1dWAgcGFkcyBzaW5nbGUgZGlnaXQgeWVhcnMgdG8gMiBjaGFyYWN0ZXJzIGFuZCByZXR1cm5zIG90aGVyIHllYXJzIHVuY2hhbmdlZDpcbiAqXG4gKiAgICB8IFllYXIgfCBgeXlgIHwgYHV1YCB8XG4gKiAgICB8LS0tLS0tfC0tLS0tLXwtLS0tLS18XG4gKiAgICB8IDEgICAgfCAgIDAxIHwgICAwMSB8XG4gKiAgICB8IDE0ICAgfCAgIDE0IHwgICAxNCB8XG4gKiAgICB8IDM3NiAgfCAgIDc2IHwgIDM3NiB8XG4gKiAgICB8IDE0NTMgfCAgIDUzIHwgMTQ1MyB8XG4gKlxuICogICAgVGhlIHNhbWUgZGlmZmVyZW5jZSBpcyB0cnVlIGZvciBsb2NhbCBhbmQgSVNPIHdlZWstbnVtYmVyaW5nIHllYXJzIChgWWAgYW5kIGBSYCksXG4gKiAgICBleGNlcHQgbG9jYWwgd2Vlay1udW1iZXJpbmcgeWVhcnMgYXJlIGRlcGVuZGVudCBvbiBgb3B0aW9ucy53ZWVrU3RhcnRzT25gXG4gKiAgICBhbmQgYG9wdGlvbnMuZmlyc3RXZWVrQ29udGFpbnNEYXRlYCAoY29tcGFyZSBbZ2V0SVNPV2Vla1llYXJde0BsaW5rIGh0dHBzOi8vZGF0ZS1mbnMub3JnL2RvY3MvZ2V0SVNPV2Vla1llYXJ9XG4gKiAgICBhbmQgW2dldFdlZWtZZWFyXXtAbGluayBodHRwczovL2RhdGUtZm5zLm9yZy9kb2NzL2dldFdlZWtZZWFyfSkuXG4gKlxuICogNi4gU3BlY2lmaWMgbm9uLWxvY2F0aW9uIHRpbWV6b25lcyBhcmUgY3VycmVudGx5IHVuYXZhaWxhYmxlIGluIGBkYXRlLWZuc2AsXG4gKiAgICBzbyByaWdodCBub3cgdGhlc2UgdG9rZW5zIGZhbGwgYmFjayB0byBHTVQgdGltZXpvbmVzLlxuICpcbiAqIDcuIFRoZXNlIHBhdHRlcm5zIGFyZSBub3QgaW4gdGhlIFVuaWNvZGUgVGVjaG5pY2FsIFN0YW5kYXJkICMzNTpcbiAqICAgIC0gYGlgOiBJU08gZGF5IG9mIHdlZWtcbiAqICAgIC0gYElgOiBJU08gd2VlayBvZiB5ZWFyXG4gKiAgICAtIGBSYDogSVNPIHdlZWstbnVtYmVyaW5nIHllYXJcbiAqICAgIC0gYHRgOiBzZWNvbmRzIHRpbWVzdGFtcFxuICogICAgLSBgVGA6IG1pbGxpc2Vjb25kcyB0aW1lc3RhbXBcbiAqICAgIC0gYG9gOiBvcmRpbmFsIG51bWJlciBtb2RpZmllclxuICogICAgLSBgUGA6IGxvbmcgbG9jYWxpemVkIGRhdGVcbiAqICAgIC0gYHBgOiBsb25nIGxvY2FsaXplZCB0aW1lXG4gKlxuICogOC4gYFlZYCBhbmQgYFlZWVlgIHRva2VucyByZXByZXNlbnQgd2Vlay1udW1iZXJpbmcgeWVhcnMgYnV0IHRoZXkgYXJlIG9mdGVuIGNvbmZ1c2VkIHdpdGggeWVhcnMuXG4gKiAgICBZb3Ugc2hvdWxkIGVuYWJsZSBgb3B0aW9ucy51c2VBZGRpdGlvbmFsV2Vla1llYXJUb2tlbnNgIHRvIHVzZSB0aGVtLiBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9ibG9iL21hc3Rlci9kb2NzL3VuaWNvZGVUb2tlbnMubWRcbiAqXG4gKiA5LiBgRGAgYW5kIGBERGAgdG9rZW5zIHJlcHJlc2VudCBkYXlzIG9mIHRoZSB5ZWFyIGJ1dCB0aGV5IGFyZSBvZnRlbiBjb25mdXNlZCB3aXRoIGRheXMgb2YgdGhlIG1vbnRoLlxuICogICAgWW91IHNob3VsZCBlbmFibGUgYG9wdGlvbnMudXNlQWRkaXRpb25hbERheU9mWWVhclRva2Vuc2AgdG8gdXNlIHRoZW0uIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2Jsb2IvbWFzdGVyL2RvY3MvdW5pY29kZVRva2Vucy5tZFxuICpcbiAqIEBwYXJhbSB7RGF0ZXxOdW1iZXJ9IGRhdGUgLSB0aGUgb3JpZ2luYWwgZGF0ZVxuICogQHBhcmFtIHtTdHJpbmd9IGZvcm1hdCAtIHRoZSBzdHJpbmcgb2YgdG9rZW5zXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdIC0gYW4gb2JqZWN0IHdpdGggb3B0aW9ucy5cbiAqIEBwYXJhbSB7TG9jYWxlfSBbb3B0aW9ucy5sb2NhbGU9ZGVmYXVsdExvY2FsZV0gLSB0aGUgbG9jYWxlIG9iamVjdC4gU2VlIFtMb2NhbGVde0BsaW5rIGh0dHBzOi8vZGF0ZS1mbnMub3JnL2RvY3MvTG9jYWxlfVxuICogQHBhcmFtIHswfDF8MnwzfDR8NXw2fSBbb3B0aW9ucy53ZWVrU3RhcnRzT249MF0gLSB0aGUgaW5kZXggb2YgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2VlayAoMCAtIFN1bmRheSlcbiAqIEBwYXJhbSB7TnVtYmVyfSBbb3B0aW9ucy5maXJzdFdlZWtDb250YWluc0RhdGU9MV0gLSB0aGUgZGF5IG9mIEphbnVhcnksIHdoaWNoIGlzXG4gKiBAcGFyYW0ge0Jvb2xlYW59IFtvcHRpb25zLnVzZUFkZGl0aW9uYWxXZWVrWWVhclRva2Vucz1mYWxzZV0gLSBpZiB0cnVlLCBhbGxvd3MgdXNhZ2Ugb2YgdGhlIHdlZWstbnVtYmVyaW5nIHllYXIgdG9rZW5zIGBZWWAgYW5kIGBZWVlZYDtcbiAqICAgc2VlOiBodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvYmxvYi9tYXN0ZXIvZG9jcy91bmljb2RlVG9rZW5zLm1kXG4gKiBAcGFyYW0ge0Jvb2xlYW59IFtvcHRpb25zLnVzZUFkZGl0aW9uYWxEYXlPZlllYXJUb2tlbnM9ZmFsc2VdIC0gaWYgdHJ1ZSwgYWxsb3dzIHVzYWdlIG9mIHRoZSBkYXkgb2YgeWVhciB0b2tlbnMgYERgIGFuZCBgRERgO1xuICogICBzZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9ibG9iL21hc3Rlci9kb2NzL3VuaWNvZGVUb2tlbnMubWRcbiAqIEByZXR1cm5zIHtTdHJpbmd9IHRoZSBmb3JtYXR0ZWQgZGF0ZSBzdHJpbmdcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gMiBhcmd1bWVudHMgcmVxdWlyZWRcbiAqIEB0aHJvd3Mge1JhbmdlRXJyb3J9IGBkYXRlYCBtdXN0IG5vdCBiZSBJbnZhbGlkIERhdGVcbiAqIEB0aHJvd3Mge1JhbmdlRXJyb3J9IGBvcHRpb25zLmxvY2FsZWAgbXVzdCBjb250YWluIGBsb2NhbGl6ZWAgcHJvcGVydHlcbiAqIEB0aHJvd3Mge1JhbmdlRXJyb3J9IGBvcHRpb25zLmxvY2FsZWAgbXVzdCBjb250YWluIGBmb3JtYXRMb25nYCBwcm9wZXJ0eVxuICogQHRocm93cyB7UmFuZ2VFcnJvcn0gYG9wdGlvbnMud2Vla1N0YXJ0c09uYCBtdXN0IGJlIGJldHdlZW4gMCBhbmQgNlxuICogQHRocm93cyB7UmFuZ2VFcnJvcn0gYG9wdGlvbnMuZmlyc3RXZWVrQ29udGFpbnNEYXRlYCBtdXN0IGJlIGJldHdlZW4gMSBhbmQgN1xuICogQHRocm93cyB7UmFuZ2VFcnJvcn0gdXNlIGB5eXl5YCBpbnN0ZWFkIG9mIGBZWVlZYCBmb3IgZm9ybWF0dGluZyB5ZWFycyB1c2luZyBbZm9ybWF0IHByb3ZpZGVkXSB0byB0aGUgaW5wdXQgW2lucHV0IHByb3ZpZGVkXTsgc2VlOiBodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvYmxvYi9tYXN0ZXIvZG9jcy91bmljb2RlVG9rZW5zLm1kXG4gKiBAdGhyb3dzIHtSYW5nZUVycm9yfSB1c2UgYHl5YCBpbnN0ZWFkIG9mIGBZWWAgZm9yIGZvcm1hdHRpbmcgeWVhcnMgdXNpbmcgW2Zvcm1hdCBwcm92aWRlZF0gdG8gdGhlIGlucHV0IFtpbnB1dCBwcm92aWRlZF07IHNlZTogaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2Jsb2IvbWFzdGVyL2RvY3MvdW5pY29kZVRva2Vucy5tZFxuICogQHRocm93cyB7UmFuZ2VFcnJvcn0gdXNlIGBkYCBpbnN0ZWFkIG9mIGBEYCBmb3IgZm9ybWF0dGluZyBkYXlzIG9mIHRoZSBtb250aCB1c2luZyBbZm9ybWF0IHByb3ZpZGVkXSB0byB0aGUgaW5wdXQgW2lucHV0IHByb3ZpZGVkXTsgc2VlOiBodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvYmxvYi9tYXN0ZXIvZG9jcy91bmljb2RlVG9rZW5zLm1kXG4gKiBAdGhyb3dzIHtSYW5nZUVycm9yfSB1c2UgYGRkYCBpbnN0ZWFkIG9mIGBERGAgZm9yIGZvcm1hdHRpbmcgZGF5cyBvZiB0aGUgbW9udGggdXNpbmcgW2Zvcm1hdCBwcm92aWRlZF0gdG8gdGhlIGlucHV0IFtpbnB1dCBwcm92aWRlZF07IHNlZTogaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2Jsb2IvbWFzdGVyL2RvY3MvdW5pY29kZVRva2Vucy5tZFxuICogQHRocm93cyB7UmFuZ2VFcnJvcn0gZm9ybWF0IHN0cmluZyBjb250YWlucyBhbiB1bmVzY2FwZWQgbGF0aW4gYWxwaGFiZXQgY2hhcmFjdGVyXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIFJlcHJlc2VudCAxMSBGZWJydWFyeSAyMDE0IGluIG1pZGRsZS1lbmRpYW4gZm9ybWF0OlxuICogY29uc3QgcmVzdWx0ID0gZm9ybWF0KG5ldyBEYXRlKDIwMTQsIDEsIDExKSwgJ01NL2RkL3l5eXknKVxuICogLy89PiAnMDIvMTEvMjAxNCdcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gUmVwcmVzZW50IDIgSnVseSAyMDE0IGluIEVzcGVyYW50bzpcbiAqIGltcG9ydCB7IGVvTG9jYWxlIH0gZnJvbSAnZGF0ZS1mbnMvbG9jYWxlL2VvJ1xuICogY29uc3QgcmVzdWx0ID0gZm9ybWF0KG5ldyBEYXRlKDIwMTQsIDYsIDIpLCBcImRvICdkZScgTU1NTSB5eXl5XCIsIHtcbiAqICAgbG9jYWxlOiBlb0xvY2FsZVxuICogfSlcbiAqIC8vPT4gJzItYSBkZSBqdWxpbyAyMDE0J1xuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBFc2NhcGUgc3RyaW5nIGJ5IHNpbmdsZSBxdW90ZSBjaGFyYWN0ZXJzOlxuICogY29uc3QgcmVzdWx0ID0gZm9ybWF0KG5ldyBEYXRlKDIwMTQsIDYsIDIsIDE1KSwgXCJoICdvJydjbG9jaydcIilcbiAqIC8vPT4gXCIzIG8nY2xvY2tcIlxuICovXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGZvcm1hdChkaXJ0eURhdGUsIGRpcnR5Rm9ybWF0U3RyLCBvcHRpb25zKSB7XG4gIHZhciBfcmVmLCBfb3B0aW9ucyRsb2NhbGUsIF9yZWYyLCBfcmVmMywgX3JlZjQsIF9vcHRpb25zJGZpcnN0V2Vla0NvbiwgX29wdGlvbnMkbG9jYWxlMiwgX29wdGlvbnMkbG9jYWxlMiRvcHRpLCBfZGVmYXVsdE9wdGlvbnMkbG9jYWwsIF9kZWZhdWx0T3B0aW9ucyRsb2NhbDIsIF9yZWY1LCBfcmVmNiwgX3JlZjcsIF9vcHRpb25zJHdlZWtTdGFydHNPbiwgX29wdGlvbnMkbG9jYWxlMywgX29wdGlvbnMkbG9jYWxlMyRvcHRpLCBfZGVmYXVsdE9wdGlvbnMkbG9jYWwzLCBfZGVmYXVsdE9wdGlvbnMkbG9jYWw0O1xuICByZXF1aXJlZEFyZ3MoMiwgYXJndW1lbnRzKTtcbiAgdmFyIGZvcm1hdFN0ciA9IFN0cmluZyhkaXJ0eUZvcm1hdFN0cik7XG4gIHZhciBkZWZhdWx0T3B0aW9ucyA9IGdldERlZmF1bHRPcHRpb25zKCk7XG4gIHZhciBsb2NhbGUgPSAoX3JlZiA9IChfb3B0aW9ucyRsb2NhbGUgPSBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMubG9jYWxlKSAhPT0gbnVsbCAmJiBfb3B0aW9ucyRsb2NhbGUgIT09IHZvaWQgMCA/IF9vcHRpb25zJGxvY2FsZSA6IGRlZmF1bHRPcHRpb25zLmxvY2FsZSkgIT09IG51bGwgJiYgX3JlZiAhPT0gdm9pZCAwID8gX3JlZiA6IGRlZmF1bHRMb2NhbGU7XG4gIHZhciBmaXJzdFdlZWtDb250YWluc0RhdGUgPSB0b0ludGVnZXIoKF9yZWYyID0gKF9yZWYzID0gKF9yZWY0ID0gKF9vcHRpb25zJGZpcnN0V2Vla0NvbiA9IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5maXJzdFdlZWtDb250YWluc0RhdGUpICE9PSBudWxsICYmIF9vcHRpb25zJGZpcnN0V2Vla0NvbiAhPT0gdm9pZCAwID8gX29wdGlvbnMkZmlyc3RXZWVrQ29uIDogb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiAoX29wdGlvbnMkbG9jYWxlMiA9IG9wdGlvbnMubG9jYWxlKSA9PT0gbnVsbCB8fCBfb3B0aW9ucyRsb2NhbGUyID09PSB2b2lkIDAgPyB2b2lkIDAgOiAoX29wdGlvbnMkbG9jYWxlMiRvcHRpID0gX29wdGlvbnMkbG9jYWxlMi5vcHRpb25zKSA9PT0gbnVsbCB8fCBfb3B0aW9ucyRsb2NhbGUyJG9wdGkgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9vcHRpb25zJGxvY2FsZTIkb3B0aS5maXJzdFdlZWtDb250YWluc0RhdGUpICE9PSBudWxsICYmIF9yZWY0ICE9PSB2b2lkIDAgPyBfcmVmNCA6IGRlZmF1bHRPcHRpb25zLmZpcnN0V2Vla0NvbnRhaW5zRGF0ZSkgIT09IG51bGwgJiYgX3JlZjMgIT09IHZvaWQgMCA/IF9yZWYzIDogKF9kZWZhdWx0T3B0aW9ucyRsb2NhbCA9IGRlZmF1bHRPcHRpb25zLmxvY2FsZSkgPT09IG51bGwgfHwgX2RlZmF1bHRPcHRpb25zJGxvY2FsID09PSB2b2lkIDAgPyB2b2lkIDAgOiAoX2RlZmF1bHRPcHRpb25zJGxvY2FsMiA9IF9kZWZhdWx0T3B0aW9ucyRsb2NhbC5vcHRpb25zKSA9PT0gbnVsbCB8fCBfZGVmYXVsdE9wdGlvbnMkbG9jYWwyID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZGVmYXVsdE9wdGlvbnMkbG9jYWwyLmZpcnN0V2Vla0NvbnRhaW5zRGF0ZSkgIT09IG51bGwgJiYgX3JlZjIgIT09IHZvaWQgMCA/IF9yZWYyIDogMSk7XG5cbiAgLy8gVGVzdCBpZiB3ZWVrU3RhcnRzT24gaXMgYmV0d2VlbiAxIGFuZCA3IF9hbmRfIGlzIG5vdCBOYU5cbiAgaWYgKCEoZmlyc3RXZWVrQ29udGFpbnNEYXRlID49IDEgJiYgZmlyc3RXZWVrQ29udGFpbnNEYXRlIDw9IDcpKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ2ZpcnN0V2Vla0NvbnRhaW5zRGF0ZSBtdXN0IGJlIGJldHdlZW4gMSBhbmQgNyBpbmNsdXNpdmVseScpO1xuICB9XG4gIHZhciB3ZWVrU3RhcnRzT24gPSB0b0ludGVnZXIoKF9yZWY1ID0gKF9yZWY2ID0gKF9yZWY3ID0gKF9vcHRpb25zJHdlZWtTdGFydHNPbiA9IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy53ZWVrU3RhcnRzT24pICE9PSBudWxsICYmIF9vcHRpb25zJHdlZWtTdGFydHNPbiAhPT0gdm9pZCAwID8gX29wdGlvbnMkd2Vla1N0YXJ0c09uIDogb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiAoX29wdGlvbnMkbG9jYWxlMyA9IG9wdGlvbnMubG9jYWxlKSA9PT0gbnVsbCB8fCBfb3B0aW9ucyRsb2NhbGUzID09PSB2b2lkIDAgPyB2b2lkIDAgOiAoX29wdGlvbnMkbG9jYWxlMyRvcHRpID0gX29wdGlvbnMkbG9jYWxlMy5vcHRpb25zKSA9PT0gbnVsbCB8fCBfb3B0aW9ucyRsb2NhbGUzJG9wdGkgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9vcHRpb25zJGxvY2FsZTMkb3B0aS53ZWVrU3RhcnRzT24pICE9PSBudWxsICYmIF9yZWY3ICE9PSB2b2lkIDAgPyBfcmVmNyA6IGRlZmF1bHRPcHRpb25zLndlZWtTdGFydHNPbikgIT09IG51bGwgJiYgX3JlZjYgIT09IHZvaWQgMCA/IF9yZWY2IDogKF9kZWZhdWx0T3B0aW9ucyRsb2NhbDMgPSBkZWZhdWx0T3B0aW9ucy5sb2NhbGUpID09PSBudWxsIHx8IF9kZWZhdWx0T3B0aW9ucyRsb2NhbDMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IChfZGVmYXVsdE9wdGlvbnMkbG9jYWw0ID0gX2RlZmF1bHRPcHRpb25zJGxvY2FsMy5vcHRpb25zKSA9PT0gbnVsbCB8fCBfZGVmYXVsdE9wdGlvbnMkbG9jYWw0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZGVmYXVsdE9wdGlvbnMkbG9jYWw0LndlZWtTdGFydHNPbikgIT09IG51bGwgJiYgX3JlZjUgIT09IHZvaWQgMCA/IF9yZWY1IDogMCk7XG5cbiAgLy8gVGVzdCBpZiB3ZWVrU3RhcnRzT24gaXMgYmV0d2VlbiAwIGFuZCA2IF9hbmRfIGlzIG5vdCBOYU5cbiAgaWYgKCEod2Vla1N0YXJ0c09uID49IDAgJiYgd2Vla1N0YXJ0c09uIDw9IDYpKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ3dlZWtTdGFydHNPbiBtdXN0IGJlIGJldHdlZW4gMCBhbmQgNiBpbmNsdXNpdmVseScpO1xuICB9XG4gIGlmICghbG9jYWxlLmxvY2FsaXplKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ2xvY2FsZSBtdXN0IGNvbnRhaW4gbG9jYWxpemUgcHJvcGVydHknKTtcbiAgfVxuICBpZiAoIWxvY2FsZS5mb3JtYXRMb25nKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ2xvY2FsZSBtdXN0IGNvbnRhaW4gZm9ybWF0TG9uZyBwcm9wZXJ0eScpO1xuICB9XG4gIHZhciBvcmlnaW5hbERhdGUgPSB0b0RhdGUoZGlydHlEYXRlKTtcbiAgaWYgKCFpc1ZhbGlkKG9yaWdpbmFsRGF0ZSkpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignSW52YWxpZCB0aW1lIHZhbHVlJyk7XG4gIH1cblxuICAvLyBDb252ZXJ0IHRoZSBkYXRlIGluIHN5c3RlbSB0aW1lem9uZSB0byB0aGUgc2FtZSBkYXRlIGluIFVUQyswMDowMCB0aW1lem9uZS5cbiAgLy8gVGhpcyBlbnN1cmVzIHRoYXQgd2hlbiBVVEMgZnVuY3Rpb25zIHdpbGwgYmUgaW1wbGVtZW50ZWQsIGxvY2FsZXMgd2lsbCBiZSBjb21wYXRpYmxlIHdpdGggdGhlbS5cbiAgLy8gU2VlIGFuIGlzc3VlIGFib3V0IFVUQyBmdW5jdGlvbnM6IGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9pc3N1ZXMvMzc2XG4gIHZhciB0aW1lem9uZU9mZnNldCA9IGdldFRpbWV6b25lT2Zmc2V0SW5NaWxsaXNlY29uZHMob3JpZ2luYWxEYXRlKTtcbiAgdmFyIHV0Y0RhdGUgPSBzdWJNaWxsaXNlY29uZHMob3JpZ2luYWxEYXRlLCB0aW1lem9uZU9mZnNldCk7XG4gIHZhciBmb3JtYXR0ZXJPcHRpb25zID0ge1xuICAgIGZpcnN0V2Vla0NvbnRhaW5zRGF0ZTogZmlyc3RXZWVrQ29udGFpbnNEYXRlLFxuICAgIHdlZWtTdGFydHNPbjogd2Vla1N0YXJ0c09uLFxuICAgIGxvY2FsZTogbG9jYWxlLFxuICAgIF9vcmlnaW5hbERhdGU6IG9yaWdpbmFsRGF0ZVxuICB9O1xuICB2YXIgcmVzdWx0ID0gZm9ybWF0U3RyLm1hdGNoKGxvbmdGb3JtYXR0aW5nVG9rZW5zUmVnRXhwKS5tYXAoZnVuY3Rpb24gKHN1YnN0cmluZykge1xuICAgIHZhciBmaXJzdENoYXJhY3RlciA9IHN1YnN0cmluZ1swXTtcbiAgICBpZiAoZmlyc3RDaGFyYWN0ZXIgPT09ICdwJyB8fCBmaXJzdENoYXJhY3RlciA9PT0gJ1AnKSB7XG4gICAgICB2YXIgbG9uZ0Zvcm1hdHRlciA9IGxvbmdGb3JtYXR0ZXJzW2ZpcnN0Q2hhcmFjdGVyXTtcbiAgICAgIHJldHVybiBsb25nRm9ybWF0dGVyKHN1YnN0cmluZywgbG9jYWxlLmZvcm1hdExvbmcpO1xuICAgIH1cbiAgICByZXR1cm4gc3Vic3RyaW5nO1xuICB9KS5qb2luKCcnKS5tYXRjaChmb3JtYXR0aW5nVG9rZW5zUmVnRXhwKS5tYXAoZnVuY3Rpb24gKHN1YnN0cmluZykge1xuICAgIC8vIFJlcGxhY2UgdHdvIHNpbmdsZSBxdW90ZSBjaGFyYWN0ZXJzIHdpdGggb25lIHNpbmdsZSBxdW90ZSBjaGFyYWN0ZXJcbiAgICBpZiAoc3Vic3RyaW5nID09PSBcIicnXCIpIHtcbiAgICAgIHJldHVybiBcIidcIjtcbiAgICB9XG4gICAgdmFyIGZpcnN0Q2hhcmFjdGVyID0gc3Vic3RyaW5nWzBdO1xuICAgIGlmIChmaXJzdENoYXJhY3RlciA9PT0gXCInXCIpIHtcbiAgICAgIHJldHVybiBjbGVhbkVzY2FwZWRTdHJpbmcoc3Vic3RyaW5nKTtcbiAgICB9XG4gICAgdmFyIGZvcm1hdHRlciA9IGZvcm1hdHRlcnNbZmlyc3RDaGFyYWN0ZXJdO1xuICAgIGlmIChmb3JtYXR0ZXIpIHtcbiAgICAgIGlmICghKG9wdGlvbnMgIT09IG51bGwgJiYgb3B0aW9ucyAhPT0gdm9pZCAwICYmIG9wdGlvbnMudXNlQWRkaXRpb25hbFdlZWtZZWFyVG9rZW5zKSAmJiBpc1Byb3RlY3RlZFdlZWtZZWFyVG9rZW4oc3Vic3RyaW5nKSkge1xuICAgICAgICB0aHJvd1Byb3RlY3RlZEVycm9yKHN1YnN0cmluZywgZGlydHlGb3JtYXRTdHIsIFN0cmluZyhkaXJ0eURhdGUpKTtcbiAgICAgIH1cbiAgICAgIGlmICghKG9wdGlvbnMgIT09IG51bGwgJiYgb3B0aW9ucyAhPT0gdm9pZCAwICYmIG9wdGlvbnMudXNlQWRkaXRpb25hbERheU9mWWVhclRva2VucykgJiYgaXNQcm90ZWN0ZWREYXlPZlllYXJUb2tlbihzdWJzdHJpbmcpKSB7XG4gICAgICAgIHRocm93UHJvdGVjdGVkRXJyb3Ioc3Vic3RyaW5nLCBkaXJ0eUZvcm1hdFN0ciwgU3RyaW5nKGRpcnR5RGF0ZSkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZvcm1hdHRlcih1dGNEYXRlLCBzdWJzdHJpbmcsIGxvY2FsZS5sb2NhbGl6ZSwgZm9ybWF0dGVyT3B0aW9ucyk7XG4gICAgfVxuICAgIGlmIChmaXJzdENoYXJhY3Rlci5tYXRjaCh1bmVzY2FwZWRMYXRpbkNoYXJhY3RlclJlZ0V4cCkpIHtcbiAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdGb3JtYXQgc3RyaW5nIGNvbnRhaW5zIGFuIHVuZXNjYXBlZCBsYXRpbiBhbHBoYWJldCBjaGFyYWN0ZXIgYCcgKyBmaXJzdENoYXJhY3RlciArICdgJyk7XG4gICAgfVxuICAgIHJldHVybiBzdWJzdHJpbmc7XG4gIH0pLmpvaW4oJycpO1xuICByZXR1cm4gcmVzdWx0O1xufVxuZnVuY3Rpb24gY2xlYW5Fc2NhcGVkU3RyaW5nKGlucHV0KSB7XG4gIHZhciBtYXRjaGVkID0gaW5wdXQubWF0Y2goZXNjYXBlZFN0cmluZ1JlZ0V4cCk7XG4gIGlmICghbWF0Y2hlZCkge1xuICAgIHJldHVybiBpbnB1dDtcbiAgfVxuICByZXR1cm4gbWF0Y2hlZFsxXS5yZXBsYWNlKGRvdWJsZVF1b3RlUmVnRXhwLCBcIidcIik7XG59IiwiaW1wb3J0IGlzRGF0ZSBmcm9tIFwiLi4vaXNEYXRlL2luZGV4LmpzXCI7XG5pbXBvcnQgdG9EYXRlIGZyb20gXCIuLi90b0RhdGUvaW5kZXguanNcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL19saWIvcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7XG4vKipcbiAqIEBuYW1lIGlzVmFsaWRcbiAqIEBjYXRlZ29yeSBDb21tb24gSGVscGVyc1xuICogQHN1bW1hcnkgSXMgdGhlIGdpdmVuIGRhdGUgdmFsaWQ/XG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBSZXR1cm5zIGZhbHNlIGlmIGFyZ3VtZW50IGlzIEludmFsaWQgRGF0ZSBhbmQgdHJ1ZSBvdGhlcndpc2UuXG4gKiBBcmd1bWVudCBpcyBjb252ZXJ0ZWQgdG8gRGF0ZSB1c2luZyBgdG9EYXRlYC4gU2VlIFt0b0RhdGVde0BsaW5rIGh0dHBzOi8vZGF0ZS1mbnMub3JnL2RvY3MvdG9EYXRlfVxuICogSW52YWxpZCBEYXRlIGlzIGEgRGF0ZSwgd2hvc2UgdGltZSB2YWx1ZSBpcyBOYU4uXG4gKlxuICogVGltZSB2YWx1ZSBvZiBEYXRlOiBodHRwOi8vZXM1LmdpdGh1Yi5pby8jeDE1LjkuMS4xXG4gKlxuICogQHBhcmFtIHsqfSBkYXRlIC0gdGhlIGRhdGUgdG8gY2hlY2tcbiAqIEByZXR1cm5zIHtCb29sZWFufSB0aGUgZGF0ZSBpcyB2YWxpZFxuICogQHRocm93cyB7VHlwZUVycm9yfSAxIGFyZ3VtZW50IHJlcXVpcmVkXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIEZvciB0aGUgdmFsaWQgZGF0ZTpcbiAqIGNvbnN0IHJlc3VsdCA9IGlzVmFsaWQobmV3IERhdGUoMjAxNCwgMSwgMzEpKVxuICogLy89PiB0cnVlXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIEZvciB0aGUgdmFsdWUsIGNvbnZlcnRhYmxlIGludG8gYSBkYXRlOlxuICogY29uc3QgcmVzdWx0ID0gaXNWYWxpZCgxMzkzODA0ODAwMDAwKVxuICogLy89PiB0cnVlXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIEZvciB0aGUgaW52YWxpZCBkYXRlOlxuICogY29uc3QgcmVzdWx0ID0gaXNWYWxpZChuZXcgRGF0ZSgnJykpXG4gKiAvLz0+IGZhbHNlXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGlzVmFsaWQoZGlydHlEYXRlKSB7XG4gIHJlcXVpcmVkQXJncygxLCBhcmd1bWVudHMpO1xuICBpZiAoIWlzRGF0ZShkaXJ0eURhdGUpICYmIHR5cGVvZiBkaXJ0eURhdGUgIT09ICdudW1iZXInKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHZhciBkYXRlID0gdG9EYXRlKGRpcnR5RGF0ZSk7XG4gIHJldHVybiAhaXNOYU4oTnVtYmVyKGRhdGUpKTtcbn0iLCJpbXBvcnQgX3R5cGVvZiBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vdHlwZW9mXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9fbGliL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xuLyoqXG4gKiBAbmFtZSBpc0RhdGVcbiAqIEBjYXRlZ29yeSBDb21tb24gSGVscGVyc1xuICogQHN1bW1hcnkgSXMgdGhlIGdpdmVuIHZhbHVlIGEgZGF0ZT9cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgZ2l2ZW4gdmFsdWUgaXMgYW4gaW5zdGFuY2Ugb2YgRGF0ZS4gVGhlIGZ1bmN0aW9uIHdvcmtzIGZvciBkYXRlcyB0cmFuc2ZlcnJlZCBhY3Jvc3MgaWZyYW1lcy5cbiAqXG4gKiBAcGFyYW0geyp9IHZhbHVlIC0gdGhlIHZhbHVlIHRvIGNoZWNrXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gdHJ1ZSBpZiB0aGUgZ2l2ZW4gdmFsdWUgaXMgYSBkYXRlXG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IDEgYXJndW1lbnRzIHJlcXVpcmVkXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIEZvciBhIHZhbGlkIGRhdGU6XG4gKiBjb25zdCByZXN1bHQgPSBpc0RhdGUobmV3IERhdGUoKSlcbiAqIC8vPT4gdHJ1ZVxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBGb3IgYW4gaW52YWxpZCBkYXRlOlxuICogY29uc3QgcmVzdWx0ID0gaXNEYXRlKG5ldyBEYXRlKE5hTikpXG4gKiAvLz0+IHRydWVcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gRm9yIHNvbWUgdmFsdWU6XG4gKiBjb25zdCByZXN1bHQgPSBpc0RhdGUoJzIwMTQtMDItMzEnKVxuICogLy89PiBmYWxzZVxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBGb3IgYW4gb2JqZWN0OlxuICogY29uc3QgcmVzdWx0ID0gaXNEYXRlKHt9KVxuICogLy89PiBmYWxzZVxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBpc0RhdGUodmFsdWUpIHtcbiAgcmVxdWlyZWRBcmdzKDEsIGFyZ3VtZW50cyk7XG4gIHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIERhdGUgfHwgX3R5cGVvZih2YWx1ZSkgPT09ICdvYmplY3QnICYmIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSkgPT09ICdbb2JqZWN0IERhdGVdJztcbn0iLCIvKipcbiAqIEdvb2dsZSBDaHJvbWUgYXMgb2YgNjcuMC4zMzk2Ljg3IGludHJvZHVjZWQgdGltZXpvbmVzIHdpdGggb2Zmc2V0IHRoYXQgaW5jbHVkZXMgc2Vjb25kcy5cbiAqIFRoZXkgdXN1YWxseSBhcHBlYXIgZm9yIGRhdGVzIHRoYXQgZGVub3RlIHRpbWUgYmVmb3JlIHRoZSB0aW1lem9uZXMgd2VyZSBpbnRyb2R1Y2VkXG4gKiAoZS5nLiBmb3IgJ0V1cm9wZS9QcmFndWUnIHRpbWV6b25lIHRoZSBvZmZzZXQgaXMgR01UKzAwOjU3OjQ0IGJlZm9yZSAxIE9jdG9iZXIgMTg5MVxuICogYW5kIEdNVCswMTowMDowMCBhZnRlciB0aGF0IGRhdGUpXG4gKlxuICogRGF0ZSNnZXRUaW1lem9uZU9mZnNldCByZXR1cm5zIHRoZSBvZmZzZXQgaW4gbWludXRlcyBhbmQgd291bGQgcmV0dXJuIDU3IGZvciB0aGUgZXhhbXBsZSBhYm92ZSxcbiAqIHdoaWNoIHdvdWxkIGxlYWQgdG8gaW5jb3JyZWN0IGNhbGN1bGF0aW9ucy5cbiAqXG4gKiBUaGlzIGZ1bmN0aW9uIHJldHVybnMgdGhlIHRpbWV6b25lIG9mZnNldCBpbiBtaWxsaXNlY29uZHMgdGhhdCB0YWtlcyBzZWNvbmRzIGluIGFjY291bnQuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFRpbWV6b25lT2Zmc2V0SW5NaWxsaXNlY29uZHMoZGF0ZSkge1xuICB2YXIgdXRjRGF0ZSA9IG5ldyBEYXRlKERhdGUuVVRDKGRhdGUuZ2V0RnVsbFllYXIoKSwgZGF0ZS5nZXRNb250aCgpLCBkYXRlLmdldERhdGUoKSwgZGF0ZS5nZXRIb3VycygpLCBkYXRlLmdldE1pbnV0ZXMoKSwgZGF0ZS5nZXRTZWNvbmRzKCksIGRhdGUuZ2V0TWlsbGlzZWNvbmRzKCkpKTtcbiAgdXRjRGF0ZS5zZXRVVENGdWxsWWVhcihkYXRlLmdldEZ1bGxZZWFyKCkpO1xuICByZXR1cm4gZGF0ZS5nZXRUaW1lKCkgLSB1dGNEYXRlLmdldFRpbWUoKTtcbn0iLCJpbXBvcnQgYWRkTWlsbGlzZWNvbmRzIGZyb20gXCIuLi9hZGRNaWxsaXNlY29uZHMvaW5kZXguanNcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL19saWIvcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7XG5pbXBvcnQgdG9JbnRlZ2VyIGZyb20gXCIuLi9fbGliL3RvSW50ZWdlci9pbmRleC5qc1wiO1xuLyoqXG4gKiBAbmFtZSBzdWJNaWxsaXNlY29uZHNcbiAqIEBjYXRlZ29yeSBNaWxsaXNlY29uZCBIZWxwZXJzXG4gKiBAc3VtbWFyeSBTdWJ0cmFjdCB0aGUgc3BlY2lmaWVkIG51bWJlciBvZiBtaWxsaXNlY29uZHMgZnJvbSB0aGUgZ2l2ZW4gZGF0ZS5cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFN1YnRyYWN0IHRoZSBzcGVjaWZpZWQgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyBmcm9tIHRoZSBnaXZlbiBkYXRlLlxuICpcbiAqIEBwYXJhbSB7RGF0ZXxOdW1iZXJ9IGRhdGUgLSB0aGUgZGF0ZSB0byBiZSBjaGFuZ2VkXG4gKiBAcGFyYW0ge051bWJlcn0gYW1vdW50IC0gdGhlIGFtb3VudCBvZiBtaWxsaXNlY29uZHMgdG8gYmUgc3VidHJhY3RlZC4gUG9zaXRpdmUgZGVjaW1hbHMgd2lsbCBiZSByb3VuZGVkIHVzaW5nIGBNYXRoLmZsb29yYCwgZGVjaW1hbHMgbGVzcyB0aGFuIHplcm8gd2lsbCBiZSByb3VuZGVkIHVzaW5nIGBNYXRoLmNlaWxgLlxuICogQHJldHVybnMge0RhdGV9IHRoZSBuZXcgZGF0ZSB3aXRoIHRoZSBtaWxsaXNlY29uZHMgc3VidHJhY3RlZFxuICogQHRocm93cyB7VHlwZUVycm9yfSAyIGFyZ3VtZW50cyByZXF1aXJlZFxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBTdWJ0cmFjdCA3NTAgbWlsbGlzZWNvbmRzIGZyb20gMTAgSnVseSAyMDE0IDEyOjQ1OjMwLjAwMDpcbiAqIGNvbnN0IHJlc3VsdCA9IHN1Yk1pbGxpc2Vjb25kcyhuZXcgRGF0ZSgyMDE0LCA2LCAxMCwgMTIsIDQ1LCAzMCwgMCksIDc1MClcbiAqIC8vPT4gVGh1IEp1bCAxMCAyMDE0IDEyOjQ1OjI5LjI1MFxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzdWJNaWxsaXNlY29uZHMoZGlydHlEYXRlLCBkaXJ0eUFtb3VudCkge1xuICByZXF1aXJlZEFyZ3MoMiwgYXJndW1lbnRzKTtcbiAgdmFyIGFtb3VudCA9IHRvSW50ZWdlcihkaXJ0eUFtb3VudCk7XG4gIHJldHVybiBhZGRNaWxsaXNlY29uZHMoZGlydHlEYXRlLCAtYW1vdW50KTtcbn0iLCJpbXBvcnQgdG9JbnRlZ2VyIGZyb20gXCIuLi9fbGliL3RvSW50ZWdlci9pbmRleC5qc1wiO1xuaW1wb3J0IHRvRGF0ZSBmcm9tIFwiLi4vdG9EYXRlL2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9fbGliL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xuLyoqXG4gKiBAbmFtZSBhZGRNaWxsaXNlY29uZHNcbiAqIEBjYXRlZ29yeSBNaWxsaXNlY29uZCBIZWxwZXJzXG4gKiBAc3VtbWFyeSBBZGQgdGhlIHNwZWNpZmllZCBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRvIHRoZSBnaXZlbiBkYXRlLlxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogQWRkIHRoZSBzcGVjaWZpZWQgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyB0byB0aGUgZ2l2ZW4gZGF0ZS5cbiAqXG4gKiBAcGFyYW0ge0RhdGV8TnVtYmVyfSBkYXRlIC0gdGhlIGRhdGUgdG8gYmUgY2hhbmdlZFxuICogQHBhcmFtIHtOdW1iZXJ9IGFtb3VudCAtIHRoZSBhbW91bnQgb2YgbWlsbGlzZWNvbmRzIHRvIGJlIGFkZGVkLiBQb3NpdGl2ZSBkZWNpbWFscyB3aWxsIGJlIHJvdW5kZWQgdXNpbmcgYE1hdGguZmxvb3JgLCBkZWNpbWFscyBsZXNzIHRoYW4gemVybyB3aWxsIGJlIHJvdW5kZWQgdXNpbmcgYE1hdGguY2VpbGAuXG4gKiBAcmV0dXJucyB7RGF0ZX0gdGhlIG5ldyBkYXRlIHdpdGggdGhlIG1pbGxpc2Vjb25kcyBhZGRlZFxuICogQHRocm93cyB7VHlwZUVycm9yfSAyIGFyZ3VtZW50cyByZXF1aXJlZFxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBBZGQgNzUwIG1pbGxpc2Vjb25kcyB0byAxMCBKdWx5IDIwMTQgMTI6NDU6MzAuMDAwOlxuICogY29uc3QgcmVzdWx0ID0gYWRkTWlsbGlzZWNvbmRzKG5ldyBEYXRlKDIwMTQsIDYsIDEwLCAxMiwgNDUsIDMwLCAwKSwgNzUwKVxuICogLy89PiBUaHUgSnVsIDEwIDIwMTQgMTI6NDU6MzAuNzUwXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGFkZE1pbGxpc2Vjb25kcyhkaXJ0eURhdGUsIGRpcnR5QW1vdW50KSB7XG4gIHJlcXVpcmVkQXJncygyLCBhcmd1bWVudHMpO1xuICB2YXIgdGltZXN0YW1wID0gdG9EYXRlKGRpcnR5RGF0ZSkuZ2V0VGltZSgpO1xuICB2YXIgYW1vdW50ID0gdG9JbnRlZ2VyKGRpcnR5QW1vdW50KTtcbiAgcmV0dXJuIG5ldyBEYXRlKHRpbWVzdGFtcCArIGFtb3VudCk7XG59IiwiaW1wb3J0IGZvcm1hdCBmcm9tIFwiZGF0ZS1mbnMvZm9ybWF0XCJcclxuXHJcbmZ1bmN0aW9uIGdlbmVyYXRlRWxlbWVudCh0YWcsIGNscz0nJywgaWQ9JycsIGlubmVySFRNTD0nJykge1xyXG4gICAgY29uc3QgZWxlbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQodGFnKVxyXG5cclxuICAgIGlmICh0YWcgPT0gJ2lucHV0Jykge1xyXG4gICAgICAgIGVsZW0udHlwZSA9IGNsc1xyXG4gICAgICAgIGlmIChjbHMgPT0gJ3RleHQnKSB7XHJcbiAgICAgICAgICAgIGVsZW0uaWQgPSBpZFxyXG4gICAgICAgICAgICBlbGVtLm5hbWUgPSBpZFxyXG4gICAgICAgICAgICBlbGVtLnBsYWNlaG9sZGVyID0gaW5uZXJIVE1MXHJcbiAgICAgICAgICAgIHJldHVybiBlbGVtXHJcbiAgICAgICAgfSBlbHNlIGlmIChjbHMgPT0gJ3JhZGlvJykge1xyXG4gICAgICAgICAgICBlbGVtLmlkID0gaWRcclxuICAgICAgICAgICAgZWxlbS52YWx1ZSA9IGlkLnNsaWNlKC0xKVxyXG4gICAgICAgICAgICBlbGVtLm5hbWUgPSBpbm5lckhUTUxcclxuICAgICAgICAgICAgcmV0dXJuIGVsZW1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGNscykge1xyXG4gICAgICAgIGlmIChjbHMuaW5jbHVkZXMoJyAnKSkge1xyXG4gICAgICAgICAgICBjb25zdCBjbHNMaXN0ID0gY2xzLnNwbGl0KCcgJylcclxuICAgICAgICAgICAgZm9yIChjb25zdCBjIGluIGNsc0xpc3QpIHtcclxuICAgICAgICAgICAgICAgIGVsZW0uY2xhc3NMaXN0LmFkZChjbHNMaXN0W2NdKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgZWxlbS5jbGFzc0xpc3QuYWRkKGNscylcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHRhZyA9PSAnc2VsZWN0Jykge1xyXG4gICAgICAgIGVsZW0ubmFtZSA9IGlubmVySFRNTFxyXG4gICAgICAgIGVsZW0uaWQgPSBpZFxyXG4gICAgfVxyXG5cclxuICAgIGlmICh0YWcgPT0gJ29wdGlvbicpIHtcclxuICAgICAgICBlbGVtLmlkID0gaWRcclxuICAgICAgICBlbGVtLnZhbHVlID0gaW5uZXJIVE1MXHJcbiAgICAgICAgZWxlbS5pbm5lckhUTUwgPSBpbm5lckhUTUxcclxuICAgIH1cclxuXHJcbiAgICBpZiAodGFnID09J3RleHRhcmVhJykge1xyXG4gICAgICAgIGVsZW0uaWQgPSBpZFxyXG4gICAgICAgIGVsZW0ubmFtZSA9IGlkXHJcbiAgICAgICAgZWxlbS5pbm5lckhUTUwgPSBpbm5lckhUTUxcclxuICAgIH1cclxuXHJcbiAgICBpZiAodGFnID09ICdsYWJlbCcpIHtcclxuICAgICAgICBlbGVtLmh0bWxGb3IgPSBpZFxyXG4gICAgICAgIGVsZW0uaW5uZXJIVE1MID0gaW5uZXJIVE1MXHJcbiAgICAgICAgcmV0dXJuIGVsZW1cclxuICAgIH1cclxuXHJcbiAgICBpZiAodGFnID09ICdpbWcnKSB7XHJcbiAgICAgICAgZWxlbS5zcmMgPSBpZFxyXG4gICAgICAgIGVsZW0uYWx0ID0gaW5uZXJIVE1MXHJcbiAgICAgICAgcmV0dXJuIGVsZW1cclxuICAgIH1cclxuXHJcbiAgICBpZiAodGFnID09ICdhJykge1xyXG4gICAgICAgIGVsZW0uaHJlZiA9IGlkXHJcbiAgICAgICAgZWxlbS5pbm5lckhUTUwgPSBpbm5lckhUTUxcclxuICAgICAgICByZXR1cm4gZWxlbVxyXG4gICAgfVxyXG5cclxuICAgIGlmICh0YWcgPT0gJ2Zvcm0nKSB7XHJcbiAgICAgICAgZWxlbS5pZCA9IGlkXHJcbiAgICAgICAgcmV0dXJuIGVsZW1cclxuICAgIH1cclxuXHJcbiAgICBpZiAoaWQpIHtcclxuICAgICAgICBlbGVtLmlkID0gaWQgXHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGlubmVySFRNTCkge1xyXG4gICAgICAgIGVsZW0uaW5uZXJIVE1MID0gaW5uZXJIVE1MXHJcbiAgICB9XHJcbiAgICBcclxuICAgIHJldHVybiBlbGVtXHJcbn1cclxuXHJcbmZ1bmN0aW9uIGZvcm1hdERhdGUoZGF0ZSkge1xyXG4gICAgaWYgKGRhdGUpIHtcclxuICAgICAgICByZXR1cm4gZm9ybWF0KG5ldyBEYXRlKGRhdGUpLCdkZC9NTS95eScpXHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIHJldHVybiAnJ1xyXG4gICAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBjbGVhclNlbGVjdGVkKGVsZW1MaXN0KSB7XHJcbiAgICBlbGVtTGlzdC5mb3JFYWNoKGVsZW09PntcclxuICAgICAgICBlbGVtLmNsYXNzTGlzdC5yZW1vdmUoJ3NlbGVjdGVkJylcclxuICAgIH0pXHJcbn1cclxuXHJcbmV4cG9ydCB7Z2VuZXJhdGVFbGVtZW50LCBmb3JtYXREYXRlLCBjbGVhclNlbGVjdGVkfSIsImNvbnN0IHJlZCA9ICAnI0UwMTc1QSc7XHJcbmNvbnN0IG9yYW5nZSA9ICcjRUNCMzI5JztcclxuY29uc3QgYmx1ZSA9ICcjMzNDNkYxJztcclxuY29uc3QgZ3JlZW4gPSAnIzI5Qjc3Ric7XHJcblxyXG5leHBvcnQge3JlZCwgb3JhbmdlLCBibHVlLCBncmVlbn0iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBUb2RvIHtcclxuICAgIGlkID0gRGF0ZS5ub3coKVxyXG5cclxuICAgIGNvbnN0cnVjdG9yICh0aXRsZSwgZGVzYywgZHVlRGF0ZSwgcHJpb3JpdHkpIHtcclxuICAgICAgICB0aGlzLnRpdGxlID0gdGl0bGVcclxuICAgICAgICB0aGlzLmRlc2MgPSBkZXNjXHJcbiAgICAgICAgdGhpcy5kdWVEYXRlID0gZHVlRGF0ZVxyXG4gICAgICAgIHRoaXMucHJpb3JpdHkgPSBwcmlvcml0eVxyXG4gICAgfVxyXG5cclxuICAgIGdldCB0aXRsZSgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fdGl0bGVcclxuICAgIH1cclxuICAgIHNldCB0aXRsZShuZXdUaXRsZSkge1xyXG4gICAgICAgIHRoaXMuX3RpdGxlID0gbmV3VGl0bGVcclxuICAgIH1cclxuXHJcbiAgICBnZXQgZGVzYygpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fZGVzY1xyXG4gICAgfVxyXG4gICAgc2V0IGRlc2MobmV3RGVzYykge1xyXG4gICAgICAgIHRoaXMuX2Rlc2MgPSBuZXdEZXNjXHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IGR1ZURhdGUoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2R1ZURhdGVcclxuICAgIH1cclxuICAgIHNldCBkdWVEYXRlKG5ld0R1ZURhdGUpIHtcclxuICAgICAgICB0aGlzLl9kdWVEYXRlID0gbmV3RHVlRGF0ZVxyXG4gICAgfVxyXG5cclxuICAgIGdldCBwcmlvcml0eSgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fcHJpb3JpdHlcclxuICAgIH1cclxuICAgIHNldCBwcmlvcml0eShuZXdQcmlvcml0eSkge1xyXG4gICAgICAgIHRoaXMuX3ByaW9yaXR5ID0gbmV3UHJpb3JpdHlcclxuICAgIH1cclxuXHJcbiAgICBnZXQgaWQoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2lkXHJcbiAgICB9XHJcblxyXG4gICAgdG9KU09OKCkge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIHRpdGxlOiB0aGlzLnRpdGxlLFxyXG4gICAgICAgICAgICBkZXNjOiB0aGlzLmRlc2MsXHJcbiAgICAgICAgICAgIGR1ZURhdGU6IHRoaXMuZHVlRGF0ZSxcclxuICAgICAgICAgICAgcHJpb3JpdHk6IHRoaXMucHJpb3JpdHksXHJcbiAgICAgICAgICAgIGlkOiB0aGlzLmlkXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59IiwiaW1wb3J0IHRvZG9MaXN0IGZyb20gXCIuLlwiO1xyXG5cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGxpc3RQcm9qZWN0cygpIHtcclxuICAgIGNvbnN0IGFyciA9IFtdXHJcbiAgICBmb3IgKGNvbnN0IGlkeCBpbiB0b2RvTGlzdCkge1xyXG4gICAgICAgIGFyci5wdXNoKE9iamVjdC5rZXlzKHRvZG9MaXN0W2lkeF0pWzBdKVxyXG4gICAgfVxyXG4gICAgXHJcbiAgICByZXR1cm4gYXJyXHJcbn1cclxuIiwiaW1wb3J0IHRvZG9MaXN0IGZyb20gXCIuLlwiO1xyXG5pbXBvcnQgbGlzdFByb2plY3RzIGZyb20gXCIuL2xpc3RQcm9qZWN0c1wiO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0UHJvamVjdElkeChwcm9qZWN0TmFtZSkge1xyXG4gICAgY29uc3QgcHJvakxpc3QgPSBsaXN0UHJvamVjdHMoKVxyXG4gICAgZm9yIChjb25zdCBpZHggaW4gcHJvakxpc3QpIHtcclxuICAgICAgICBpZiAocHJvakxpc3RbaWR4XSA9PSBwcm9qZWN0TmFtZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gaWR4XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59IiwiaW1wb3J0IFRvZG8gZnJvbSBcIi5cIjtcclxuaW1wb3J0IHRvZG9MaXN0LCB7IHNhdmVUb2RvIH0gZnJvbSBcIi4uXCI7XHJcbmltcG9ydCBnZXRQcm9qZWN0SWR4IGZyb20gXCIuLi9wcm9qZWN0L2dldFByb2plY3RJZHhcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG5ld1RvZG8ocHJvamVjdE5hbWUsIHRpdGxlLCBkZXNjPScnLCBkdWVEYXRlPScnLCBwcmlvcml0eT0nJykge1xyXG4gICAgY29uc3QgbmV3VG9kbyA9IG5ldyBUb2RvKHRpdGxlLCBkZXNjLCBkdWVEYXRlLCBwcmlvcml0eSlcclxuICAgIGNvbnN0IHByb2pJZHggPSBnZXRQcm9qZWN0SWR4KHByb2plY3ROYW1lKVxyXG4gICAgdG9kb0xpc3RbcHJvaklkeF1bcHJvamVjdE5hbWVdLnB1c2gobmV3VG9kbylcclxuICAgIHNhdmVUb2RvKClcclxufSIsImltcG9ydCB0b2RvTGlzdCBmcm9tIFwiLi5cIjtcclxuaW1wb3J0IGdldFByb2plY3RJZHggZnJvbSBcIi4uL3Byb2plY3QvZ2V0UHJvamVjdElkeFwiO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0VG9kb0xvYyhwcm9qZWN0TmFtZSwgdG9kb0lkKSB7XHJcbiAgICBjb25zdCBwcm9qSWR4ID0gZ2V0UHJvamVjdElkeChwcm9qZWN0TmFtZSlcclxuICAgIGNvbnN0IHByb2pUb2RvTGlzdCA9IHRvZG9MaXN0W3Byb2pJZHhdW3Byb2plY3ROYW1lXVxyXG4gICAgZm9yIChjb25zdCBpZHggaW4gcHJvalRvZG9MaXN0KSB7XHJcbiAgICAgICAgaWYgKHByb2pUb2RvTGlzdFtpZHhdLmlkID09IHRvZG9JZCkge1xyXG4gICAgICAgICAgICByZXR1cm4gW3Byb2pJZHgsIGlkeF1cclxuICAgICAgICB9XHJcbiAgICB9IFxyXG4gICAgcmV0dXJuIGZhbHNlXHJcbn0iLCJpbXBvcnQgdG9kb0xpc3QgZnJvbSBcIi4uXCI7XHJcbmltcG9ydCBnZXRUb2RvTG9jIGZyb20gXCIuL2dldFRvZG9Mb2NcIjtcclxuaW1wb3J0IHsgc2F2ZVRvZG8gfSBmcm9tIFwiLi5cIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGRlbGV0ZVRvZG8ocHJvamVjdE5hbWUsIGlkKSB7XHJcbiAgICBjb25zdCB0b2RvTG9jID0gZ2V0VG9kb0xvYyhwcm9qZWN0TmFtZSxpZClcclxuICAgIHRvZG9MaXN0W3RvZG9Mb2NbMF1dW3Byb2plY3ROYW1lXS5zcGxpY2UodG9kb0xvY1sxXSwxKVxyXG4gICAgc2F2ZVRvZG8oKVxyXG59IiwiaW1wb3J0IHRvZG9MaXN0IGZyb20gXCIuLlwiO1xyXG5pbXBvcnQgZ2V0VG9kb0xvYyBmcm9tIFwiLi9nZXRUb2RvTG9jXCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRUb2RvKHByb2plY3ROYW1lLGlkKSB7XHJcbiAgICBjb25zdCB0b2RvTG9jID0gZ2V0VG9kb0xvYyhwcm9qZWN0TmFtZSwgaWQpXHJcbiAgICByZXR1cm4gdG9kb0xpc3RbdG9kb0xvY1swXV1bcHJvamVjdE5hbWVdW3RvZG9Mb2NbMV1dXHJcbn0iLCJpbXBvcnQgeyBnZW5lcmF0ZUVsZW1lbnQgfSBmcm9tIFwiLi9oZWxwZXJcIlxyXG5pbXBvcnQgbGlzdFByb2plY3RzIGZyb20gXCIuL3Byb2plY3QvbGlzdFByb2plY3RzXCJcclxuaW1wb3J0IHtyZWQsIG9yYW5nZSwgYmx1ZSwgZ3JlZW59IGZyb20gJy4vdGhlbWUuanMnXHJcbmltcG9ydCB7IGNsZWFyU2VsZWN0ZWQgfSBmcm9tIFwiLi9oZWxwZXJcIlxyXG5pbXBvcnQgZWRpdFRvZG8gZnJvbSBcIi4vdG9kby9lZGl0VG9kb1wiXHJcbmltcG9ydCBuZXdUb2RvIGZyb20gXCIuL3RvZG8vbmV3VG9kb1wiXHJcbmltcG9ydCB7IGxvYWRDb250ZW50IH0gZnJvbSBcIi4vY29udGVudFwiXHJcbmltcG9ydCBkZWxldGVQcm9qZWN0IGZyb20gXCIuL3Byb2plY3QvZGVsZXRlUHJvamVjdFwiXHJcbmltcG9ydCBkZWxldGVUb2RvIGZyb20gXCIuL3RvZG8vZGVsZXRlVG9kb1wiXHJcblxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBGb3JtKHByb2plY3QsdGl0bGU9JycsZGVzYz0nJyxkdWVEYXRlPScnLHByaW9yaXR5PSc0JyxpZD0nJykge1xyXG5cclxuICAgIGZ1bmN0aW9uIHNldFByaW9yaXR5Q29sb3IocHJpb3JpdHkpIHtcclxuICAgICAgICBjb25zdCBmb3JtUHJpb3JpdHlMYWJlbDEgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjZm9ybS1wcmlvcml0eS1jb250YWluZXItMSAuZm9ybS1wcmlvcml0eS1sYWJlbCcpXHJcbiAgICAgICAgY29uc3QgZm9ybVByaW9yaXR5TGFiZWwyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2Zvcm0tcHJpb3JpdHktY29udGFpbmVyLTIgLmZvcm0tcHJpb3JpdHktbGFiZWwnKVxyXG4gICAgICAgIGNvbnN0IGZvcm1Qcmlvcml0eUxhYmVsMyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNmb3JtLXByaW9yaXR5LWNvbnRhaW5lci0zIC5mb3JtLXByaW9yaXR5LWxhYmVsJylcclxuICAgICAgICBjb25zdCBmb3JtUHJpb3JpdHlMYWJlbDQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjZm9ybS1wcmlvcml0eS1jb250YWluZXItNCAuZm9ybS1wcmlvcml0eS1sYWJlbCcpXHJcbiAgICAgICAgY29uc3QgbGFiZWxzID0gW2Zvcm1Qcmlvcml0eUxhYmVsMSxmb3JtUHJpb3JpdHlMYWJlbDIsZm9ybVByaW9yaXR5TGFiZWwzLGZvcm1Qcmlvcml0eUxhYmVsNF1cclxuICAgICAgICBcclxuICAgICAgICBpZiAoZm9ybVByaW9yaXR5TGFiZWwxICYmIGZvcm1Qcmlvcml0eUxhYmVsMiAmJiBmb3JtUHJpb3JpdHlMYWJlbDMgJiYgZm9ybVByaW9yaXR5TGFiZWw0KSB7XHJcbiAgICAgICAgICAgIGNsZWFyU2VsZWN0ZWQobGFiZWxzKVxyXG4gICAgICAgICAgICBzd2l0Y2ggKHByaW9yaXR5KSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlICcxJzpcclxuICAgICAgICAgICAgICAgICAgICBmb3JtUHJpb3JpdHlMYWJlbDEuY2xhc3NMaXN0LmFkZCgnc2VsZWN0ZWQnKVxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrXHJcbiAgICAgICAgICAgICAgICBjYXNlICcyJzpcclxuICAgICAgICAgICAgICAgICAgICBmb3JtUHJpb3JpdHlMYWJlbDIuY2xhc3NMaXN0LmFkZCgnc2VsZWN0ZWQnKVxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrXHJcbiAgICAgICAgICAgICAgICBjYXNlICczJzpcclxuICAgICAgICAgICAgICAgICAgICBmb3JtUHJpb3JpdHlMYWJlbDMuY2xhc3NMaXN0LmFkZCgnc2VsZWN0ZWQnKVxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrXHJcbiAgICAgICAgICAgICAgICBjYXNlICc0JzpcclxuICAgICAgICAgICAgICAgICAgICBmb3JtUHJpb3JpdHlMYWJlbDQuY2xhc3NMaXN0LmFkZCgnc2VsZWN0ZWQnKVxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gc3VibWl0VG9kb0Zvcm0oZSwgaWQ9JycpIHtcclxuICAgICAgICBjb25zdCBrZXlQcmVzc2VkID0gZS5rZXlcclxuICAgICAgICBpZiAoa2V5UHJlc3NlZCAmJiBrZXlQcmVzc2VkID09ICdFbnRlcicgfHwgIWtleVByZXNzZWQgJiYgZS50YXJnZXQpIHtcclxuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpXHJcbiAgICAgICAgICAgIGNvbnN0IGZvcm0gID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2Zvcm0nKVxyXG4gICAgICAgICAgICBjb25zdCB0aXRsZSA9Zm9ybVsnZm9ybS10aXRsZSddLnZhbHVlXHJcbiAgICAgICAgICAgIGNvbnN0IG5ld1Byb2plY3QgPSBmb3JtWydmb3JtLXByb2plY3QnXS52YWx1ZVxyXG4gICAgICAgICAgICBjb25zdCBkZXNjID0gZm9ybVsnZm9ybS1kZXNjJ10udmFsdWVcclxuICAgICAgICAgICAgY29uc3QgZHVlRGF0ZSA9IGZvcm1bJ2Zvcm0tZHVlZGF0ZSddLnZhbHVlXHJcbiAgICAgICAgICAgIGNvbnN0IHByaW9yaXR5ID0gZm9ybVsnZm9ybS1wcmlvcml0eSddLnZhbHVlXHJcbiAgICAgICAgICAgIGlmIChpZCkge1xyXG4gICAgICAgICAgICAgICAgZWRpdFRvZG8obmV3UHJvamVjdCxwcm9qZWN0LHRpdGxlLGRlc2MsZHVlRGF0ZSxwcmlvcml0eSxpZClcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIG5ld1RvZG8obmV3UHJvamVjdCx0aXRsZSxkZXNjLGR1ZURhdGUscHJpb3JpdHkpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2xvc2VUb2RvRm9ybShlKVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiByZW1vdmVUb2RvKGUscHJvamVjdCxpZD0nJykge1xyXG4gICAgICAgIGlmIChpZCkge1xyXG4gICAgICAgICAgICBkZWxldGVUb2RvKHByb2plY3QsaWQpXHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNsb3NlVG9kb0Zvcm0oZSlcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBmb3JtID0gZ2VuZXJhdGVFbGVtZW50KCdmb3JtJywnJywnZm9ybScpXHJcblxyXG4gICAgY29uc3QgZm9ybVRpdGxlQ29udGFpbmVyID0gZ2VuZXJhdGVFbGVtZW50KCdkaXYnLCcnLCdmb3JtLXRpdGxlLWNvbnRhaW5lcicpXHJcbiAgICBjb25zdCBmb3JtVGl0bGUgPSBnZW5lcmF0ZUVsZW1lbnQoJ2lucHV0JywndGV4dCcsJ2Zvcm0tdGl0bGUnLCdUYXNrJylcclxuICAgIGZvcm1UaXRsZS5yZXF1aXJlZCA9IHRydWVcclxuICAgIGlmICh0aXRsZSkge1xyXG4gICAgICAgIGZvcm1UaXRsZS52YWx1ZSA9IHRpdGxlXHJcbiAgICB9XHJcbiAgICBjb25zdCBmb3JtQ2xvc2VCdG4gPSBnZW5lcmF0ZUVsZW1lbnQoJ2RpdicsJycsJ2Zvcm0tY2xvc2UtYnRuJylcclxuICAgIGZvcm1DbG9zZUJ0bi5pbm5lckhUTUwgPSAnPGkgY2xhc3M9XCJmYS1zb2xpZCBmYS14bWFya1wiPjwvaT4nXHJcbiAgICBmb3JtQ2xvc2VCdG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLChlKT0+Y2xvc2VUb2RvRm9ybShlKSlcclxuICAgIGZvcm1UaXRsZUNvbnRhaW5lci5hcHBlbmQoZm9ybVRpdGxlLCBmb3JtQ2xvc2VCdG4pXHJcblxyXG4gICAgY29uc3QgZm9ybURlc2NDb250YWluZXIgPSBnZW5lcmF0ZUVsZW1lbnQoJ2RpdicsJycsJ2Zvcm0tZGVzYy1jb250YWluZXInKVxyXG4gICAgY29uc3QgZm9ybURlc2MgPSBnZW5lcmF0ZUVsZW1lbnQoJ3RleHRhcmVhJywnJywnZm9ybS1kZXNjJylcclxuICAgIGZvcm1EZXNjLnBsYWNlaG9sZGVyID0gJ0Rlc2NyaXB0aW9uJ1xyXG4gICAgZm9ybURlc2Muc3R5bGUucmVzaXplID0gJ25vbmUnXHJcbiAgICBmb3JtRGVzYy5yb3dzID0gJzUnXHJcbiAgICBpZiAoZGVzYykge1xyXG4gICAgICAgIGZvcm1EZXNjLnZhbHVlID0gZGVzY1xyXG4gICAgfVxyXG4gICAgZm9ybURlc2NDb250YWluZXIuYXBwZW5kKGZvcm1EZXNjKVxyXG5cclxuICAgIGNvbnN0IGZvcm1Qcm9qZWN0Q29udGFpbmVyID0gZ2VuZXJhdGVFbGVtZW50KCdkaXYnLCcnLCdmb3JtLXByb2plY3QtY29udGFpbmVyJylcclxuICAgIGNvbnN0IGZvcm1Qcm9qZWN0VGV4dCA9IGdlbmVyYXRlRWxlbWVudCgnZGl2JywnJywnZm9ybS1wcm9qZWN0LXRleHQnLCdBZGQgdG86ICcpXHJcbiAgICBjb25zdCBmb3JtUHJvamVjdCA9IGdlbmVyYXRlRWxlbWVudCgnc2VsZWN0JywnJywnZm9ybS1wcm9qZWN0JywnZm9ybS1wcm9qZWN0JylcclxuICAgIGNvbnN0IHByb2pMaXN0ID0gbGlzdFByb2plY3RzKClcclxuICAgIGZvciAoY29uc3QgaWR4IGluIHByb2pMaXN0KSB7XHJcbiAgICAgICAgY29uc3QgZm9ybVByb2plY3RPcHRpb24gPSBnZW5lcmF0ZUVsZW1lbnQoJ29wdGlvbicsJycsJycscHJvakxpc3RbaWR4XSlcclxuICAgICAgICBpZiAocHJvakxpc3RbaWR4XSA9PSBwcm9qZWN0KSB7XHJcbiAgICAgICAgICAgIGZvcm1Qcm9qZWN0T3B0aW9uLnNlbGVjdGVkID0gJ3NlbGVjdGVkJ1xyXG4gICAgICAgIH1cclxuICAgICAgICBmb3JtUHJvamVjdC5hcHBlbmQoZm9ybVByb2plY3RPcHRpb24pXHJcbiAgICB9XHJcbiAgICBmb3JtUHJvamVjdENvbnRhaW5lci5hcHBlbmQoZm9ybVByb2plY3RUZXh0LGZvcm1Qcm9qZWN0KVxyXG4gICAgXHJcblxyXG4gICAgY29uc3QgZm9ybUR1ZWRhdGVDb250YWluZXIgPSBnZW5lcmF0ZUVsZW1lbnQoJ2RpdicsJycsJ2Zvcm0tZHVlZGF0ZS1jb250YWluZXInKVxyXG4gICAgY29uc3QgZm9ybUR1ZWRhdGVUZXh0ID0gZ2VuZXJhdGVFbGVtZW50KCdkaXYnLCcnLCdmb3JtLWR1ZWRhdGUtdGV4dCcsJ0R1ZSBkYXRlOiAnKVxyXG4gICAgY29uc3QgZm9ybUR1ZWRhdGUgPSBnZW5lcmF0ZUVsZW1lbnQoJ2lucHV0JywnZGF0ZScsJ2Zvcm0tZHVlZGF0ZScpXHJcbiAgICBpZiAoZHVlRGF0ZSkge1xyXG4gICAgICAgIGZvcm1EdWVkYXRlLnZhbHVlID0gZHVlRGF0ZVxyXG4gICAgfVxyXG4gICAgZm9ybUR1ZWRhdGVDb250YWluZXIuYXBwZW5kKGZvcm1EdWVkYXRlVGV4dCwgZm9ybUR1ZWRhdGUpXHJcblxyXG4gICAgY29uc3QgZm9ybVByaW9yaXR5Q29udGFpbmVyID0gZ2VuZXJhdGVFbGVtZW50KCdkaXYnLCcnLCdmb3JtLXByaW9yaXR5LWNvbnRhaW5lcicpXHJcbiAgICBjb25zdCBmb3JtUHJpb3JpdHlUZXh0ID0gZ2VuZXJhdGVFbGVtZW50KCdkaXYnLCcnLCdmb3JtLXByaW9yaXR5LXRleHQnLCdQcmlvcml0eTogJylcclxuICAgIGNvbnN0IGZvcm1Qcmlvcml0eUNvbnRhaW5lcjEgPSBnZW5lcmF0ZUVsZW1lbnQoJ2RpdicsJycsJ2Zvcm0tcHJpb3JpdHktY29udGFpbmVyLTEnKVxyXG4gICAgY29uc3QgZm9ybVByaW9yaXR5MSA9IGdlbmVyYXRlRWxlbWVudCgnaW5wdXQnLCdyYWRpbycsJ2Zvcm0tcHJpb3JpdHktMScsJ2Zvcm0tcHJpb3JpdHknKVxyXG4gICAgY29uc3QgZm9ybVByaW9yaXR5TGFiZWwxID0gZ2VuZXJhdGVFbGVtZW50KCdsYWJlbCcsJ2Zvcm0tcHJpb3JpdHktbGFiZWwnLCdmb3JtLXByaW9yaXR5LTEnKVxyXG4gICAgZm9ybVByaW9yaXR5TGFiZWwxLmlubmVySFRNTCA9IGA8aSBjbGFzcz1cImZhLXNvbGlkIGZhLWZsYWdcIiBzdHlsZT1cImNvbG9yOiAke3JlZH1cIj48L2k+YFxyXG4gICAgZm9ybVByaW9yaXR5TGFiZWwxLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywoKT0+c2V0UHJpb3JpdHlDb2xvcignMScpKVxyXG4gICAgZm9ybVByaW9yaXR5Q29udGFpbmVyMS5hcHBlbmQoZm9ybVByaW9yaXR5TGFiZWwxLGZvcm1Qcmlvcml0eTEpXHJcblxyXG4gICAgY29uc3QgZm9ybVByaW9yaXR5Q29udGFpbmVyMiA9IGdlbmVyYXRlRWxlbWVudCgnZGl2JywnJywnZm9ybS1wcmlvcml0eS1jb250YWluZXItMicpXHJcbiAgICBjb25zdCBmb3JtUHJpb3JpdHkyID0gZ2VuZXJhdGVFbGVtZW50KCdpbnB1dCcsJ3JhZGlvJywnZm9ybS1wcmlvcml0eS0yJywnZm9ybS1wcmlvcml0eScpXHJcbiAgICBjb25zdCBmb3JtUHJpb3JpdHlMYWJlbDIgPSBnZW5lcmF0ZUVsZW1lbnQoJ2xhYmVsJywnZm9ybS1wcmlvcml0eS1sYWJlbCcsJ2Zvcm0tcHJpb3JpdHktMicpXHJcbiAgICBmb3JtUHJpb3JpdHlMYWJlbDIuaW5uZXJIVE1MID0gYDxpIGNsYXNzPVwiZmEtc29saWQgZmEtZmxhZ1wiIHN0eWxlPVwiY29sb3I6ICR7b3JhbmdlfVwiPjwvaT5gXHJcbiAgICBmb3JtUHJpb3JpdHlMYWJlbDIuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCgpPT5zZXRQcmlvcml0eUNvbG9yKCcyJykpXHJcbiAgICBmb3JtUHJpb3JpdHlDb250YWluZXIyLmFwcGVuZChmb3JtUHJpb3JpdHlMYWJlbDIsZm9ybVByaW9yaXR5MilcclxuXHJcbiAgICBjb25zdCBmb3JtUHJpb3JpdHlDb250YWluZXIzID0gZ2VuZXJhdGVFbGVtZW50KCdkaXYnLCcnLCdmb3JtLXByaW9yaXR5LWNvbnRhaW5lci0zJylcclxuICAgIGNvbnN0IGZvcm1Qcmlvcml0eTMgPSBnZW5lcmF0ZUVsZW1lbnQoJ2lucHV0JywncmFkaW8nLCdmb3JtLXByaW9yaXR5LTMnLCdmb3JtLXByaW9yaXR5JylcclxuICAgIGNvbnN0IGZvcm1Qcmlvcml0eUxhYmVsMyA9IGdlbmVyYXRlRWxlbWVudCgnbGFiZWwnLCdmb3JtLXByaW9yaXR5LWxhYmVsJywnZm9ybS1wcmlvcml0eS0zJylcclxuICAgIGZvcm1Qcmlvcml0eUxhYmVsMy5pbm5lckhUTUwgPSBgPGkgY2xhc3M9XCJmYS1zb2xpZCBmYS1mbGFnXCIgc3R5bGU9XCJjb2xvcjogJHtibHVlfVwiPjwvaT5gXHJcbiAgICBmb3JtUHJpb3JpdHlMYWJlbDMuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCgpPT5zZXRQcmlvcml0eUNvbG9yKCczJykpXHJcbiAgICBmb3JtUHJpb3JpdHlDb250YWluZXIzLmFwcGVuZChmb3JtUHJpb3JpdHlMYWJlbDMsZm9ybVByaW9yaXR5MylcclxuXHJcbiAgICBjb25zdCBmb3JtUHJpb3JpdHlDb250YWluZXI0ID0gZ2VuZXJhdGVFbGVtZW50KCdkaXYnLCcnLCdmb3JtLXByaW9yaXR5LWNvbnRhaW5lci00JylcclxuICAgIGNvbnN0IGZvcm1Qcmlvcml0eTQgPSBnZW5lcmF0ZUVsZW1lbnQoJ2lucHV0JywncmFkaW8nLCdmb3JtLXByaW9yaXR5LTQnLCdmb3JtLXByaW9yaXR5JylcclxuICAgIGNvbnN0IGZvcm1Qcmlvcml0eUxhYmVsNCA9IGdlbmVyYXRlRWxlbWVudCgnbGFiZWwnLCdmb3JtLXByaW9yaXR5LWxhYmVsJywnZm9ybS1wcmlvcml0eS00JylcclxuICAgIGZvcm1Qcmlvcml0eUxhYmVsNC5pbm5lckhUTUwgPSBgPGkgY2xhc3M9XCJmYS1zb2xpZCBmYS1mbGFnXCIgc3R5bGU9XCJjb2xvcjogJHtncmVlbn1cIj48L2k+YFxyXG4gICAgZm9ybVByaW9yaXR5TGFiZWw0LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywoKT0+c2V0UHJpb3JpdHlDb2xvcignNCcpKVxyXG4gICAgZm9ybVByaW9yaXR5Q29udGFpbmVyNC5hcHBlbmQoZm9ybVByaW9yaXR5TGFiZWw0LGZvcm1Qcmlvcml0eTQpXHJcbiAgICBcclxuICAgIGZvcm1Qcmlvcml0eUNvbnRhaW5lci5hcHBlbmQoZm9ybVByaW9yaXR5VGV4dCxmb3JtUHJpb3JpdHlDb250YWluZXIxLGZvcm1Qcmlvcml0eUNvbnRhaW5lcjIsZm9ybVByaW9yaXR5Q29udGFpbmVyMyxmb3JtUHJpb3JpdHlDb250YWluZXI0KVxyXG4gICAgXHJcbiAgICBzd2l0Y2ggKHByaW9yaXR5KSB7XHJcbiAgICAgICAgY2FzZSAnMSc6XHJcbiAgICAgICAgICAgIGZvcm1Qcmlvcml0eTEuY2hlY2tlZCA9IHRydWVcclxuICAgICAgICAgICAgZm9ybVByaW9yaXR5TGFiZWwxLmNsYXNzTGlzdC5hZGQoJ3NlbGVjdGVkJylcclxuICAgICAgICAgICAgYnJlYWtcclxuICAgICAgICBjYXNlICcyJzpcclxuICAgICAgICAgICAgZm9ybVByaW9yaXR5Mi5jaGVja2VkID0gdHJ1ZVxyXG4gICAgICAgICAgICBmb3JtUHJpb3JpdHlMYWJlbDIuY2xhc3NMaXN0LmFkZCgnc2VsZWN0ZWQnKVxyXG4gICAgICAgICAgICBicmVha1xyXG4gICAgICAgIGNhc2UgJzMnOlxyXG4gICAgICAgICAgICBmb3JtUHJpb3JpdHkzLmNoZWNrZWQgPSB0cnVlXHJcbiAgICAgICAgICAgIGZvcm1Qcmlvcml0eUxhYmVsMy5jbGFzc0xpc3QuYWRkKCdzZWxlY3RlZCcpXHJcbiAgICAgICAgICAgIGJyZWFrXHJcbiAgICAgICAgY2FzZSAnNCc6XHJcbiAgICAgICAgICAgIGZvcm1Qcmlvcml0eTQuY2hlY2tlZCA9IHRydWVcclxuICAgICAgICAgICAgZm9ybVByaW9yaXR5TGFiZWw0LmNsYXNzTGlzdC5hZGQoJ3NlbGVjdGVkJylcclxuICAgICAgICAgICAgYnJlYWtcclxuICAgIH1cclxuICAgIFxyXG4gICAgY29uc3QgZm9ybURlbGV0ZUJ0biA9IGdlbmVyYXRlRWxlbWVudCgnYnV0dG9uJywnJywnZm9ybS1kZWxldGUtYnRuJywnRGVsZXRlIFRhc2snKVxyXG4gICAgY29uc3QgZm9ybVNhdmVCdG4gPSBnZW5lcmF0ZUVsZW1lbnQoJ2J1dHRvbicsJycsJ2Zvcm0tc2F2ZS1idG4nLCdTYXZlIENoYW5nZXMnKVxyXG4gICAgZm9ybURlbGV0ZUJ0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsKGUpPT5yZW1vdmVUb2RvKGUscHJvamVjdCxpZCkpXHJcbiAgICBmb3JtU2F2ZUJ0bi50eXBlID0gJ3N1Ym1pdCdcclxuICAgIGZvcm0uYWRkRXZlbnRMaXN0ZW5lcignc3VibWl0JywoZSk9PnN1Ym1pdFRvZG9Gb3JtKGUsaWQpKVxyXG4gICAgLy8gZm9ybS5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywoZSk9PnN1Ym1pdFRvZG9Gb3JtKGUsaWQpKVxyXG5cclxuICAgIGNvbnN0IGZvcm1BY3Rpb25zQ29udGFpbmVyID0gZ2VuZXJhdGVFbGVtZW50KCdkaXYnLCcnLCdmb3JtLWFjdGlvbnMtY29udGFpbmVyJylcclxuICAgIGZvcm1BY3Rpb25zQ29udGFpbmVyLmFwcGVuZChmb3JtRGVsZXRlQnRuLGZvcm1TYXZlQnRuKVxyXG4gICAgXHJcbiAgICBmb3JtLmFwcGVuZChmb3JtVGl0bGVDb250YWluZXIsZm9ybURlc2NDb250YWluZXIsZm9ybVByb2plY3RDb250YWluZXIsZm9ybUR1ZWRhdGVDb250YWluZXIsZm9ybVByaW9yaXR5Q29udGFpbmVyLGZvcm1BY3Rpb25zQ29udGFpbmVyKVxyXG5cclxuICAgIHJldHVybiBmb3JtXHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNsb3NlVG9kb0Zvcm0oZSkge1xyXG4gICAgaWYgKGUudGFyZ2V0KSB7XHJcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpXHJcbiAgICAgICAgY29uc3QgY29udGVudEVsZW0gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjY29udGVudCcpXHJcbiAgICAgICAgY29uc3QgZm9ybSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNmb3JtJylcclxuICAgICAgICBjb25zdCBwcm9qZWN0QWRkVG9kb0J0biA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5wcm9qZWN0LWFkZC10b2RvLWJ0bicpXHJcbiAgICAgICAgY29uc3QgcHJvamVjdE5hbWUgPSBwcm9qZWN0QWRkVG9kb0J0bi5pZFxyXG4gICAgICAgIGZvcm0ucmVtb3ZlKClcclxuICAgICAgICBwcm9qZWN0QWRkVG9kb0J0bi5zdHlsZS5kaXNwbGF5ID0gJ2ZsZXgnXHJcbiAgICAgICAgY29udGVudEVsZW0uY2xhc3NMaXN0LnJlbW92ZSgnd2l0aC1mb3JtJylcclxuICAgICAgICBsb2FkQ29udGVudChwcm9qZWN0TmFtZSlcclxuICAgIH1cclxufVxyXG5cclxuZnVuY3Rpb24gcmVsb2FkUHJvamVjdE9wdGlvbnMoKSB7XHJcbiAgICBjb25zdCBmb3JtUHJvamVjdCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNmb3JtLXByb2plY3QnKVxyXG4gICAgaWYgKGZvcm1Qcm9qZWN0KSB7XHJcbiAgICAgICAgZm9ybVByb2plY3QuaW5uZXJIVE1MID0gJydcclxuICAgICAgICBjb25zdCBwcm9qTGlzdCA9IGxpc3RQcm9qZWN0cygpXHJcbiAgICAgICAgZm9yIChjb25zdCBpZHggaW4gcHJvakxpc3QpIHtcclxuICAgICAgICAgICAgY29uc3QgZm9ybVByb2plY3RPcHRpb24gPSBnZW5lcmF0ZUVsZW1lbnQoJ29wdGlvbicsJycsJycscHJvakxpc3RbaWR4XSlcclxuICAgICAgICAgICAgZm9ybVByb2plY3QuYXBwZW5kKGZvcm1Qcm9qZWN0T3B0aW9uKVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IHsgY2xvc2VUb2RvRm9ybSwgcmVsb2FkUHJvamVjdE9wdGlvbnMgfSIsImltcG9ydCB0b2RvTGlzdCwgeyBzYXZlVG9kbyB9IGZyb20gXCIuLlwiXHJcbmltcG9ydCBkZWxldGVUb2RvIGZyb20gXCIuL2RlbGV0ZVRvZG9cIlxyXG5pbXBvcnQgZ2V0VG9kb0xvYyBmcm9tIFwiLi9nZXRUb2RvTG9jXCJcclxuaW1wb3J0IG5ld1RvZG8gZnJvbSBcIi4vbmV3VG9kb1wiXHJcblxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBlZGl0VG9kbyhuZXdQcm9qZWN0LCBvbGRQcm9qZWN0LCB0aXRsZSwgZGVzYz0nJywgZHVlRGF0ZT0nJywgcHJpb3JpdHksIGlkKSB7XHJcbiAgICBpZiAobmV3UHJvamVjdCA9PSBvbGRQcm9qZWN0KSB7XHJcbiAgICAgICAgY29uc3QgdG9kb0xvYyA9IGdldFRvZG9Mb2MobmV3UHJvamVjdCxpZClcclxuICAgICAgICBpZiAodG9kb0xvYykge1xyXG4gICAgICAgICAgICBjb25zdCB0b2RvID0gdG9kb0xpc3RbdG9kb0xvY1swXV1bbmV3UHJvamVjdF1bdG9kb0xvY1sxXV1cclxuICAgICAgICAgICAgdG9kby50aXRsZSA9IHRpdGxlXHJcbiAgICAgICAgICAgIGlmIChkZXNjKSB7XHJcbiAgICAgICAgICAgICAgICB0b2RvLmRlc2MgPSBkZXNjXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGR1ZURhdGUpIHtcclxuICAgICAgICAgICAgICAgIHRvZG8uZHVlRGF0ZSA9IGR1ZURhdGVcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0b2RvLnByaW9yaXR5ID0gcHJpb3JpdHlcclxuICAgICAgICAgICAgc2F2ZVRvZG8oKVxyXG4gICAgICAgIH1cclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgY29uc3QgdG9kb0xvYyA9IGdldFRvZG9Mb2Mob2xkUHJvamVjdCxpZClcclxuICAgICAgICBpZiAodG9kb0xvYykge1xyXG4gICAgICAgICAgICBkZWxldGVUb2RvKG9sZFByb2plY3QsaWQpXHJcbiAgICAgICAgICAgIG5ld1RvZG8obmV3UHJvamVjdCx0aXRsZSxkZXNjLGR1ZURhdGUscHJpb3JpdHkpXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59IiwiaW1wb3J0IHRvZG9MaXN0IGZyb20gXCIuLlwiO1xyXG5pbXBvcnQgZ2V0UHJvamVjdElkeCBmcm9tIFwiLi4vcHJvamVjdC9nZXRQcm9qZWN0SWR4XCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBsaXN0VG9kb3MocHJvamVjdE5hbWUpIHtcclxuICAgIGNvbnN0IHByb2pJZHggPSBnZXRQcm9qZWN0SWR4KHByb2plY3ROYW1lKVxyXG4gICAgY29uc3QgcHJvalRvZG9MaXN0ID0gdG9kb0xpc3RbcHJvaklkeF1bcHJvamVjdE5hbWVdXHJcbiAgICBjb25zdCBhcnIgPSBbXVxyXG4gICAgZm9yIChjb25zdCBpZHggaW4gcHJvalRvZG9MaXN0KSB7XHJcbiAgICAgICAgYXJyLnB1c2gocHJvalRvZG9MaXN0W2lkeF0udGl0bGUpXHJcbiAgICB9IFxyXG4gICAgcmV0dXJuIGFyclxyXG59IiwiaW1wb3J0IHtnZW5lcmF0ZUVsZW1lbnQsIGZvcm1hdERhdGV9IGZyb20gXCIuL2hlbHBlclwiO1xyXG5pbXBvcnQgdG9kb0xpc3QgZnJvbSAnLi9pbmRleCdcclxuaW1wb3J0IHtyZWQsIG9yYW5nZSwgYmx1ZSwgZ3JlZW59IGZyb20gJy4vdGhlbWUuanMnXHJcbmltcG9ydCBuZXdUb2RvIGZyb20gXCIuL3RvZG8vbmV3VG9kb1wiO1xyXG5pbXBvcnQgZWRpdFRvZG8gZnJvbSBcIi4vdG9kby9lZGl0VG9kb1wiO1xyXG5pbXBvcnQgZGVsZXRlVG9kbyBmcm9tIFwiLi90b2RvL2RlbGV0ZVRvZG9cIjtcclxuaW1wb3J0IGdldFRvZG8gZnJvbSBcIi4vdG9kby9nZXRUb2RvXCI7XHJcbmltcG9ydCBnZXRQcm9qZWN0SWR4IGZyb20gXCIuL3Byb2plY3QvZ2V0UHJvamVjdElkeFwiO1xyXG5pbXBvcnQgRm9ybSBmcm9tIFwiLi9mb3JtXCI7XHJcbmltcG9ydCB7IGNyZWF0ZVNlZ21lbnQsIHNlbGVjdFByb2plY3QgfSBmcm9tIFwiLi9zaWRlYmFyXCI7XHJcbmltcG9ydCB7IGNsb3NlVG9kb0Zvcm0gfSBmcm9tIFwiLi9mb3JtXCI7XHJcbmltcG9ydCBnZXRUb2RvTG9jIGZyb20gXCIuL3RvZG8vZ2V0VG9kb0xvY1wiO1xyXG5pbXBvcnQgbGlzdFRvZG9zIGZyb20gXCIuL3RvZG8vbGlzdFRvZG9zXCI7XHJcbmltcG9ydCByZWFycmFuZ2VUb2RvIGZyb20gXCIuL3RvZG8vcmVhcnJhbmdlVG9kb1wiO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gQ29udGVudCgpIHtcclxuICAgIGNvbnN0IGNvbnRlbnQgPSBnZW5lcmF0ZUVsZW1lbnQoJ2RpdicsJycsJ2NvbnRlbnQnKVxyXG4gICAgXHJcbiAgICByZXR1cm4gY29udGVudFxyXG59XHJcblxyXG5mdW5jdGlvbiBsb2FkQ29udGVudChwcm9qZWN0PScnKSB7XHJcblxyXG4gICAgY29uc3QgY29udGVudEVsZW0gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjY29udGVudCcpXHJcbiAgICBjb250ZW50RWxlbS5pbm5lckhUTUwgPSAnJ1xyXG4gICAgbGV0IHByb2plY3RJZHhcclxuICAgIGlmIChwcm9qZWN0KSB7XHJcbiAgICAgICAgcHJvamVjdElkeCA9IGdldFByb2plY3RJZHgocHJvamVjdClcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgY29uc3Qgc2VsZWN0ZWRQcm9qZWN0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3NpZGViYXItcHJvamVjdHMnKS5xdWVyeVNlbGVjdG9yKCcuc2VsZWN0ZWQnKVxyXG4gICAgICAgIGlmIChzZWxlY3RlZFByb2plY3QpIHtcclxuICAgICAgICAgICAgcHJvamVjdElkeCA9IGdldFByb2plY3RJZHgoc2VsZWN0ZWRQcm9qZWN0LmlkKVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHByb2plY3RJZHggPSAwXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgY29uc3QgcHJvamVjdE9iaiA9IHRvZG9MaXN0W3Byb2plY3RJZHhdXHJcbiAgICBjb25zdCBwcm9qZWN0TmFtZSA9IE9iamVjdC5rZXlzKHByb2plY3RPYmopWzBdXHJcbiAgICBjb25zdCBwcm9qZWN0VG9kb3MgPSBwcm9qZWN0T2JqW3Byb2plY3ROYW1lXSBcclxuICAgIGNvbnN0IHByb2plY3RFbGVtID0gY3JlYXRlUHJvamVjdChwcm9qZWN0TmFtZSlcclxuICAgIGZvciAoY29uc3QgdG9kb0lkeCBpbiBwcm9qZWN0VG9kb3MpIHtcclxuICAgICAgICBjb25zdCB0b2RvU2VnbWVudCA9IGNyZWF0ZVNlZ21lbnQoKVxyXG4gICAgICAgIGNvbnN0IHRvZG9JdGVtID0gcHJvamVjdFRvZG9zW3RvZG9JZHhdXHJcbiAgICAgICAgY29uc3QgdG9kb0VsZW0gPSBjcmVhdGVUb2RvKHRvZG9JdGVtLnRpdGxlLHRvZG9JdGVtLmRlc2MsZm9ybWF0RGF0ZSh0b2RvSXRlbS5kdWVEYXRlKSx0b2RvSXRlbS5wcmlvcml0eSwgdG9kb0l0ZW0uaWQpXHJcbiAgICAgICAgcHJvamVjdEVsZW0ucXVlcnlTZWxlY3RvcignLnByb2plY3QtdG9kby1jb250YWluZXInKS5hcHBlbmQodG9kb1NlZ21lbnQsdG9kb0VsZW0pXHJcbiAgICB9XHJcbiAgICBjb25zdCB0b2RvU2VnbWVudCA9IGNyZWF0ZVNlZ21lbnQoKVxyXG4gICAgcHJvamVjdEVsZW0ucXVlcnlTZWxlY3RvcignLnByb2plY3QtdG9kby1jb250YWluZXInKS5hcHBlbmQodG9kb1NlZ21lbnQpXHJcbiAgICBjb250ZW50RWxlbS5hcHBlbmQocHJvamVjdEVsZW0pXHJcbiAgICBzZWxlY3RQcm9qZWN0KHByb2plY3ROYW1lKVxyXG59XHJcblxyXG5mdW5jdGlvbiBjcmVhdGVUb2RvKHRpdGxlLCBkZXNjPScnLCBkdWVEYXRlPScnLCBwcmlvcml0eT0nNCcsIGlkKSB7ICAgIFxyXG4gICAgY29uc3QgdG9kb0NvbnRhaW5lciA9IGdlbmVyYXRlRWxlbWVudCgnZGl2JywndG9kby1jb250YWluZXInLGlkKVxyXG4gICAgY29uc3QgY29udHJvbGxlciA9IG5ldyBBYm9ydENvbnRyb2xsZXIoKTtcclxuICAgIHRvZG9Db250YWluZXIuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLChlKT0+c2hvd1RvZG9FZGl0Rm9ybShlLGNvbnRyb2xsZXIpLHtzaWduYWw6IGNvbnRyb2xsZXIuc2lnbmFsfSlcclxuICAgIGNvbnN0IHRvZG9UaXRsZUNvbnRhaW5lciA9IGdlbmVyYXRlRWxlbWVudCgnZGl2JywndG9kby10aXRsZS1jb250YWluZXInKVxyXG4gICAgY29uc3QgdG9kb0NoZWNrYm94ID0gZ2VuZXJhdGVFbGVtZW50KCdidXR0b24nLCd0b2RvLWNoZWNrYm94JylcclxuICAgIHRvZG9DaGVja2JveC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIChlKSA9PiBjb21wbGV0ZVRvZG8oZSkpXHJcbiAgICBjb25zdCB0b2RvVGl0bGUgPSBnZW5lcmF0ZUVsZW1lbnQoJ2RpdicsJ3RvZG8tdGl0bGUnLCcnLHRpdGxlKVxyXG4gICAgY29uc3QgdG9kb0luZm9Db250YWluZXIgPSBnZW5lcmF0ZUVsZW1lbnQoJ2RpdicsJ3RvZG8taW5mby1jb250YWluZXInKVxyXG4gICAgXHJcbiAgICBpZiAoZHVlRGF0ZSkge1xyXG4gICAgICAgIGNvbnN0IHRvZG9EdWVkYXRlID0gZ2VuZXJhdGVFbGVtZW50KCdkaXYnLCd0b2RvLWR1ZWRhdGUnLCcnLCfwn5OFICcrZHVlRGF0ZSlcclxuICAgICAgICB0b2RvSW5mb0NvbnRhaW5lci5hcHBlbmQodG9kb0R1ZWRhdGUpXHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgdG9kb1ByaW9yaXR5Q29udGFpbmVyID0gZ2VuZXJhdGVFbGVtZW50KCdkaXYnLCd0b2RvLXByaW9yaXR5LWNvbnRhaW5lcicpXHJcbiAgICBjb25zdCB0b2RvUHJpb3JpdHlJY29uID0gZ2VuZXJhdGVFbGVtZW50KCdkaXYnLCd0b2RvLXByaW9yaXR5LWljb24nKVxyXG4gICAgdG9kb1ByaW9yaXR5SWNvbi5pbm5lckhUTUwgPSAnPGkgY2xhc3M9XCJmYS1zb2xpZCBmYS1mbGFnXCI+PC9pPidcclxuICAgIHRvZG9Qcmlvcml0eUljb24uc3R5bGUuY29sb3IgPSBzZXRQcmlvcml0eUNvbG9yKHByaW9yaXR5KVxyXG4gICAgdG9kb0NoZWNrYm94LnN0eWxlLmJvcmRlckNvbG9yID0gc2V0UHJpb3JpdHlDb2xvcihwcmlvcml0eSlcclxuICAgIGNvbnN0IHRvZG9Qcmlvcml0eSA9ICBnZW5lcmF0ZUVsZW1lbnQoJ2RpdicsICd0b2RvLXByaW9yaXR5JywnJyxwcmlvcml0eSlcclxuICAgIHRvZG9Qcmlvcml0eUNvbnRhaW5lci5hcHBlbmQodG9kb1ByaW9yaXR5SWNvbiwgdG9kb1ByaW9yaXR5KVxyXG4gICAgdG9kb0luZm9Db250YWluZXIuYXBwZW5kKHRvZG9Qcmlvcml0eUNvbnRhaW5lcilcclxuXHJcbiAgICB0b2RvVGl0bGVDb250YWluZXIuYXBwZW5kKHRvZG9DaGVja2JveCx0b2RvVGl0bGUsdG9kb0luZm9Db250YWluZXIpXHJcblxyXG4gICAgaWYgKGRlc2MpIHtcclxuICAgICAgICBjb25zdCB0b2RvRGVzYyA9IGdlbmVyYXRlRWxlbWVudCgnZGl2JywndG9kby1kZXNjJywnJyxkZXNjKVxyXG4gICAgICAgIHRvZG9Db250YWluZXIuYXBwZW5kKHRvZG9UaXRsZUNvbnRhaW5lcix0b2RvRGVzYylcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgdG9kb0NvbnRhaW5lci5hcHBlbmQodG9kb1RpdGxlQ29udGFpbmVyKVxyXG4gICAgfVxyXG5cclxuICAgIHRvZG9Db250YWluZXIuZHJhZ2dhYmxlID0gdHJ1ZVxyXG4gICAgdG9kb0NvbnRhaW5lci5hZGRFdmVudExpc3RlbmVyKCdkcmFnc3RhcnQnLChlKT0+aGFuZGxlVG9kb0RyYWcoZSkpXHJcbiAgICB0b2RvQ29udGFpbmVyLmFkZEV2ZW50TGlzdGVuZXIoJ2RyYWdvdmVyJywoZSk9PmUucHJldmVudERlZmF1bHQoKSlcclxuICAgIHRvZG9Db250YWluZXIuYWRkRXZlbnRMaXN0ZW5lcignZHJhZ2VuZCcsKGUpPT5oYW5kbGVUb2RvRHJvcChlKSlcclxuXHJcbiAgICByZXR1cm4gdG9kb0NvbnRhaW5lclxyXG59XHJcblxyXG5cclxuXHJcbmZ1bmN0aW9uIGNyZWF0ZVByb2plY3QodGl0bGUpIHtcclxuICAgIGNvbnN0IHByb2plY3RDb250YWluZXIgPSBnZW5lcmF0ZUVsZW1lbnQoJ2RpdicsJ3Byb2plY3QtY29udGFpbmVyJyx0aXRsZSlcclxuICAgIGNvbnN0IHByb2plY3RUaXRsZUNvbnRhaW5lciA9IGdlbmVyYXRlRWxlbWVudCgnZGl2JywncHJvamVjdC10aXRsZS1jb250YWluZXInKVxyXG4gICAgY29uc3QgcHJvamVjdFRpdGxlID0gZ2VuZXJhdGVFbGVtZW50KCdkaXYnLCdwcm9qZWN0LXRpdGxlJywnJyx0aXRsZSlcclxuICAgIGNvbnN0IHByb2plY3RUb2RvQ29udGFpbmVyID0gZ2VuZXJhdGVFbGVtZW50KCdkaXYnLCdwcm9qZWN0LXRvZG8tY29udGFpbmVyJylcclxuICAgIGNvbnN0IHByb2plY3RBZGRUb2RvQnRuID0gZ2VuZXJhdGVFbGVtZW50KCdkaXYnLCdwcm9qZWN0LWFkZC10b2RvLWJ0bicsdGl0bGUpXHJcbiAgICBjb25zdCBwcm9qZWN0QWRkVG9kb0ljb24gPSBnZW5lcmF0ZUVsZW1lbnQoJ2RpdicsJ3Byb2plY3QtYWRkLXRvZG8taWNvbicpXHJcbiAgICBwcm9qZWN0QWRkVG9kb0ljb24uaW5uZXJIVE1MID0gJzxpIGNsYXNzPVwiZmEtc29saWQgZmEtcGx1c1wiPjwvaT4nXHJcbiAgICBjb25zdCBwcm9qZWN0QWRkVG9kb1RleHQgPSBnZW5lcmF0ZUVsZW1lbnQoJ2RpdicsJ3Byb2plY3QtYWRkLXRvZG8tdGV4dCcsJycsJ0FkZCBOZXcgVGFzaycpXHJcbiAgICBcclxuICAgIHByb2plY3RBZGRUb2RvQnRuLmFwcGVuZChwcm9qZWN0QWRkVG9kb0ljb24scHJvamVjdEFkZFRvZG9UZXh0KVxyXG4gICAgcHJvamVjdEFkZFRvZG9CdG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLChlKSA9PiBzaG93VG9kb0Zvcm0oZSkpXHJcblxyXG4gICAgcHJvamVjdFRpdGxlQ29udGFpbmVyLmFwcGVuZChwcm9qZWN0VGl0bGUpXHJcbiAgICBwcm9qZWN0Q29udGFpbmVyLmFwcGVuZChwcm9qZWN0VGl0bGVDb250YWluZXIscHJvamVjdFRvZG9Db250YWluZXIscHJvamVjdEFkZFRvZG9CdG4pXHJcblxyXG4gICAgcmV0dXJuIHByb2plY3RDb250YWluZXJcclxufVxyXG5cclxuZnVuY3Rpb24gaGFuZGxlVG9kb0RyYWcoZSkge1xyXG4gICAgaWYgKGUudGFyZ2V0KSB7XHJcbiAgICAgICAgY29uc3QgdG9kb0VsZW0gPSBlLnRhcmdldC5jbG9zZXN0KCcudG9kby1jb250YWluZXInKVxyXG4gICAgICAgIHRvZG9FbGVtLmNsYXNzTGlzdC5hZGQoJ2RyYWdnaW5nJylcclxuICAgIH1cclxufVxyXG5cclxuZnVuY3Rpb24gaGFuZGxlVG9kb0Ryb3AoZSkge1xyXG4gICAgY29uc3Qgc2VnbWVudEVsZW0gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuaG92ZXJpbmcnKVxyXG4gICAgaWYgKGUudGFyZ2V0ICYmIHNlZ21lbnRFbGVtKSB7XHJcbiAgICAgICAgY29uc3QgdG9kb0RyYWdnaW5nRWxlbSA9IGUudGFyZ2V0LmNsb3Nlc3QoJy50b2RvLWNvbnRhaW5lcicpXHJcbiAgICAgICAgY29uc3QgdG9kb0lkID0gdG9kb0RyYWdnaW5nRWxlbS5pZFxyXG4gICAgICAgIGNvbnN0IHByb2plY3ROYW1lID0gdG9kb0RyYWdnaW5nRWxlbS5jbG9zZXN0KCcucHJvamVjdC1jb250YWluZXInKS5pZFxyXG4gICAgICAgIGNvbnN0IG9sZExvYyA9IGdldFRvZG9Mb2MocHJvamVjdE5hbWUsdG9kb0lkKVxyXG4gICAgICAgIGNvbnN0IHRvZG9Ecm9wcGluZ0VsZW0gPSBzZWdtZW50RWxlbS5uZXh0U2libGluZ1xyXG4gICAgICAgIGxldCBuZXdMb2NcclxuICAgICAgICBpZiAodG9kb0Ryb3BwaW5nRWxlbSkge1xyXG4gICAgICAgICAgICBjb25zdCB0b2RvRHJvcHBpbmdMb2MgPSBnZXRUb2RvTG9jKHByb2plY3ROYW1lLHRvZG9Ecm9wcGluZ0VsZW0pXHJcbiAgICAgICAgICAgIGlmIChvbGRMb2NbMV0gPCB0b2RvRHJvcHBpbmdMb2NbMV0pIHtcclxuICAgICAgICAgICAgICAgIG5ld0xvYyA9IFtvbGRMb2NbMF0sdG9kb0Ryb3BwaW5nTG9jWzFdLTFdXHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBuZXdMb2MgPSBbb2xkTG9jWzBdLHRvZG9Ecm9wcGluZ0xvY1sxXV1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIG5ld0xvYyA9IFtvbGRMb2NbMF0sIGxpc3RUb2Rvcyhwcm9qZWN0TmFtZSkubGVuZ3RoXVxyXG4gICAgICAgIH1cclxuICAgICAgICByZWFycmFuZ2VUb2RvKHByb2plY3ROYW1lLCB0b2RvSWQsIG9sZExvYywgbmV3TG9jKVxyXG4gICAgICAgIHRvZG9EcmFnZ2luZ0VsZW0uY2xhc3NMaXN0LnJlbW92ZSgnZHJhZ2dpbmcnKVxyXG4gICAgICAgIGxvYWRDb250ZW50KClcclxuICAgIH1cclxufVxyXG5cclxuZnVuY3Rpb24gc2hvd1RvZG9Gb3JtKGUpIHtcclxuICAgIGlmIChlLnRhcmdldCkge1xyXG4gICAgICAgIGNvbnN0IGNvbnRlbnRFbGVtID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2NvbnRlbnQnKVxyXG4gICAgICAgIGNvbnN0IHByb2plY3RFbGVtID0gZS50YXJnZXQuY2xvc2VzdCgnLnByb2plY3QtY29udGFpbmVyJylcclxuICAgICAgICBjb25zdCBwcm9qZWN0VGl0bGUgPSBwcm9qZWN0RWxlbS5pZFxyXG4gICAgICAgIGNvbnN0IHByb2plY3RBZGRUb2RvQnRuID0gZS50YXJnZXQuY2xvc2VzdCgnLnByb2plY3QtYWRkLXRvZG8tYnRuJylcclxuICAgICAgICBjb25zdCBmb3JtID0gRm9ybShwcm9qZWN0VGl0bGUpXHJcbiAgICAgICAgY29udGVudEVsZW0uYXBwZW5kKGZvcm0pXHJcbiAgICAgICAgY29udGVudEVsZW0uY2xhc3NMaXN0LmFkZCgnd2l0aC1mb3JtJylcclxuICAgICAgICBjb25zdCBmb3JtVGl0bGUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjZm9ybS10aXRsZScpXHJcbiAgICAgICAgZm9ybVRpdGxlLmZvY3VzKClcclxuICAgICAgICBwcm9qZWN0QWRkVG9kb0J0bi5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnXHJcbiAgICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHNob3dUb2RvRWRpdEZvcm0oZSxjb250cm9sbGVyKSB7XHJcbiAgICBpZiAoZS50YXJnZXQpIHtcclxuICAgICAgICBpZiAoZS50YXJnZXQuY2xhc3NMaXN0ID09ICd0b2RvLWNoZWNrYm94Jykge1xyXG4gICAgICAgICAgICBjb250cm9sbGVyLmFib3J0KClcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBpZiAoZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2Zvcm0nKSkge1xyXG4gICAgICAgICAgICAgICAgY2xvc2VUb2RvRm9ybShlKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnN0IGJvZHlFbGVtID0gZG9jdW1lbnQuYm9keVxyXG4gICAgICAgICAgICBjb25zdCBwcm9qZWN0QWRkVG9kb0J0biA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5wcm9qZWN0LWFkZC10b2RvLWJ0bicpXHJcbiAgICAgICAgICAgIGNvbnN0IHByb2plY3ROYW1lID0gZS50YXJnZXQuY2xvc2VzdCgnLnByb2plY3QtY29udGFpbmVyJykuaWRcclxuICAgICAgICAgICAgY29uc3QgdG9kb0VsZW0gPSBlLnRhcmdldC5jbG9zZXN0KCcudG9kby1jb250YWluZXInKVxyXG4gICAgICAgICAgICBjb25zdCB0b2RvSWQgPSB0b2RvRWxlbS5pZFxyXG4gICAgICAgICAgICBjb25zdCB0b2RvID0gZ2V0VG9kbyhwcm9qZWN0TmFtZSwgdG9kb0lkKVxyXG4gICAgICAgICAgICBpZiAodG9kbykge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZWRpdEZvcm0gPSBGb3JtKHByb2plY3ROYW1lLHRvZG8udGl0bGUsdG9kby5kZXNjLHRvZG8uZHVlRGF0ZSx0b2RvLnByaW9yaXR5LHRvZG8uaWQpXHJcbiAgICAgICAgICAgICAgICBib2R5RWxlbS5hcHBlbmQoZWRpdEZvcm0pXHJcbiAgICAgICAgICAgICAgICBib2R5RWxlbS5zdHlsZS5ncmlkVGVtcGxhdGVDb2x1bW5zID0gJzE2cmVtIDFmciAyNHJlbSdcclxuICAgICAgICAgICAgICAgIGJvZHlFbGVtLnN0eWxlLmdyaWRUZW1wbGF0ZUFyZWFzID0gJ1wic2lkZWJhciBoZWFkZXIgZm9ybVwiIFwic2lkZWJhciBjb250ZW50IGZvcm1cIidcclxuXHJcbiAgICAgICAgICAgICAgICBjb25zdCBmb3JtVGl0bGUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjZm9ybS10aXRsZScpXHJcbiAgICAgICAgICAgICAgICBmb3JtVGl0bGUuZm9jdXMoKVxyXG4gICAgICAgICAgICAgICAgcHJvamVjdEFkZFRvZG9CdG4uc3R5bGUuZGlzcGxheSA9ICdub25lJ1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBzdWJtaXRUb2RvRm9ybShlLCBpZD0nJykge1xyXG4gICAgY29uc3Qga2V5UHJlc3NlZCA9IGUua2V5XHJcbiAgICBpZiAoa2V5UHJlc3NlZCAmJiBrZXlQcmVzc2VkID09ICdFbnRlcicgfHwgIWtleVByZXNzZWQgJiYgZS50YXJnZXQpIHtcclxuICAgICAgICBlLnByZXZlbnREZWZhdWx0KClcclxuICAgICAgICBjb25zdCBmb3JtICA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyN0b2RvLWZvcm0nKVxyXG4gICAgICAgIGNvbnN0IHRpdGxlID1mb3JtWyd0b2RvLWZvcm0tdGl0bGUnXS52YWx1ZVxyXG4gICAgICAgIGNvbnN0IGRlc2MgPSBmb3JtWyd0b2RvLWZvcm0tZGVzYyddLnZhbHVlXHJcbiAgICAgICAgY29uc3QgZHVlRGF0ZSA9IGZvcm1bJ3RvZG8tZm9ybS1kdWVkYXRlJ10udmFsdWVcclxuICAgICAgICBjb25zdCBwcmlvcml0eSA9IGZvcm1bJ3RvZG8tZm9ybS1wcmlvcml0eSddLnZhbHVlXHJcbiAgICAgICAgY29uc3QgcHJvamVjdFRpdGxlID0gZm9ybS5jbG9zZXN0KCcucHJvamVjdC1jb250YWluZXInKS5pZFxyXG4gICAgICAgIGlmIChpZCkge1xyXG4gICAgICAgICAgICBlZGl0VG9kbyhwcm9qZWN0VGl0bGUsdGl0bGUsZGVzYyxkdWVEYXRlLHByaW9yaXR5LGlkKVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIG5ld1RvZG8ocHJvamVjdFRpdGxlLHRpdGxlLGRlc2MsZHVlRGF0ZSxwcmlvcml0eSlcclxuICAgICAgICB9XHJcbiAgICAgICAgbG9hZENvbnRlbnQoKVxyXG4gICAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBzZXRQcmlvcml0eUNvbG9yKHByaW9yaXR5KSB7XHJcbiAgICBzd2l0Y2ggKHByaW9yaXR5KSB7XHJcbiAgICAgICAgY2FzZSAnMSc6XHJcbiAgICAgICAgICAgIHJldHVybiByZWRcclxuICAgICAgICBjYXNlICcyJzpcclxuICAgICAgICAgICAgcmV0dXJuIG9yYW5nZVxyXG4gICAgICAgIGNhc2UgJzMnOlxyXG4gICAgICAgICAgICByZXR1cm4gYmx1ZVxyXG4gICAgICAgIGNhc2UgJzQnOlxyXG4gICAgICAgICAgICByZXR1cm4gZ3JlZW5cclxuICAgIH1cclxufVxyXG5cclxuZnVuY3Rpb24gY29tcGxldGVUb2RvKGUpIHtcclxuICAgIGlmIChlLnRhcmdldCkge1xyXG4gICAgICAgIGNvbnN0IHRvZG9FbGVtID0gZS50YXJnZXQuY2xvc2VzdCgnLnRvZG8tY29udGFpbmVyJylcclxuICAgICAgICBjb25zdCBpZCA9IHRvZG9FbGVtLmlkXHJcbiAgICAgICAgY29uc3QgcHJvamVjdE5hbWUgPSBlLnRhcmdldC5jbG9zZXN0KCcucHJvamVjdC1jb250YWluZXInKS5pZFxyXG4gICAgICAgIGRlbGV0ZVRvZG8ocHJvamVjdE5hbWUsIGlkKVxyXG4gICAgICAgIGxvYWRDb250ZW50KClcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IHtsb2FkQ29udGVudCwgY3JlYXRlVG9kbywgY3JlYXRlUHJvamVjdH0iLCJpbXBvcnQgdG9kb0xpc3QgZnJvbSBcIi4uXCI7XHJcbmltcG9ydCBnZXRUb2RvIGZyb20gXCIuL2dldFRvZG9cIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHJlYXJyYW5nZVRvZG8ocHJvamVjdE5hbWUsdG9kb0lkLCBvbGRMb2MsbmV3TG9jKSB7XHJcbiAgICBjb25zdCB0b2RvT2JqID0gZ2V0VG9kbyhwcm9qZWN0TmFtZSx0b2RvSWQpXHJcbiAgICB0b2RvTGlzdFtuZXdMb2NbMF1dW3Byb2plY3ROYW1lXS5zcGxpY2Uob2xkTG9jWzFdLDEpXHJcbiAgICB0b2RvTGlzdFtuZXdMb2NbMF1dW3Byb2plY3ROYW1lXS5zcGxpY2UobmV3TG9jWzFdLDAsdG9kb09iailcclxufSIsImltcG9ydCB7Z2VuZXJhdGVFbGVtZW50LCBjbGVhclNlbGVjdGVkfSBmcm9tIFwiLi9oZWxwZXJcIjtcclxuaW1wb3J0IHRvZG9MaXN0IGZyb20gXCIuXCI7XHJcbmltcG9ydCB7IGNyZWF0ZVByb2plY3QsIGxvYWRDb250ZW50IH0gZnJvbSBcIi4vY29udGVudFwiO1xyXG5pbXBvcnQgbmV3UHJvamVjdCBmcm9tIFwiLi9wcm9qZWN0L25ld1Byb2plY3RcIjtcclxuaW1wb3J0IGVkaXRQcm9qZWN0IGZyb20gXCIuL3Byb2plY3QvZWRpdFByb2plY3RcIjtcclxuaW1wb3J0IGRlbGV0ZVByb2plY3QgZnJvbSBcIi4vcHJvamVjdC9kZWxldGVQcm9qZWN0XCI7XHJcbmltcG9ydCB7IHJlbG9hZFByb2plY3RPcHRpb25zIH0gZnJvbSBcIi4vZm9ybVwiO1xyXG5pbXBvcnQgZ2V0UHJvamVjdElkeCBmcm9tIFwiLi9wcm9qZWN0L2dldFByb2plY3RJZHhcIjtcclxuaW1wb3J0IHJlYXJyYW5nZVByb2plY3QgZnJvbSBcIi4vcHJvamVjdC9yZWFycmFuZ2VQcm9qZWN0XCI7XHJcbmltcG9ydCBsaXN0UHJvamVjdHMgZnJvbSBcIi4vcHJvamVjdC9saXN0UHJvamVjdHNcIjtcclxuXHJcblxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBTaWRlYmFyKCkge1xyXG4gICAgY29uc3Qgc2lkZWJhciA9IGdlbmVyYXRlRWxlbWVudCgnZGl2JywnJywnc2lkZWJhcicpXHJcbiAgICAvLyBjb25zdCB1c2VyQ29udGFpbmVyID0gZ2VuZXJhdGVFbGVtZW50KCdkaXYnLCcnLCd1c2VyLWNvbnRhaW5lcicpXHJcbiAgICAvLyBjb25zdCB1c2VySWNvbiA9IGdlbmVyYXRlRWxlbWVudCgnaW1nJywndXNlci1pY29uJywnLi4vZGlzdC9pbWFnZXMvbG9nby5wbmcnLCdVc2VyIFByb2ZpbGUgSWNvbicpXHJcbiAgICAvLyBjb25zdCB1c2VyTmFtZSA9IGdlbmVyYXRlRWxlbWVudCgnZGl2JywnJywndXNlci1uYW1lJywna2FpcmF5em8nKVxyXG4gICAgY29uc3Qgc2lkZWJhclRpdGxlQ29udGFpbmVyID0gZ2VuZXJhdGVFbGVtZW50KCdkaXYnLCcnLCdzaWRlYmFyLXRpdGxlLWNvbnRhaW5lcicpXHJcbiAgICBjb25zdCBzaWRlYmFyVGl0bGUgPSBnZW5lcmF0ZUVsZW1lbnQoJ2RpdicsJycsJ3NpZGViYXItdGl0bGUnLCdQcm9qZWN0cycpXHJcbiAgICBjb25zdCBoaWRlU2lkZWJhckJ0biA9IGdlbmVyYXRlRWxlbWVudCgnZGl2JywnJywnaGlkZS1zaWRlYmFyLWJ0bicpXHJcbiAgICBoaWRlU2lkZWJhckJ0bi5pbm5lckhUTUwgPSAnPGkgY2xhc3M9XCJmYS1zb2xpZCBmYS1iYXJzXCI+PC9pPidcclxuICAgIGhpZGVTaWRlYmFyQnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywoZSk9PmhpZGVTaWRlYmFyKGUpKVxyXG4gICAgc2lkZWJhclRpdGxlQ29udGFpbmVyLmFwcGVuZChzaWRlYmFyVGl0bGUsaGlkZVNpZGViYXJCdG4pXHJcblxyXG4gICAgY29uc3Qgc2lkZWJhckFkZFByb2plY3RCdG4gPSBnZW5lcmF0ZUVsZW1lbnQoJ2RpdicsJycsJ3NpZGViYXItYWRkLXByb2plY3QtYnRuJylcclxuICAgIGNvbnN0IHNpZGViYXJBZGRQcm9qZWN0SWNvbiA9IGdlbmVyYXRlRWxlbWVudCgnZGl2JywnJywnc2lkZWJhci1hZGQtcHJvamVjdC1pY29uJylcclxuICAgIHNpZGViYXJBZGRQcm9qZWN0SWNvbi5pbm5lckhUTUwgPSAnPGkgY2xhc3M9XCJmYS1zb2xpZCBmYS1wbHVzXCI+PC9pPidcclxuICAgIGNvbnN0IHNpZGViYXJQcm9qZWN0QWRkVGV4dCA9IGdlbmVyYXRlRWxlbWVudCgnZGl2JywnJywnc2lkZWJhci1wcm9qZWN0LWFkZC10ZXh0JywnQWRkIE5ldyBQcm9qZWN0JylcclxuICAgIHNpZGViYXJBZGRQcm9qZWN0QnRuLmFwcGVuZChzaWRlYmFyQWRkUHJvamVjdEljb24sc2lkZWJhclByb2plY3RBZGRUZXh0KVxyXG4gICAgLy8gY29uc3Qgc2lkZWJhclByb2plY3RzSGlkZUJ0biA9IGdlbmVyYXRlRWxlbWVudCgnZGl2JywnJywnc2lkZWJhci1wcm9qZWN0cy1oaWRlLWJ0bicpXHJcbiAgICAvLyBzaWRlYmFyUHJvamVjdHNIaWRlQnRuLmlubmVySFRNTCA9ICc8aSBjbGFzcz1cImZhLXNvbGlkIGZhLWFuZ2xlcy1sZWZ0XCI+PC9pPidcclxuICAgIFxyXG4gICAgY29uc3Qgc2lkZWJhclByb2plY3RzID0gZ2VuZXJhdGVFbGVtZW50KCdkaXYnLCcnLCdzaWRlYmFyLXByb2plY3RzJylcclxuICAgIFxyXG4gICAgc2lkZWJhckFkZFByb2plY3RCdG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLChlKSA9PiBzaG93UHJvamVjdEZvcm0oZSkpXHJcbiAgICAvLyB1c2VyQ29udGFpbmVyLmFwcGVuZCh1c2VySWNvbix1c2VyTmFtZSxoaWRlQnRuKVxyXG4gICAgc2lkZWJhclRpdGxlQ29udGFpbmVyLmFwcGVuZChzaWRlYmFyVGl0bGUpXHJcbiAgICBzaWRlYmFyLmFwcGVuZChzaWRlYmFyVGl0bGVDb250YWluZXIsc2lkZWJhclByb2plY3RzLCBzaWRlYmFyQWRkUHJvamVjdEJ0bilcclxuXHJcbiAgICByZXR1cm4gc2lkZWJhclxyXG59XHJcblxyXG5mdW5jdGlvbiBoaWRlU2lkZWJhcihlKSB7XHJcbiAgICBpZiAoZS50YXJnZXQpIHtcclxuICAgICAgICBjb25zdCBzaWRlYmFyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3NpZGViYXInKVxyXG4gICAgICAgIGNvbnN0IGhpZGVTaWRlYmFyQnRuID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2hpZGUtc2lkZWJhci1idG4nKVxyXG4gICAgICAgIGNvbnN0IHNob3dTaWRlYmFyQnRuID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3Nob3ctc2lkZWJhci1idG4nKVxyXG4gICAgICAgIHNpZGViYXIuc3R5bGUuZGlzcGxheSA9ICdub25lJ1xyXG4gICAgICAgIGhpZGVTaWRlYmFyQnRuLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSdcclxuICAgICAgICBkb2N1bWVudC5ib2R5LnN0eWxlID0gJ2dyaWQtdGVtcGxhdGUtYXJlYXM6XCJoZWFkZXJcIiBcImNvbnRlbnRcIjtncmlkLXRlbXBsYXRlLWNvbHVtbnM6IDFmcidcclxuICAgICAgICBzaG93U2lkZWJhckJ0bi5zdHlsZS5kaXNwbGF5ID0gJ2ZsZXgnXHJcbiAgICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGxvYWRQcm9qZWN0cygpIHtcclxuICAgIGNvbnN0IHNpZGViYXJQcm9qZWN0cyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNzaWRlYmFyLXByb2plY3RzJylcclxuICAgIHNpZGViYXJQcm9qZWN0cy5pbm5lckhUTUwgPSAnJ1xyXG4gICAgZm9yIChjb25zdCBwcm9qSWR4IGluIHRvZG9MaXN0KSB7XHJcbiAgICAgICAgY29uc3QgcHJvamVjdCA9IHRvZG9MaXN0W3Byb2pJZHhdXHJcbiAgICAgICAgY29uc3QgcHJvamVjdE5hbWUgPSBPYmplY3Qua2V5cyhwcm9qZWN0KVswXVxyXG4gICAgICAgIGNvbnN0IHNpZGViYXJTZWdtZW50ID0gY3JlYXRlU2VnbWVudCgpXHJcbiAgICAgICAgY29uc3Qgc2lkZWJhclByb2plY3QgPSBjcmVhdGVTaWRlYmFyUHJvamVjdChwcm9qZWN0TmFtZSlcclxuICAgICAgICBzaWRlYmFyUHJvamVjdHMuYXBwZW5kKHNpZGViYXJTZWdtZW50LHNpZGViYXJQcm9qZWN0KVxyXG4gICAgfVxyXG4gICAgY29uc3Qgc2lkZWJhclNlZ21lbnQgPSBjcmVhdGVTZWdtZW50KClcclxuICAgIHNpZGViYXJQcm9qZWN0cy5hcHBlbmQoc2lkZWJhclNlZ21lbnQpXHJcbiAgICByZWxvYWRQcm9qZWN0T3B0aW9ucygpXHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNyZWF0ZVNpZGViYXJQcm9qZWN0KHByb2plY3QpIHtcclxuICAgIGNvbnN0IHNpZGViYXJQcm9qZWN0ID0gZ2VuZXJhdGVFbGVtZW50KCdkaXYnLCdzaWRlYmFyLXByb2plY3QnLHByb2plY3QpXHJcbiAgICBjb25zdCBzaWRlYmFyUHJvamVjdE5hbWUgPSBnZW5lcmF0ZUVsZW1lbnQoJ2RpdicsJ3NpZGViYXItcHJvamVjdC1uYW1lJywnJywgcHJvamVjdClcclxuICAgIHNpZGViYXJQcm9qZWN0LmFwcGVuZChzaWRlYmFyUHJvamVjdE5hbWUpXHJcblxyXG4gICAgaWYgKCFbJ1VwY29taW5nJywnVG9kYXknXS5pbmNsdWRlcyhwcm9qZWN0KSkge1xyXG4gICAgICAgIGNvbnN0IHNpZGViYXJFZGl0QnRuID0gZ2VuZXJhdGVFbGVtZW50KCdkaXYnLCdzaWRlYmFyLWVkaXQtYnRuJylcclxuICAgICAgICBzaWRlYmFyRWRpdEJ0bi5pbm5lckhUTUwgPSAnPGkgY2xhc3M9XCJmYS1zb2xpZCBmYS1wZW5cIj48L2k+J1xyXG4gICAgICAgIGNvbnN0IHNpZGViYXJEZWxldGVCdG4gPSBnZW5lcmF0ZUVsZW1lbnQoJ2RpdicsJ3NpZGViYXItZGVsZXRlLWJ0bicpXHJcbiAgICAgICAgc2lkZWJhckRlbGV0ZUJ0bi5pbm5lckhUTUwgPSAnPGkgY2xhc3M9XCJmYS1zb2xpZCBmYS10cmFzaFwiPjwvaT4nXHJcbiAgICAgICAgc2lkZWJhckVkaXRCdG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLChlKT0+c2hvd1Byb2plY3RFZGl0Rm9ybShlKSlcclxuICAgICAgICBzaWRlYmFyRGVsZXRlQnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywoZSk9PnJlbW92ZVByb2plY3QoZSkpXHJcbiAgICBcclxuICAgICAgICBzaWRlYmFyUHJvamVjdC5hcHBlbmQoc2lkZWJhckVkaXRCdG4sc2lkZWJhckRlbGV0ZUJ0bilcclxuICAgIH1cclxuICAgIHNpZGViYXJQcm9qZWN0LmRyYWdnYWJsZSA9IHRydWVcclxuICAgIGNvbnN0IGNvbnRyb2xsZXIgPSBuZXcgQWJvcnRDb250cm9sbGVyKCk7XHJcbiAgICBzaWRlYmFyUHJvamVjdC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsKGUpPT5oYW5kbGVQcm9qZWN0U2VsZWN0KGUsY29udHJvbGxlcikse3NpZ25hbDogY29udHJvbGxlci5zaWduYWx9KVxyXG4gICAgc2lkZWJhclByb2plY3QuYWRkRXZlbnRMaXN0ZW5lcignZHJhZ3N0YXJ0JywoZSk9PmhhbmRsZVByb2plY3REcmFnKGUpKVxyXG4gICAgc2lkZWJhclByb2plY3QuYWRkRXZlbnRMaXN0ZW5lcignZHJhZ292ZXInLChlKT0+ZS5wcmV2ZW50RGVmYXVsdCgpKVxyXG4gICAgc2lkZWJhclByb2plY3QuYWRkRXZlbnRMaXN0ZW5lcignZHJhZ2VuZCcsKGUpPT5oYW5kbGVQcm9qZWN0RHJvcChlKSlcclxuICAgIHJldHVybiBzaWRlYmFyUHJvamVjdFxyXG59XHJcblxyXG5mdW5jdGlvbiBjcmVhdGVTZWdtZW50KCkge1xyXG4gICAgY29uc3Qgc2VnbWVudCA9IGdlbmVyYXRlRWxlbWVudCgnZGl2Jywnc2VnbWVudCcpXHJcbiAgICBzZWdtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2RyYWdvdmVyJywoZSk9PmhhbmRsZVNlZ21lbnREcmFnb3ZlcihlKSlcclxuICAgIHNlZ21lbnQuYWRkRXZlbnRMaXN0ZW5lcignZHJhZ2xlYXZlJywoZSk9PmhhbmRsZVNlZ21lbnREcmFnbGVhdmUoZSkpXHJcbiAgICByZXR1cm4gc2VnbWVudFxyXG59XHJcblxyXG5mdW5jdGlvbiBwcm9qZWN0Rm9ybShwcm9qZWN0VGl0bGU9JycpIHtcclxuXHJcbiAgICBjb25zdCBwcm9qZWN0Rm9ybUVsZW0gPSBnZW5lcmF0ZUVsZW1lbnQoJ2Zvcm0nLCcnLCdwcm9qZWN0LWZvcm0nKVxyXG4gICAgaWYgKHByb2plY3RUaXRsZSkge1xyXG4gICAgICAgIGNvbnN0IHByb2plY3RGb3JtVGl0bGUgPSBnZW5lcmF0ZUVsZW1lbnQoJ2lucHV0JywndGV4dCcsJ3Byb2plY3QtZm9ybS10aXRsZScpXHJcbiAgICAgICAgcHJvamVjdEZvcm1UaXRsZS5kZWZhdWx0VmFsdWUgPSBwcm9qZWN0VGl0bGVcclxuICAgICAgICBjb25zdCBwcm9qZWN0Rm9ybUFkZEJ0biA9IGdlbmVyYXRlRWxlbWVudCgnZGl2JywnJywncHJvamVjdC1mb3JtLWFkZC1idG4nKVxyXG4gICAgICAgIHByb2plY3RGb3JtQWRkQnRuLmlubmVySFRNTCA9ICc8aSBjbGFzcz1cImZhLXNvbGlkIGZhLWNoZWNrIGZhLXhsXCI+PC9pPidcclxuICAgICAgICBjb25zdCBwcm9qZWN0Rm9ybUNsb3NlQnRuID0gZ2VuZXJhdGVFbGVtZW50KCdkaXYnLCcnLCdwcm9qZWN0LWZvcm0tY2xvc2UtYnRuJylcclxuICAgICAgICBwcm9qZWN0Rm9ybUNsb3NlQnRuLmlubmVySFRNTCA9ICc8aSBjbGFzcz1cImZhLXNvbGlkIGZhLXggZmEtbGdcIj48L2k+J1xyXG5cclxuICAgICAgICBwcm9qZWN0Rm9ybUNsb3NlQnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywoZSk9PmNsb3NlUHJvamVjdEVkaXRGb3JtKGUpKVxyXG4gICAgICAgIHByb2plY3RGb3JtQWRkQnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGUpID0+IGVkaXRQcm9qZWN0RWxlbShlLCBwcm9qZWN0VGl0bGUpKVxyXG4gICAgICAgIHByb2plY3RGb3JtRWxlbS5hZGRFdmVudExpc3RlbmVyKCdzdWJtaXQnLChlKT0+ZWRpdFByb2plY3RFbGVtKGUsIHByb2plY3RUaXRsZSkpXHJcbiAgICAgICAgcHJvamVjdEZvcm1FbGVtLmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLChlKT0+ZWRpdFByb2plY3RFbGVtKGUsIHByb2plY3RUaXRsZSkpXHJcbiAgICAgICAgcHJvamVjdEZvcm1FbGVtLmFwcGVuZChwcm9qZWN0Rm9ybVRpdGxlLHByb2plY3RGb3JtQ2xvc2VCdG4scHJvamVjdEZvcm1BZGRCdG4pXHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIGNvbnN0IHByb2plY3RGb3JtVGl0bGUgPSBnZW5lcmF0ZUVsZW1lbnQoJ2lucHV0JywndGV4dCcsJ3Byb2plY3QtZm9ybS10aXRsZScsJ1Byb2plY3QgTmFtZScpXHJcbiAgICAgICAgY29uc3QgcHJvamVjdEZvcm1DbG9zZUJ0biA9IGdlbmVyYXRlRWxlbWVudCgnZGl2JywnJywncHJvamVjdC1mb3JtLWNsb3NlLWJ0bicpXHJcbiAgICAgICAgcHJvamVjdEZvcm1DbG9zZUJ0bi5pbm5lckhUTUwgPSAnPGkgY2xhc3M9XCJmYS1zb2xpZCBmYS14IGZhLWxnXCI+PC9pPidcclxuICAgICAgICBjb25zdCBwcm9qZWN0Rm9ybUFkZEJ0biA9IGdlbmVyYXRlRWxlbWVudCgnZGl2JywnJywncHJvamVjdC1mb3JtLWFkZC1idG4nKVxyXG4gICAgICAgIHByb2plY3RGb3JtQWRkQnRuLmlubmVySFRNTCA9ICc8aSBjbGFzcz1cImZhLXNvbGlkIGZhLWNpcmNsZS1wbHVzIGZhLWxnXCI+PC9pPidcclxuICAgICAgICBcclxuICAgICAgICBwcm9qZWN0Rm9ybUNsb3NlQnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywoZSk9PmNsb3NlUHJvamVjdEZvcm0oZSkpXHJcbiAgICAgICAgcHJvamVjdEZvcm1BZGRCdG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZSkgPT4gYWRkUHJvamVjdChlKSlcclxuICAgICAgICBwcm9qZWN0Rm9ybUVsZW0uYWRkRXZlbnRMaXN0ZW5lcignc3VibWl0JywoZSk9PmFkZFByb2plY3QoZSkpXHJcbiAgICAgICAgcHJvamVjdEZvcm1FbGVtLmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLChlKT0+YWRkUHJvamVjdChlKSlcclxuICAgICAgICBwcm9qZWN0Rm9ybUVsZW0uYXBwZW5kKHByb2plY3RGb3JtVGl0bGUscHJvamVjdEZvcm1DbG9zZUJ0bixwcm9qZWN0Rm9ybUFkZEJ0bilcclxuICAgIH1cclxuXHJcblxyXG4gICAgcmV0dXJuIHByb2plY3RGb3JtRWxlbVxyXG59XHJcblxyXG5mdW5jdGlvbiBzZWxlY3RQcm9qZWN0KHByb2plY3ROYW1lKSB7XHJcbiAgICBjb25zdCBzaWRlYmFyUHJvamVjdHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuc2lkZWJhci1wcm9qZWN0JylcclxuICAgIGNsZWFyU2VsZWN0ZWQoc2lkZWJhclByb2plY3RzKVxyXG4gICAgY29uc3Qgc2lkZWJhclByb2plY3QgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjc2lkZWJhci1wcm9qZWN0cycpLnF1ZXJ5U2VsZWN0b3IoYFtpZD0nJHtwcm9qZWN0TmFtZX0nXWApXHJcbiAgICBzaWRlYmFyUHJvamVjdC5jbGFzc0xpc3QuYWRkKCdzZWxlY3RlZCcpXHJcbn1cclxuXHJcbmZ1bmN0aW9uIGhhbmRsZVByb2plY3RTZWxlY3QoZSxjb250cm9sbGVyKSB7XHJcbiAgICBpZiAoZS50YXJnZXQpIHtcclxuICAgICAgICBpZiAoQXJyYXkoZS50YXJnZXQuY2xhc3NMaXN0WzBdKS5pbmNsdWRlcygnZmEtc29saWQnKSl7XHJcbiAgICAgICAgICAgIGNvbnRyb2xsZXIuYWJvcnQoKVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHByb2plY3ROYW1lID0gZS50YXJnZXQuY2xvc2VzdCgnLnNpZGViYXItcHJvamVjdCcpLmlkXHJcbiAgICAgICAgICAgIHNlbGVjdFByb2plY3QocHJvamVjdE5hbWUpXHJcbiAgICAgICAgICAgIGxvYWRDb250ZW50KHByb2plY3ROYW1lKVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuZnVuY3Rpb24gaGFuZGxlUHJvamVjdERyYWcoZSkge1xyXG4gICAgaWYgKGUudGFyZ2V0KSB7XHJcbiAgICAgICAgY29uc3QgcHJvamVjdEVsZW0gPSBlLnRhcmdldC5jbG9zZXN0KCcuc2lkZWJhci1wcm9qZWN0JylcclxuICAgICAgICBwcm9qZWN0RWxlbS5jbGFzc0xpc3QuYWRkKCdkcmFnZ2luZycpXHJcbiAgICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGhhbmRsZVNlZ21lbnREcmFnb3ZlcihlKSB7XHJcbiAgICBpZiAoZS50YXJnZXQpIHtcclxuICAgICAgICBlLnByZXZlbnREZWZhdWx0KClcclxuICAgICAgICBjb25zdCBzZWdtZW50RWxlbSA9IGUudGFyZ2V0XHJcbiAgICAgICAgY29uc3QgZHJhZ2dpbmdFbGVtID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmRyYWdnaW5nJylcclxuICAgICAgICBpZiAoc2VnbWVudEVsZW0ucGFyZW50RWxlbWVudCA9PSBkcmFnZ2luZ0VsZW0ucGFyZW50RWxlbWVudCAmJiBzZWdtZW50RWxlbSAhPSBkcmFnZ2luZ0VsZW0ubmV4dFNpYmxpbmcgJiYgc2VnbWVudEVsZW0gIT0gZHJhZ2dpbmdFbGVtLnByZXZpb3VzU2libGluZyl7XHJcbiAgICAgICAgICAgIHNlZ21lbnRFbGVtLmNsYXNzTGlzdC5hZGQoJ2hvdmVyaW5nJylcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGhhbmRsZVNlZ21lbnREcmFnbGVhdmUoZSkge1xyXG4gICAgaWYgKGUudGFyZ2V0KSB7XHJcbiAgICAgICAgY29uc3Qgc2VnbWVudEVsZW0gPSBlLnRhcmdldFxyXG4gICAgICAgIHNlZ21lbnRFbGVtLmNsYXNzTGlzdC5yZW1vdmUoJ2hvdmVyaW5nJylcclxuICAgIH1cclxufVxyXG5cclxuZnVuY3Rpb24gaGFuZGxlUHJvamVjdERyb3AoZSkge1xyXG4gICAgY29uc3Qgc2VnbWVudEVsZW0gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuaG92ZXJpbmcnKVxyXG4gICAgaWYgKGUudGFyZ2V0ICYmIHNlZ21lbnRFbGVtKSB7XHJcbiAgICAgICAgY29uc3QgcHJvamVjdERyYWdnaW5nRWxlbSA9IGUudGFyZ2V0LmNsb3Nlc3QoJy5zaWRlYmFyLXByb2plY3QnKVxyXG4gICAgICAgIGNvbnN0IHByb2plY3ROYW1lID0gcHJvamVjdERyYWdnaW5nRWxlbS5pZFxyXG4gICAgICAgIGNvbnN0IG9sZElkeCA9IGdldFByb2plY3RJZHgocHJvamVjdE5hbWUpXHJcbiAgICAgICAgY29uc3QgcHJvamVjdERyb3BwaW5nRWxlbSA9IHNlZ21lbnRFbGVtLm5leHRTaWJsaW5nXHJcbiAgICAgICAgbGV0IG5ld0lkeFxyXG4gICAgICAgIGlmIChwcm9qZWN0RHJvcHBpbmdFbGVtKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHByb2plY3REcm9wcGluZ0lkeCA9IGdldFByb2plY3RJZHgocHJvamVjdERyb3BwaW5nRWxlbS5pZClcclxuICAgICAgICAgICAgaWYgKG9sZElkeCA8IHByb2plY3REcm9wcGluZ0lkeCkge1xyXG4gICAgICAgICAgICAgICAgbmV3SWR4ID0gcHJvamVjdERyb3BwaW5nSWR4IC0gMVxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgbmV3SWR4ID0gcHJvamVjdERyb3BwaW5nSWR4XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBuZXdJZHggPSBsaXN0UHJvamVjdHMoKS5sZW5ndGhcclxuICAgICAgICB9XHJcbiAgICAgICAgcmVhcnJhbmdlUHJvamVjdChvbGRJZHgsIG5ld0lkeClcclxuICAgICAgICBwcm9qZWN0RHJhZ2dpbmdFbGVtLmNsYXNzTGlzdC5yZW1vdmUoJ2RyYWdnaW5nJylcclxuICAgICAgICBsb2FkUHJvamVjdHMoKVxyXG4gICAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBzaG93UHJvamVjdEZvcm0oZSkge1xyXG4gICAgaWYgKGUudGFyZ2V0KSB7XHJcbiAgICAgICAgY29uc3Qgc2lkZWJhclByb2plY3RzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3NpZGViYXItcHJvamVjdHMnKVxyXG4gICAgICAgIGNvbnN0IHByb2plY3RGb3JtRWxlbSA9IHByb2plY3RGb3JtKClcclxuICAgICAgICBzaWRlYmFyUHJvamVjdHMuYXBwZW5kKHByb2plY3RGb3JtRWxlbSlcclxuICAgICAgICBjb25zdCBwcm9qZWN0Rm9ybVRpdGxlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3Byb2plY3QtZm9ybS10aXRsZScpXHJcbiAgICAgICAgY29uc3Qgc2lkZWJhckFkZFByb2plY3RCdG4gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjc2lkZWJhci1hZGQtcHJvamVjdC1idG4nKVxyXG4gICAgICAgIHByb2plY3RGb3JtVGl0bGUuZm9jdXMoKVxyXG4gICAgICAgIHNpZGViYXJBZGRQcm9qZWN0QnRuLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSdcclxuXHJcbiAgICAgICAgY29uc3Qgc2lkZWJhckVkaXRCdG5zID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLnNpZGViYXItZWRpdC1idG4nKVxyXG4gICAgICAgIGNvbnN0IHNpZGViYXJEZWxldGVCdG5zID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLnNpZGViYXItZGVsZXRlLWJ0bicpXHJcbiAgICAgICAgY29uc3QgY29tYmluZWQgPSBbLi4uc2lkZWJhckVkaXRCdG5zLCAuLi5zaWRlYmFyRGVsZXRlQnRuc11cclxuICAgICAgICBjb21iaW5lZC5mb3JFYWNoKGVsZW0gPT4ge1xyXG4gICAgICAgICAgICBlbGVtLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSdcclxuICAgICAgICB9KVxyXG4gICAgfVxyXG5cclxufVxyXG5cclxuZnVuY3Rpb24gY2xvc2VQcm9qZWN0Rm9ybShlKSB7XHJcbiAgICBpZiAoZS50YXJnZXQpIHtcclxuICAgICAgICBlLnByZXZlbnREZWZhdWx0KClcclxuICAgICAgICBjb25zdCBwcm9qZWN0Rm9ybSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNwcm9qZWN0LWZvcm0nKVxyXG4gICAgICAgIGNvbnN0IHNpZGViYXJBZGRQcm9qZWN0QnRuID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3NpZGViYXItYWRkLXByb2plY3QtYnRuJylcclxuICAgICAgICBwcm9qZWN0Rm9ybS5yZW1vdmUoKVxyXG4gICAgICAgIHNpZGViYXJBZGRQcm9qZWN0QnRuLnN0eWxlLmRpc3BsYXkgPSAnZmxleCdcclxuXHJcbiAgICAgICAgY29uc3Qgc2lkZWJhckVkaXRCdG5zID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLnNpZGViYXItZWRpdC1idG4nKVxyXG4gICAgICAgIGNvbnN0IHNpZGViYXJEZWxldGVCdG5zID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLnNpZGViYXItZGVsZXRlLWJ0bicpXHJcbiAgICAgICAgY29uc3QgY29tYmluZWQgPSBbLi4uc2lkZWJhckVkaXRCdG5zLCAuLi5zaWRlYmFyRGVsZXRlQnRuc11cclxuICAgICAgICBjb21iaW5lZC5mb3JFYWNoKGVsZW0gPT4ge1xyXG4gICAgICAgICAgICBlbGVtLnN0eWxlLmRpc3BsYXkgPSAnZmxleCdcclxuICAgICAgICB9KVxyXG4gICAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBzaG93UHJvamVjdEVkaXRGb3JtKGUpIHtcclxuICAgIGlmIChlLnRhcmdldCkge1xyXG4gICAgICAgIGNvbnN0IHNpZGViYXJQcm9qZWN0ID0gZS50YXJnZXQuY2xvc2VzdCgnLnNpZGViYXItcHJvamVjdCcpXHJcbiAgICAgICAgY29uc3QgcHJvamVjdFRpdGxlID0gc2lkZWJhclByb2plY3QuaWRcclxuICAgICAgICBjb25zdCBwcm9qZWN0Rm9ybUVsZW0gPSBwcm9qZWN0Rm9ybShwcm9qZWN0VGl0bGUpXHJcbiAgICAgICAgc2lkZWJhclByb2plY3QucmVwbGFjZVdpdGgocHJvamVjdEZvcm1FbGVtKVxyXG4gICAgICAgIGZvY3VzUHJvamVjdFRpdGxlKClcclxuICAgICAgICBjb25zdCBzaWRlYmFyQWRkUHJvamVjdEJ0biA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNzaWRlYmFyLWFkZC1wcm9qZWN0LWJ0bicpXHJcbiAgICAgICAgc2lkZWJhckFkZFByb2plY3RCdG4uc3R5bGUuZGlzcGxheSA9ICdub25lJ1xyXG4gICAgICAgIGNvbnN0IHNpZGViYXJFZGl0QnRucyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5zaWRlYmFyLWVkaXQtYnRuJylcclxuICAgICAgICBjb25zdCBzaWRlYmFyRGVsZXRlQnRucyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5zaWRlYmFyLWRlbGV0ZS1idG4nKVxyXG4gICAgICAgIGNvbnN0IGNvbWJpbmVkID0gWy4uLnNpZGViYXJFZGl0QnRucywgLi4uc2lkZWJhckRlbGV0ZUJ0bnNdXHJcbiAgICAgICAgY29tYmluZWQuZm9yRWFjaChlbGVtID0+IHtcclxuICAgICAgICAgICAgZWxlbS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnXHJcbiAgICAgICAgfSlcclxuICAgIH1cclxufVxyXG5cclxuZnVuY3Rpb24gY2xvc2VQcm9qZWN0RWRpdEZvcm0oZSkge1xyXG4gICAgaWYgKGUudGFyZ2V0KSB7XHJcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpXHJcbiAgICAgICAgY29uc3Qgc2lkZWJhckFkZFByb2plY3RCdG4gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjc2lkZWJhci1hZGQtcHJvamVjdC1idG4nKVxyXG4gICAgICAgIHNpZGViYXJBZGRQcm9qZWN0QnRuLnN0eWxlLmRpc3BsYXkgPSAnZmxleCdcclxuICAgICAgICBsb2FkUHJvamVjdHMoKVxyXG4gICAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBmb2N1c1Byb2plY3RUaXRsZSgpIHtcclxuICAgIGNvbnN0IHByb2plY3RGb3JtVGl0bGUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjcHJvamVjdC1mb3JtLXRpdGxlJylcclxuICAgIGlmIChwcm9qZWN0Rm9ybVRpdGxlLnZhbHVlKSB7XHJcbiAgICAgICAgY29uc3QgY3Vyc29yUG9zID0gcHJvamVjdEZvcm1UaXRsZS52YWx1ZS5sZW5ndGhcclxuICAgICAgICBwcm9qZWN0Rm9ybVRpdGxlLnNlbGVjdGlvblN0YXJ0ID0gcHJvamVjdEZvcm1UaXRsZS5zZWxlY3Rpb25FbmQgPSBjdXJzb3JQb3NcclxuICAgIH1cclxuICAgIHByb2plY3RGb3JtVGl0bGUuZm9jdXMoKVxyXG59XHJcblxyXG5mdW5jdGlvbiBhZGRQcm9qZWN0KGUpIHtcclxuICAgIGNvbnN0IGtleVByZXNzZWQgPSBlLmtleVxyXG4gICAgaWYgKGtleVByZXNzZWQgJiYga2V5UHJlc3NlZCA9PSAnRW50ZXInIHx8ICFrZXlQcmVzc2VkICYmIGUudGFyZ2V0KSB7XHJcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpXHJcbiAgICAgICAgY29uc3QgcHJvamVjdEZvcm0gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjcHJvamVjdC1mb3JtJylcclxuICAgICAgICBjb25zdCBwcm9qZWN0VGl0bGUgPSBwcm9qZWN0Rm9ybVsncHJvamVjdC1mb3JtLXRpdGxlJ10udmFsdWVcclxuICAgICAgICBjb25zdCBzaWRlYmFyQWRkUHJvamVjdEJ0biA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNzaWRlYmFyLWFkZC1wcm9qZWN0LWJ0bicpXHJcbiAgICAgICAgaWYgKHByb2plY3RUaXRsZSkge1xyXG4gICAgICAgICAgICBpZiAobmV3UHJvamVjdChwcm9qZWN0VGl0bGUpKSB7XHJcbiAgICAgICAgICAgICAgICBsb2FkQ29udGVudCgpXHJcbiAgICAgICAgICAgICAgICBsb2FkUHJvamVjdHMoKVxyXG4gICAgICAgICAgICAgICAgcHJvamVjdEZvcm0ucmVtb3ZlKClcclxuICAgICAgICAgICAgICAgIHNpZGViYXJBZGRQcm9qZWN0QnRuLnN0eWxlLmRpc3BsYXkgPSAnZmxleCdcclxuICAgICAgICAgICAgICAgIGNvbnN0IHNpZGViYXJFZGl0QnRucyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5zaWRlYmFyLWVkaXQtYnRuJylcclxuICAgICAgICAgICAgICAgIGNvbnN0IHNpZGViYXJEZWxldGVCdG5zID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLnNpZGViYXItZGVsZXRlLWJ0bicpXHJcbiAgICAgICAgICAgICAgICBjb25zdCBjb21iaW5lZCA9IFsuLi5zaWRlYmFyRWRpdEJ0bnMsIC4uLnNpZGViYXJEZWxldGVCdG5zXVxyXG4gICAgICAgICAgICAgICAgY29tYmluZWQuZm9yRWFjaChlbGVtID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBlbGVtLnN0eWxlLmRpc3BsYXkgPSAnZmxleCdcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHdpbmRvdy5hbGVydCgnUHJvamVjdCBUaXRsZSBhbHJlYWR5IGluIHVzZSEnKVxyXG4gICAgICAgICAgICAgICAgZm9jdXNQcm9qZWN0VGl0bGUoKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgd2luZG93LmFsZXJ0KCdQcm9qZWN0IFRpdGxlIGNhbm5vdCBiZSBlbXB0eSEnKVxyXG4gICAgICAgICAgICBwcm9qZWN0Rm9ybVRpdGxlLnZhbHVlID0gb2xkUHJvamVjdFRpdGxlXHJcbiAgICAgICAgICAgIGZvY3VzUHJvamVjdFRpdGxlKClcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGVkaXRQcm9qZWN0RWxlbShlLCBvbGRQcm9qZWN0VGl0bGUpIHtcclxuICAgIGNvbnN0IGtleVByZXNzZWQgPSBlLmtleVxyXG5cclxuICAgIGlmIChrZXlQcmVzc2VkICYmIGtleVByZXNzZWQgPT0gJ0VudGVyJyB8fCAha2V5UHJlc3NlZCAmJiBlLnRhcmdldCkge1xyXG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKVxyXG4gICAgICAgIGNvbnN0IHByb2plY3RGb3JtID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3Byb2plY3QtZm9ybScpXHJcbiAgICAgICAgY29uc3QgcHJvamVjdEZvcm1UaXRsZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNwcm9qZWN0LWZvcm0tdGl0bGUnKVxyXG4gICAgICAgIGNvbnN0IG5ld1Byb2plY3RUaXRsZSA9IHByb2plY3RGb3JtWydwcm9qZWN0LWZvcm0tdGl0bGUnXS52YWx1ZVxyXG5cclxuICAgICAgICBpZiAobmV3UHJvamVjdFRpdGxlKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHNpZGViYXJBZGRQcm9qZWN0QnRuID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3NpZGViYXItYWRkLXByb2plY3QtYnRuJylcclxuICAgICAgICAgICAgY29uc3QgcmVzID0gZWRpdFByb2plY3Qob2xkUHJvamVjdFRpdGxlLCBuZXdQcm9qZWN0VGl0bGUpXHJcbiAgICAgICAgICAgIGlmKHJlcyA9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIHNpZGViYXJBZGRQcm9qZWN0QnRuLnN0eWxlLmRpc3BsYXkgPSAnZmxleCdcclxuICAgICAgICAgICAgICAgIGxvYWRQcm9qZWN0cygpXHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAocmVzID09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgICAgICB3aW5kb3cuYWxlcnQoJ1Byb2plY3QgVGl0bGUgYWxyZWFkeSBpbiB1c2UhJylcclxuICAgICAgICAgICAgICAgIHByb2plY3RGb3JtVGl0bGUudmFsdWUgPSBvbGRQcm9qZWN0VGl0bGVcclxuICAgICAgICAgICAgICAgIGZvY3VzUHJvamVjdFRpdGxlKClcclxuICAgICAgICAgICAgfSBlbHNlIGlmIChyZXMgPT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgc2lkZWJhckFkZFByb2plY3RCdG4uc3R5bGUuZGlzcGxheSA9ICdmbGV4J1xyXG4gICAgICAgICAgICAgICAgbG9hZFByb2plY3RzKClcclxuICAgICAgICAgICAgICAgIGxvYWRDb250ZW50KClcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHdpbmRvdy5hbGVydCgnUHJvamVjdCBUaXRsZSBjYW5ub3QgYmUgZW1wdHkhJylcclxuICAgICAgICAgICAgcHJvamVjdEZvcm1UaXRsZS52YWx1ZSA9IG9sZFByb2plY3RUaXRsZVxyXG4gICAgICAgICAgICBmb2N1c1Byb2plY3RUaXRsZSgpXHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgfVxyXG4gICAgXHJcbn1cclxuXHJcbmZ1bmN0aW9uIHJlbW92ZVByb2plY3QoZSkge1xyXG4gICAgaWYgKGUudGFyZ2V0KSB7XHJcbiAgICAgICAgY29uc3QgcHJvamVjdE5hbWUgPSBlLnRhcmdldC5jbG9zZXN0KCcuc2lkZWJhci1wcm9qZWN0JykuaWRcclxuICAgICAgICBkZWxldGVQcm9qZWN0KHByb2plY3ROYW1lKVxyXG4gICAgICAgIGxvYWRQcm9qZWN0cygpXHJcbiAgICAgICAgbG9hZENvbnRlbnQoKVxyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgeyBsb2FkUHJvamVjdHMsIHNlbGVjdFByb2plY3QsIGNyZWF0ZVNlZ21lbnQsIGhhbmRsZVNlZ21lbnREcmFnb3ZlciwgaGFuZGxlU2VnbWVudERyYWdsZWF2ZSB9IiwiaW1wb3J0IHRvZG9MaXN0LCB7IHNhdmVUb2RvIH0gZnJvbSBcIi4uXCJcclxuaW1wb3J0IGdldFByb2plY3RJZHggZnJvbSBcIi4vZ2V0UHJvamVjdElkeFwiXHJcblxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBkZWxldGVQcm9qZWN0KHByb2plY3ROYW1lKSB7XHJcbiAgICBjb25zdCBwcm9qSWR4ID0gZ2V0UHJvamVjdElkeChwcm9qZWN0TmFtZSlcclxuICAgIHRvZG9MaXN0LnNwbGljZShwcm9qSWR4LDEpXHJcbiAgICBzYXZlVG9kbygpICAgIFxyXG59XHJcbiIsImltcG9ydCB0b2RvTGlzdCBmcm9tIFwiLi5cIjtcclxuaW1wb3J0IGdldFByb2plY3RJZHggZnJvbSBcIi4vZ2V0UHJvamVjdElkeFwiO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcmVhcnJhbmdlUHJvamVjdChvbGRJZHgsbmV3SWR4KSB7XHJcbiAgICBjb25zdCBwcm9qZWN0T2JqID0gdG9kb0xpc3Rbb2xkSWR4XVxyXG4gICAgdG9kb0xpc3Quc3BsaWNlKG9sZElkeCwxKVxyXG4gICAgdG9kb0xpc3Quc3BsaWNlKG5ld0lkeCwwLHByb2plY3RPYmopXHJcbn0iLCJpbXBvcnQgdG9kb0xpc3QsIHsgc2F2ZVRvZG8gfSBmcm9tIFwiLi5cIlxyXG5pbXBvcnQgbGlzdFByb2plY3RzIGZyb20gXCIuL2xpc3RQcm9qZWN0c1wiXHJcblxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBuZXdQcm9qZWN0KHByb2plY3RUaXRsZSkge1xyXG4gICAgY29uc3QgcHJvakxpc3QgPSBsaXN0UHJvamVjdHMoKVxyXG4gICAgaWYgKHByb2pMaXN0LmluY2x1ZGVzKHByb2plY3RUaXRsZSkpIHtcclxuICAgICAgICByZXR1cm4gZmFsc2VcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgY29uc3QgcHJvamVjdE9iaiA9IHt9XHJcbiAgICAgICAgcHJvamVjdE9ialtwcm9qZWN0VGl0bGVdID0gW10gXHJcbiAgICAgICAgdG9kb0xpc3QucHVzaChwcm9qZWN0T2JqKVxyXG4gICAgICAgIHNhdmVUb2RvKClcclxuICAgICAgICByZXR1cm4gdHJ1ZVxyXG4gICAgfVxyXG59IiwiaW1wb3J0IHRvZG9MaXN0LCB7IHNhdmVUb2RvIH0gZnJvbSBcIi4uXCJcclxuaW1wb3J0IGdldFByb2plY3RJZHggZnJvbSBcIi4vZ2V0UHJvamVjdElkeFwiXHJcbmltcG9ydCBsaXN0UHJvamVjdHMgZnJvbSBcIi4vbGlzdFByb2plY3RzXCJcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGVkaXRQcm9qZWN0KG9sZFByb2plY3QsIG5ld1Byb2plY3QpIHtcclxuICAgIGlmIChvbGRQcm9qZWN0ID09IG5ld1Byb2plY3QpIHtcclxuICAgICAgICByZXR1cm5cclxuICAgIH0gZWxzZSBpZiAobGlzdFByb2plY3RzKCkuaW5jbHVkZXMobmV3UHJvamVjdCkpIHtcclxuICAgICAgICByZXR1cm4gZmFsc2VcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgY29uc3Qgb2xkUHJvamVjdElkeCA9IGdldFByb2plY3RJZHgob2xkUHJvamVjdClcclxuICAgICAgICBjb25zdCBuZXdQcm9qZWN0T2JqID0ge31cclxuICAgICAgICBuZXdQcm9qZWN0T2JqW25ld1Byb2plY3RdID0gdG9kb0xpc3Rbb2xkUHJvamVjdElkeF1bb2xkUHJvamVjdF1cclxuICAgICAgICB0b2RvTGlzdFtvbGRQcm9qZWN0SWR4XSA9IG5ld1Byb2plY3RPYmpcclxuICAgICAgICBzYXZlVG9kbygpXHJcbiAgICAgICAgcmV0dXJuIHRydWVcclxuICAgIH1cclxuICAgIFxyXG59IiwiaW1wb3J0ICcuL3N0eWxlLmNzcydcclxuaW1wb3J0IEhlYWRlciBmcm9tIFwiLi9oZWFkZXJcIlxyXG5pbXBvcnQgU2lkZWJhciwgeyBsb2FkUHJvamVjdHMgfSBmcm9tICcuL3NpZGViYXInXHJcbmltcG9ydCBDb250ZW50IGZyb20gJy4vY29udGVudCdcclxuaW1wb3J0IHsgbG9hZENvbnRlbnQgfSBmcm9tICcuL2NvbnRlbnQnXHJcbi8vIGxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKCd0b2RvTGlzdCcpXHJcbmlmIChsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgndG9kb0xpc3QnKSkge1xyXG5cclxufSBlbHNlIHtcclxuICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCd0b2RvTGlzdCcsSlNPTi5zdHJpbmdpZnkoW3tVcGNvbWluZzpbXX0se1RvZGF5OltdfV0pKVxyXG59XHJcbmNvbnN0IHRvZG9MaXN0ID0gSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgndG9kb0xpc3QnKSlcclxuZXhwb3J0IGRlZmF1bHQgdG9kb0xpc3RcclxuXHJcbmZ1bmN0aW9uIHNhdmVUb2RvKCkge1xyXG4gICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ3RvZG9MaXN0JywgSlNPTi5zdHJpbmdpZnkodG9kb0xpc3QpKVxyXG59XHJcblxyXG5jb25zdCBoZWFkZXIgPSBIZWFkZXIoKVxyXG5jb25zdCBzaWRlYmFyID0gU2lkZWJhcigpXHJcbmNvbnN0IGNvbnRlbnQgPSBDb250ZW50KClcclxuXHJcbmRvY3VtZW50LmJvZHkuYXBwZW5kKHNpZGViYXIsIGhlYWRlciwgY29udGVudClcclxuXHJcbmxvYWRQcm9qZWN0cygpXHJcbmxvYWRDb250ZW50KClcclxuXHJcbmV4cG9ydCB7IHNhdmVUb2RvIH0iLCJpbXBvcnQge2dlbmVyYXRlRWxlbWVudH0gZnJvbSBcIi4vaGVscGVyXCI7XHJcbmltcG9ydCBTaWRlYmFyIGZyb20gXCIuL3NpZGViYXJcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIEhlYWRlcigpIHtcclxuXHJcbiAgICBmdW5jdGlvbiBzaG93U2lkZUJhcihlKSB7XHJcbiAgICAgICAgaWYgKGUudGFyZ2V0KSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHNpZGViYXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjc2lkZWJhcicpXHJcbiAgICAgICAgICAgIGNvbnN0IHNob3dTaWRlYmFyQnRuID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3Nob3ctc2lkZWJhci1idG4nKVxyXG4gICAgICAgICAgICBjb25zdCBoaWRlU2lkZWJhckJ0biA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNoaWRlLXNpZGViYXItYnRuJylcclxuICAgICAgICAgICAgc2lkZWJhci5zdHlsZS5kaXNwbGF5ID0gJ2ZsZXgnXHJcbiAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuc3R5bGUgPSAnZ3JpZC10ZW1wbGF0ZS1hcmVhczpcInNpZGViYXIgaGVhZGVyXCIgXCJzaWRlYmFyIGNvbnRlbnRcIjtncmlkLXRlbXBsYXRlLWNvbHVtbnM6IDE2cmVtIDFmcidcclxuICAgICAgICAgICAgc2hvd1NpZGViYXJCdG4uc3R5bGUuZGlzcGxheSA9ICdub25lJ1xyXG4gICAgICAgICAgICBoaWRlU2lkZWJhckJ0bi5zdHlsZS5kaXNwbGF5ID0gJ2ZsZXgnXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgXHJcbiAgICBjb25zdCBoZWFkZXIgPSBnZW5lcmF0ZUVsZW1lbnQoJ2RpdicsJycsJ2hlYWRlcicpXHJcbiAgICBcclxuICAgIGNvbnN0IHNob3dTaWRlYmFyQnRuID0gZ2VuZXJhdGVFbGVtZW50KCdkaXYnLCcnLCdzaG93LXNpZGViYXItYnRuJylcclxuICAgIHNob3dTaWRlYmFyQnRuLmlubmVySFRNTCA9ICc8aSBjbGFzcz1cImZhLXNvbGlkIGZhLWJhcnNcIj48L2k+J1xyXG4gICAgc2hvd1NpZGViYXJCdG4uc3R5bGUuZGlzcGxheSA9ICdub25lJ1xyXG4gICAgc2hvd1NpZGViYXJCdG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLChlKT0+c2hvd1NpZGVCYXIoZSkpXHJcbiAgICBcclxuXHJcbiAgICBjb25zdCBpY29uQ29udGFpbmVyID0gZ2VuZXJhdGVFbGVtZW50KCdkaXYnLCdsb2dvLWNvbnRhaW5lcicpXHJcbiAgICBjb25zdCBpY29uID0gZ2VuZXJhdGVFbGVtZW50KCdpbWcnLCdsb2dvJywnLi4vZGlzdC9pbWFnZXMvbG9nby5wbmcnLCdUb2RvIEFwcCBpY29uJylcclxuICAgIGNvbnN0IHRpdGxlID0gZ2VuZXJhdGVFbGVtZW50KCdkaXYnLCdsb2dvLXRpdGxlJywnJywnTXkgVG9kbycpXHJcbiAgICBcclxuICAgIGNvbnN0IHVzZXJDb250YWluZXIgPSBnZW5lcmF0ZUVsZW1lbnQoJ2RpdicsJycsJ3VzZXItY29udGFpbmVyJylcclxuICAgIGNvbnN0IHVzZXJJY29uID0gZ2VuZXJhdGVFbGVtZW50KCdkaXYnLCd1c2VyLWljb24nKVxyXG4gICAgdXNlckljb24uaW5uZXJIVE1MID0gJzxpIGNsYXNzPVwiZmEtc29saWQgZmEtdXNlciBmYS14bFwiPjwvaT4nXHJcbiAgICAvLyBjb25zdCB1c2VyTmFtZSA9IGdlbmVyYXRlRWxlbWVudCgnZGl2JywnJywndXNlci1uYW1lJywna2FpcmF5em8nKVxyXG5cclxuICAgIGljb25Db250YWluZXIuYXBwZW5kKGljb24sIHRpdGxlKVxyXG4gICAgdXNlckNvbnRhaW5lci5hcHBlbmQodXNlckljb24pXHJcbiAgICBoZWFkZXIuYXBwZW5kKHNob3dTaWRlYmFyQnRuLCBpY29uQ29udGFpbmVyLCB1c2VyQ29udGFpbmVyKVxyXG5cclxuICAgIHJldHVybiBoZWFkZXJcclxufSJdLCJuYW1lcyI6WyJfX19DU1NfTE9BREVSX0VYUE9SVF9fXyIsInB1c2giLCJtb2R1bGUiLCJpZCIsImV4cG9ydHMiLCJjc3NXaXRoTWFwcGluZ1RvU3RyaW5nIiwibGlzdCIsInRvU3RyaW5nIiwidGhpcyIsIm1hcCIsIml0ZW0iLCJjb250ZW50IiwibmVlZExheWVyIiwiY29uY2F0IiwibGVuZ3RoIiwiam9pbiIsImkiLCJtb2R1bGVzIiwibWVkaWEiLCJkZWR1cGUiLCJzdXBwb3J0cyIsImxheWVyIiwidW5kZWZpbmVkIiwiYWxyZWFkeUltcG9ydGVkTW9kdWxlcyIsImsiLCJfayIsImNzc01hcHBpbmciLCJidG9hIiwiYmFzZTY0IiwidW5lc2NhcGUiLCJlbmNvZGVVUklDb21wb25lbnQiLCJKU09OIiwic3RyaW5naWZ5IiwiZGF0YSIsInNvdXJjZU1hcHBpbmciLCJzdHlsZXNJbkRPTSIsImdldEluZGV4QnlJZGVudGlmaWVyIiwiaWRlbnRpZmllciIsInJlc3VsdCIsIm1vZHVsZXNUb0RvbSIsIm9wdGlvbnMiLCJpZENvdW50TWFwIiwiaWRlbnRpZmllcnMiLCJiYXNlIiwiY291bnQiLCJpbmRleEJ5SWRlbnRpZmllciIsIm9iaiIsImNzcyIsInNvdXJjZU1hcCIsInJlZmVyZW5jZXMiLCJ1cGRhdGVyIiwiYWRkRWxlbWVudFN0eWxlIiwiYnlJbmRleCIsInNwbGljZSIsImFwaSIsImRvbUFQSSIsInVwZGF0ZSIsIm5ld09iaiIsInJlbW92ZSIsImxhc3RJZGVudGlmaWVycyIsIm5ld0xpc3QiLCJpbmRleCIsIm5ld0xhc3RJZGVudGlmaWVycyIsIl9pIiwiX2luZGV4IiwibWVtbyIsImluc2VydCIsInN0eWxlIiwidGFyZ2V0Iiwic3R5bGVUYXJnZXQiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJ3aW5kb3ciLCJIVE1MSUZyYW1lRWxlbWVudCIsImNvbnRlbnREb2N1bWVudCIsImhlYWQiLCJlIiwiZ2V0VGFyZ2V0IiwiRXJyb3IiLCJhcHBlbmRDaGlsZCIsImVsZW1lbnQiLCJjcmVhdGVFbGVtZW50Iiwic2V0QXR0cmlidXRlcyIsImF0dHJpYnV0ZXMiLCJzdHlsZUVsZW1lbnQiLCJub25jZSIsInNldEF0dHJpYnV0ZSIsImluc2VydFN0eWxlRWxlbWVudCIsInN0eWxlVGFnVHJhbnNmb3JtIiwiYXBwbHkiLCJwYXJlbnROb2RlIiwicmVtb3ZlQ2hpbGQiLCJyZW1vdmVTdHlsZUVsZW1lbnQiLCJzdHlsZVNoZWV0IiwiY3NzVGV4dCIsImZpcnN0Q2hpbGQiLCJjcmVhdGVUZXh0Tm9kZSIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImNhY2hlZE1vZHVsZSIsIl9fd2VicGFja19tb2R1bGVzX18iLCJuIiwiZ2V0dGVyIiwiX19lc01vZHVsZSIsImQiLCJhIiwiZGVmaW5pdGlvbiIsImtleSIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJwcm9wIiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwibmMiLCJfdHlwZW9mIiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJjb25zdHJ1Y3RvciIsInJlcXVpcmVkQXJncyIsInJlcXVpcmVkIiwiYXJncyIsIlR5cGVFcnJvciIsInRvRGF0ZSIsImFyZ3VtZW50IiwiYXJndW1lbnRzIiwiYXJnU3RyIiwiRGF0ZSIsImdldFRpbWUiLCJjb25zb2xlIiwid2FybiIsInN0YWNrIiwiTmFOIiwidG9JbnRlZ2VyIiwiZGlydHlOdW1iZXIiLCJudW1iZXIiLCJOdW1iZXIiLCJpc05hTiIsIk1hdGgiLCJjZWlsIiwiZmxvb3IiLCJzdGFydE9mVVRDSVNPV2VlayIsImRpcnR5RGF0ZSIsImRhdGUiLCJkYXkiLCJnZXRVVENEYXkiLCJkaWZmIiwic2V0VVRDRGF0ZSIsImdldFVUQ0RhdGUiLCJzZXRVVENIb3VycyIsImdldFVUQ0lTT1dlZWtZZWFyIiwieWVhciIsImdldFVUQ0Z1bGxZZWFyIiwiZm91cnRoT2ZKYW51YXJ5T2ZOZXh0WWVhciIsInNldFVUQ0Z1bGxZZWFyIiwic3RhcnRPZk5leHRZZWFyIiwiZm91cnRoT2ZKYW51YXJ5T2ZUaGlzWWVhciIsInN0YXJ0T2ZUaGlzWWVhciIsImxvY2FscyIsImRlZmF1bHRPcHRpb25zIiwiZ2V0RGVmYXVsdE9wdGlvbnMiLCJzdGFydE9mVVRDV2VlayIsIl9yZWYiLCJfcmVmMiIsIl9yZWYzIiwiX29wdGlvbnMkd2Vla1N0YXJ0c09uIiwiX29wdGlvbnMkbG9jYWxlIiwiX29wdGlvbnMkbG9jYWxlJG9wdGlvIiwiX2RlZmF1bHRPcHRpb25zJGxvY2FsIiwiX2RlZmF1bHRPcHRpb25zJGxvY2FsMiIsIndlZWtTdGFydHNPbiIsImxvY2FsZSIsIlJhbmdlRXJyb3IiLCJnZXRVVENXZWVrWWVhciIsIl9vcHRpb25zJGZpcnN0V2Vla0NvbiIsImZpcnN0V2Vla0NvbnRhaW5zRGF0ZSIsImZpcnN0V2Vla09mTmV4dFllYXIiLCJmaXJzdFdlZWtPZlRoaXNZZWFyIiwiYWRkTGVhZGluZ1plcm9zIiwidGFyZ2V0TGVuZ3RoIiwic2lnbiIsIm91dHB1dCIsImFicyIsInRva2VuIiwic2lnbmVkWWVhciIsIm1vbnRoIiwiZ2V0VVRDTW9udGgiLCJTdHJpbmciLCJnZXRVVENIb3VycyIsImdldFVUQ01pbnV0ZXMiLCJnZXRVVENTZWNvbmRzIiwibnVtYmVyT2ZEaWdpdHMiLCJtaWxsaXNlY29uZHMiLCJnZXRVVENNaWxsaXNlY29uZHMiLCJwb3ciLCJHIiwibG9jYWxpemUiLCJlcmEiLCJ3aWR0aCIsInkiLCJvcmRpbmFsTnVtYmVyIiwidW5pdCIsImxpZ2h0Rm9ybWF0dGVycyIsIlkiLCJzaWduZWRXZWVrWWVhciIsIndlZWtZZWFyIiwiUiIsInUiLCJRIiwicXVhcnRlciIsImNvbnRleHQiLCJxIiwiTSIsIkwiLCJ3Iiwid2VlayIsImZpcnN0V2VlayIsInN0YXJ0T2ZVVENXZWVrWWVhciIsInJvdW5kIiwiZ2V0VVRDV2VlayIsIkkiLCJpc29XZWVrIiwiZm91cnRoT2ZKYW51YXJ5Iiwic3RhcnRPZlVUQ0lTT1dlZWtZZWFyIiwiZ2V0VVRDSVNPV2VlayIsIkQiLCJkYXlPZlllYXIiLCJ0aW1lc3RhbXAiLCJzZXRVVENNb250aCIsImRpZmZlcmVuY2UiLCJnZXRVVENEYXlPZlllYXIiLCJFIiwiZGF5T2ZXZWVrIiwibG9jYWxEYXlPZldlZWsiLCJjIiwiaXNvRGF5T2ZXZWVrIiwiZGF5UGVyaW9kRW51bVZhbHVlIiwiZGF5UGVyaW9kIiwidG9Mb3dlckNhc2UiLCJiIiwiaG91cnMiLCJCIiwiaCIsIkgiLCJLIiwibSIsInMiLCJTIiwiWCIsIl9sb2NhbGl6ZSIsInRpbWV6b25lT2Zmc2V0IiwiX29yaWdpbmFsRGF0ZSIsImdldFRpbWV6b25lT2Zmc2V0IiwiZm9ybWF0VGltZXpvbmVXaXRoT3B0aW9uYWxNaW51dGVzIiwiZm9ybWF0VGltZXpvbmUiLCJ4IiwiTyIsImZvcm1hdFRpbWV6b25lU2hvcnQiLCJ6IiwidCIsIm9yaWdpbmFsRGF0ZSIsIlQiLCJvZmZzZXQiLCJkaXJ0eURlbGltaXRlciIsImFic09mZnNldCIsIm1pbnV0ZXMiLCJkZWxpbWl0ZXIiLCJkYXRlTG9uZ0Zvcm1hdHRlciIsInBhdHRlcm4iLCJmb3JtYXRMb25nIiwidGltZUxvbmdGb3JtYXR0ZXIiLCJ0aW1lIiwicCIsIlAiLCJkYXRlVGltZUZvcm1hdCIsIm1hdGNoUmVzdWx0IiwibWF0Y2giLCJkYXRlUGF0dGVybiIsInRpbWVQYXR0ZXJuIiwiZGF0ZVRpbWUiLCJyZXBsYWNlIiwicHJvdGVjdGVkRGF5T2ZZZWFyVG9rZW5zIiwicHJvdGVjdGVkV2Vla1llYXJUb2tlbnMiLCJ0aHJvd1Byb3RlY3RlZEVycm9yIiwiZm9ybWF0IiwiaW5wdXQiLCJmb3JtYXREaXN0YW5jZUxvY2FsZSIsImxlc3NUaGFuWFNlY29uZHMiLCJvbmUiLCJvdGhlciIsInhTZWNvbmRzIiwiaGFsZkFNaW51dGUiLCJsZXNzVGhhblhNaW51dGVzIiwieE1pbnV0ZXMiLCJhYm91dFhIb3VycyIsInhIb3VycyIsInhEYXlzIiwiYWJvdXRYV2Vla3MiLCJ4V2Vla3MiLCJhYm91dFhNb250aHMiLCJ4TW9udGhzIiwiYWJvdXRYWWVhcnMiLCJ4WWVhcnMiLCJvdmVyWFllYXJzIiwiYWxtb3N0WFllYXJzIiwiYnVpbGRGb3JtYXRMb25nRm4iLCJkZWZhdWx0V2lkdGgiLCJmb3JtYXRzIiwiZnVsbCIsImxvbmciLCJtZWRpdW0iLCJzaG9ydCIsImZvcm1hdFJlbGF0aXZlTG9jYWxlIiwibGFzdFdlZWsiLCJ5ZXN0ZXJkYXkiLCJ0b2RheSIsInRvbW9ycm93IiwibmV4dFdlZWsiLCJidWlsZExvY2FsaXplRm4iLCJkaXJ0eUluZGV4IiwidmFsdWVzQXJyYXkiLCJmb3JtYXR0aW5nVmFsdWVzIiwiZGVmYXVsdEZvcm1hdHRpbmdXaWR0aCIsIl9kZWZhdWx0V2lkdGgiLCJfd2lkdGgiLCJ2YWx1ZXMiLCJhcmd1bWVudENhbGxiYWNrIiwiX29wdGlvbnMiLCJyZW0xMDAiLCJuYXJyb3ciLCJhYmJyZXZpYXRlZCIsIndpZGUiLCJhbSIsInBtIiwibWlkbmlnaHQiLCJub29uIiwibW9ybmluZyIsImFmdGVybm9vbiIsImV2ZW5pbmciLCJuaWdodCIsImJ1aWxkTWF0Y2hGbiIsInN0cmluZyIsIm1hdGNoUGF0dGVybiIsIm1hdGNoUGF0dGVybnMiLCJkZWZhdWx0TWF0Y2hXaWR0aCIsInZhbHVlIiwibWF0Y2hlZFN0cmluZyIsInBhcnNlUGF0dGVybnMiLCJkZWZhdWx0UGFyc2VXaWR0aCIsIkFycmF5IiwiaXNBcnJheSIsImFycmF5IiwicHJlZGljYXRlIiwidGVzdCIsImZpbmRJbmRleCIsIm9iamVjdCIsImZpbmRLZXkiLCJ2YWx1ZUNhbGxiYWNrIiwicmVzdCIsInNsaWNlIiwicGFyc2VQYXR0ZXJuIiwicGFyc2VJbnQiLCJwYXJzZVJlc3VsdCIsImFueSIsImNvZGUiLCJmb3JtYXREaXN0YW5jZSIsInRva2VuVmFsdWUiLCJhZGRTdWZmaXgiLCJjb21wYXJpc29uIiwiZm9ybWF0UmVsYXRpdmUiLCJfZGF0ZSIsIl9iYXNlRGF0ZSIsImZvcm1hdHRpbmdUb2tlbnNSZWdFeHAiLCJsb25nRm9ybWF0dGluZ1Rva2Vuc1JlZ0V4cCIsImVzY2FwZWRTdHJpbmdSZWdFeHAiLCJkb3VibGVRdW90ZVJlZ0V4cCIsInVuZXNjYXBlZExhdGluQ2hhcmFjdGVyUmVnRXhwIiwiZGlydHlGb3JtYXRTdHIiLCJfcmVmNCIsIl9vcHRpb25zJGxvY2FsZTIiLCJfb3B0aW9ucyRsb2NhbGUyJG9wdGkiLCJfcmVmNSIsIl9yZWY2IiwiX3JlZjciLCJfb3B0aW9ucyRsb2NhbGUzIiwiX29wdGlvbnMkbG9jYWxlMyRvcHRpIiwiX2RlZmF1bHRPcHRpb25zJGxvY2FsMyIsIl9kZWZhdWx0T3B0aW9ucyRsb2NhbDQiLCJmb3JtYXRTdHIiLCJkZWZhdWx0TG9jYWxlIiwiaXNEYXRlIiwiaXNWYWxpZCIsInV0Y0RhdGUiLCJVVEMiLCJnZXRGdWxsWWVhciIsImdldE1vbnRoIiwiZ2V0RGF0ZSIsImdldEhvdXJzIiwiZ2V0TWludXRlcyIsImdldFNlY29uZHMiLCJnZXRNaWxsaXNlY29uZHMiLCJnZXRUaW1lem9uZU9mZnNldEluTWlsbGlzZWNvbmRzIiwiZGlydHlBbW91bnQiLCJhbW91bnQiLCJhZGRNaWxsaXNlY29uZHMiLCJzdWJNaWxsaXNlY29uZHMiLCJmb3JtYXR0ZXJPcHRpb25zIiwic3Vic3RyaW5nIiwiZmlyc3RDaGFyYWN0ZXIiLCJsb25nRm9ybWF0dGVyIiwibWF0Y2hlZCIsImZvcm1hdHRlciIsInVzZUFkZGl0aW9uYWxXZWVrWWVhclRva2VucyIsImluZGV4T2YiLCJ1c2VBZGRpdGlvbmFsRGF5T2ZZZWFyVG9rZW5zIiwiaXNQcm90ZWN0ZWREYXlPZlllYXJUb2tlbiIsImdlbmVyYXRlRWxlbWVudCIsInRhZyIsImNscyIsImlubmVySFRNTCIsImVsZW0iLCJ0eXBlIiwibmFtZSIsInBsYWNlaG9sZGVyIiwiaW5jbHVkZXMiLCJjbHNMaXN0Iiwic3BsaXQiLCJjbGFzc0xpc3QiLCJhZGQiLCJodG1sRm9yIiwic3JjIiwiYWx0IiwiaHJlZiIsImNsZWFyU2VsZWN0ZWQiLCJlbGVtTGlzdCIsImZvckVhY2giLCJyZWQiLCJvcmFuZ2UiLCJibHVlIiwiZ3JlZW4iLCJUb2RvIiwibm93IiwidGl0bGUiLCJkZXNjIiwiZHVlRGF0ZSIsInByaW9yaXR5IiwiX3RpdGxlIiwibmV3VGl0bGUiLCJfZGVzYyIsIm5ld0Rlc2MiLCJfZHVlRGF0ZSIsIm5ld0R1ZURhdGUiLCJfcHJpb3JpdHkiLCJuZXdQcmlvcml0eSIsIl9pZCIsInRvSlNPTiIsImxpc3RQcm9qZWN0cyIsImFyciIsImlkeCIsImtleXMiLCJnZXRQcm9qZWN0SWR4IiwicHJvamVjdE5hbWUiLCJwcm9qTGlzdCIsIm5ld1RvZG8iLCJwcm9qSWR4Iiwic2F2ZVRvZG8iLCJnZXRUb2RvTG9jIiwidG9kb0lkIiwicHJvalRvZG9MaXN0IiwiZGVsZXRlVG9kbyIsInRvZG9Mb2MiLCJnZXRUb2RvIiwiRm9ybSIsInByb2plY3QiLCJzZXRQcmlvcml0eUNvbG9yIiwiZm9ybVByaW9yaXR5TGFiZWwxIiwiZm9ybVByaW9yaXR5TGFiZWwyIiwiZm9ybVByaW9yaXR5TGFiZWwzIiwiZm9ybVByaW9yaXR5TGFiZWw0IiwiZm9ybSIsImZvcm1UaXRsZUNvbnRhaW5lciIsImZvcm1UaXRsZSIsImZvcm1DbG9zZUJ0biIsImFkZEV2ZW50TGlzdGVuZXIiLCJjbG9zZVRvZG9Gb3JtIiwiYXBwZW5kIiwiZm9ybURlc2NDb250YWluZXIiLCJmb3JtRGVzYyIsInJlc2l6ZSIsInJvd3MiLCJmb3JtUHJvamVjdENvbnRhaW5lciIsImZvcm1Qcm9qZWN0VGV4dCIsImZvcm1Qcm9qZWN0IiwiZm9ybVByb2plY3RPcHRpb24iLCJzZWxlY3RlZCIsImZvcm1EdWVkYXRlQ29udGFpbmVyIiwiZm9ybUR1ZWRhdGVUZXh0IiwiZm9ybUR1ZWRhdGUiLCJmb3JtUHJpb3JpdHlDb250YWluZXIiLCJmb3JtUHJpb3JpdHlUZXh0IiwiZm9ybVByaW9yaXR5Q29udGFpbmVyMSIsImZvcm1Qcmlvcml0eTEiLCJmb3JtUHJpb3JpdHlDb250YWluZXIyIiwiZm9ybVByaW9yaXR5MiIsImZvcm1Qcmlvcml0eUNvbnRhaW5lcjMiLCJmb3JtUHJpb3JpdHkzIiwiZm9ybVByaW9yaXR5Q29udGFpbmVyNCIsImZvcm1Qcmlvcml0eTQiLCJjaGVja2VkIiwiZm9ybURlbGV0ZUJ0biIsImZvcm1TYXZlQnRuIiwicmVtb3ZlVG9kbyIsImtleVByZXNzZWQiLCJwcmV2ZW50RGVmYXVsdCIsIm5ld1Byb2plY3QiLCJvbGRQcm9qZWN0IiwidG9kbyIsInN1Ym1pdFRvZG9Gb3JtIiwiZm9ybUFjdGlvbnNDb250YWluZXIiLCJjb250ZW50RWxlbSIsInByb2plY3RBZGRUb2RvQnRuIiwiZGlzcGxheSIsImxvYWRDb250ZW50IiwibGlzdFRvZG9zIiwicHJvamVjdElkeCIsInNlbGVjdGVkUHJvamVjdCIsInByb2plY3RPYmoiLCJwcm9qZWN0VG9kb3MiLCJwcm9qZWN0RWxlbSIsInByb2plY3RDb250YWluZXIiLCJwcm9qZWN0VGl0bGVDb250YWluZXIiLCJwcm9qZWN0VGl0bGUiLCJwcm9qZWN0VG9kb0NvbnRhaW5lciIsInByb2plY3RBZGRUb2RvSWNvbiIsInByb2plY3RBZGRUb2RvVGV4dCIsImNsb3Nlc3QiLCJmb2N1cyIsInNob3dUb2RvRm9ybSIsImNyZWF0ZVByb2plY3QiLCJ0b2RvSWR4IiwidG9kb1NlZ21lbnQiLCJjcmVhdGVTZWdtZW50IiwidG9kb0l0ZW0iLCJ0b2RvRWxlbSIsImNyZWF0ZVRvZG8iLCJzZWxlY3RQcm9qZWN0IiwidG9kb0NvbnRhaW5lciIsImNvbnRyb2xsZXIiLCJBYm9ydENvbnRyb2xsZXIiLCJhYm9ydCIsImJvZHlFbGVtIiwiYm9keSIsImVkaXRGb3JtIiwiZ3JpZFRlbXBsYXRlQ29sdW1ucyIsImdyaWRUZW1wbGF0ZUFyZWFzIiwic2hvd1RvZG9FZGl0Rm9ybSIsInNpZ25hbCIsInRvZG9UaXRsZUNvbnRhaW5lciIsInRvZG9DaGVja2JveCIsImNvbXBsZXRlVG9kbyIsInRvZG9UaXRsZSIsInRvZG9JbmZvQ29udGFpbmVyIiwidG9kb0R1ZWRhdGUiLCJ0b2RvUHJpb3JpdHlDb250YWluZXIiLCJ0b2RvUHJpb3JpdHlJY29uIiwiY29sb3IiLCJib3JkZXJDb2xvciIsInRvZG9Qcmlvcml0eSIsInRvZG9EZXNjIiwiZHJhZ2dhYmxlIiwiaGFuZGxlVG9kb0RyYWciLCJzZWdtZW50RWxlbSIsInRvZG9EcmFnZ2luZ0VsZW0iLCJvbGRMb2MiLCJ0b2RvRHJvcHBpbmdFbGVtIiwibmV4dFNpYmxpbmciLCJuZXdMb2MiLCJ0b2RvRHJvcHBpbmdMb2MiLCJ0b2RvT2JqIiwicmVhcnJhbmdlVG9kbyIsImhhbmRsZVRvZG9Ecm9wIiwibG9hZFByb2plY3RzIiwic2lkZWJhclByb2plY3RzIiwic2lkZWJhclNlZ21lbnQiLCJzaWRlYmFyUHJvamVjdCIsImNyZWF0ZVNpZGViYXJQcm9qZWN0IiwicmVsb2FkUHJvamVjdE9wdGlvbnMiLCJzaWRlYmFyUHJvamVjdE5hbWUiLCJzaWRlYmFyRWRpdEJ0biIsInNpZGViYXJEZWxldGVCdG4iLCJwcm9qZWN0Rm9ybUVsZW0iLCJwcm9qZWN0Rm9ybSIsInJlcGxhY2VXaXRoIiwiZm9jdXNQcm9qZWN0VGl0bGUiLCJxdWVyeVNlbGVjdG9yQWxsIiwic2hvd1Byb2plY3RFZGl0Rm9ybSIsImRlbGV0ZVByb2plY3QiLCJyZW1vdmVQcm9qZWN0IiwiaGFuZGxlUHJvamVjdFNlbGVjdCIsImhhbmRsZVByb2plY3REcmFnIiwicHJvamVjdERyYWdnaW5nRWxlbSIsIm9sZElkeCIsInByb2plY3REcm9wcGluZ0VsZW0iLCJuZXdJZHgiLCJwcm9qZWN0RHJvcHBpbmdJZHgiLCJyZWFycmFuZ2VQcm9qZWN0IiwiaGFuZGxlUHJvamVjdERyb3AiLCJzZWdtZW50IiwiZHJhZ2dpbmdFbGVtIiwicGFyZW50RWxlbWVudCIsInByZXZpb3VzU2libGluZyIsImhhbmRsZVNlZ21lbnREcmFnb3ZlciIsImhhbmRsZVNlZ21lbnREcmFnbGVhdmUiLCJwcm9qZWN0Rm9ybVRpdGxlIiwiZGVmYXVsdFZhbHVlIiwicHJvamVjdEZvcm1BZGRCdG4iLCJwcm9qZWN0Rm9ybUNsb3NlQnRuIiwiY2xvc2VQcm9qZWN0RWRpdEZvcm0iLCJlZGl0UHJvamVjdEVsZW0iLCJzaWRlYmFyQWRkUHJvamVjdEJ0biIsImNsb3NlUHJvamVjdEZvcm0iLCJhZGRQcm9qZWN0IiwiY3Vyc29yUG9zIiwic2VsZWN0aW9uU3RhcnQiLCJzZWxlY3Rpb25FbmQiLCJhbGVydCIsIm9sZFByb2plY3RUaXRsZSIsIm5ld1Byb2plY3RUaXRsZSIsInJlcyIsIm9sZFByb2plY3RJZHgiLCJuZXdQcm9qZWN0T2JqIiwiZWRpdFByb2plY3QiLCJsb2NhbFN0b3JhZ2UiLCJnZXRJdGVtIiwic2V0SXRlbSIsIlVwY29taW5nIiwiVG9kYXkiLCJ0b2RvTGlzdCIsInBhcnNlIiwiaGVhZGVyIiwic2hvd1NpZGViYXJCdG4iLCJzaWRlYmFyIiwiaGlkZVNpZGViYXJCdG4iLCJzaG93U2lkZUJhciIsImljb25Db250YWluZXIiLCJpY29uIiwidXNlckNvbnRhaW5lciIsInVzZXJJY29uIiwiSGVhZGVyIiwic2lkZWJhclRpdGxlQ29udGFpbmVyIiwic2lkZWJhclRpdGxlIiwiaGlkZVNpZGViYXIiLCJzaWRlYmFyQWRkUHJvamVjdEljb24iLCJzaWRlYmFyUHJvamVjdEFkZFRleHQiLCJzaG93UHJvamVjdEZvcm0iLCJTaWRlYmFyIl0sInNvdXJjZVJvb3QiOiIifQ==