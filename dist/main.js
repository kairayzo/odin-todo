(()=>{"use strict";var e={426:(e,n,t)=>{t.d(n,{Z:()=>d});var r=t(537),o=t.n(r),i=t(645),a=t.n(i)()(o());a.push([e.id,"@import url(https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&display=swap);"]),a.push([e.id,"* {\n    margin: 0;\n    padding: 0;\n    font-family: Roboto, sans-serif;\n    --todo-gridgap: 0.6rem;\n    --theme-red: #E0175A;\n    --theme-orange: #ECB329;\n    --theme-blue: #33C6F1;\n    --theme-green: #29B77F;\n    --theme-gray: rgb(234, 234, 234);\n}\n\nbody {\n    width: 100vw;\n    min-height: 100vh;\n    display: grid;\n    grid-template-areas: \n        'sidebar header'\n        'sidebar content';\n    grid-template-rows: 4rem 1fr;\n    grid-template-columns: 16rem 1fr;\n    overflow: hidden;\n}\n\n#header {\n    /* background-color: orange; */\n    border-bottom: var(--theme-gray) solid 0.2rem;\n    grid-area: header;\n    display: flex;\n    justify-content: space-between;\n}\n\n#sidebar {\n    /* background-color: blue; */\n    grid-area: sidebar;\n    border-right: var(--theme-gray) solid 0.2rem;\n    display: flex;\n    flex-direction: column;\n}\n\n#content {\n    display: grid;\n    grid-template-columns: 1fr;\n    grid-area: content;\n    justify-items: center;\n}\n\n.with-form {\n    grid-template-columns: 1fr 24rem;\n    grid-template-areas: 'content form';\n}\n\n#form {\n    font-size: 1rem;\n    padding: 1rem;\n    border-left: var(--theme-gray) solid 0.2rem;\n    display: flex;\n    flex-direction: column;\n    gap: 1rem;\n    grid-area: form;\n}\n\n.header-logo-container {\n    height: 100%;\n    width: 4rem;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n\n.logo {\n    width: 50px;\n}\n\n.logo-container {\n    padding: 0rem 1rem;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    gap: 1rem;\n}\n\n.logo-title {\n    width: 100%;\n    font-size: 2rem;\n}\n\n#user-container {\n    padding: 0rem 1rem;\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    gap: 1rem;\n}\n\n.user-icon {\n    border-radius: 50%;\n}\n\n#user-name {\n    font-size: 1.4rem;\n}\n\n.project-container {\n    max-width: 600px;\n    width: 100%;\n    padding: 2rem 3rem;\n    border-radius: 1rem;\n    display: flex;\n    flex-direction: column;\n    gap: 1rem;\n}\n\n.project-title-container {\n    display: flex;\n    align-items: center;\n    gap: 1rem;\n}\n\n.project-title {\n    font-size: 1.4rem;\n    font-weight: bold;\n}\n\n.project-add-todo-btn {\n    color: gray;\n    font-size: 1rem;\n    text-align: left;\n    border: solid 1px var(--theme-gray);\n    border-radius: 0.5rem;\n    padding: 0.5rem 1rem;\n    background-color: inherit;\n    display: flex;\n    align-items: center;\n    gap: 1rem;\n    cursor: pointer;\n}\n\n.project-add-todo-btn:hover {\n    color: darkgray;\n}\n\n.project-todo-container {\n    display: flex;\n    flex-direction: column;\n}\n\n.todo-container {\n    font-size: 1rem;\n    padding: 0.5rem 1rem;\n    display: flex;\n    flex-direction: column;\n    gap: var(--todo-gridgap);\n    cursor: pointer;\n}\n\n.todo-title-container {\n    display: grid;\n    grid-template-areas: \n        'checkbox title info';\n    grid-template-columns: 1rem 1fr auto;\n    grid-gap: 1rem;\n    align-items: center;\n    /* display: flex;\n    justify-content: space-between;\n    align-items: center;\n    grid-area: title */\n}\n\n.todo-checkbox {\n    width: 1rem;\n    height: 1rem;\n    border-radius: 50%;\n    cursor: pointer;\n    grid-area: checkbox;\n}\n\n.todo-checkbox:hover {\n    background-color: lightgray;\n}\n\n.todo-title {\n    font-weight: bold;\n    line-height: 1.5rem;\n    grid-area: title\n}\n\n.todo-info-container {\n    display: flex;\n    gap: 1rem;\n    grid-area: info\n}\n\n.todo-duedate {\n    width: 100px;\n}\n\n.todo-priority-container {\n    width: 60px;\n    display: flex;\n    gap: 0.7rem;\n}\n\n.todo-desc {\n    padding-left: 2rem;\n    grid-area: desc;\n}\n\n#todo-form-title-container {\n    display: flex;\n    gap: 1rem;\n    justify-content: space-between;\n    align-items: center;\n}\n\n#todo-form-title {\n    padding: 0 0.5rem;\n    font-size: 1rem;\n    font-weight: bold;\n    width: 100%;\n    max-width: 300px;\n}\n\n#todo-form-info-container {\n    display: flex;\n    gap: 1rem;\n}\n\n#todo-form-duedate-container {\n    display: flex;\n    gap: 0.5rem;\n}\n\n#todo-form-priority-container {\n    width: 60px;\n    display: flex;\n    gap: 0.5rem;\n}\n\n#todo-form-desc-container {\n    font-size: 1rem;\n    display: flex;\n    justify-content: center;\n    gap: 1rem;\n}\n\n#todo-form-desc {\n    padding: 0 0.5rem;\n    font-size: 1rem;\n    flex: 1\n}\n\n#todo-form-duedate-container {\n    width: 100px;\n}\n\n#todo-form-save-btn {\n    font-size: 1rem;\n    width: 60px;\n    padding: 0rem auto;\n}\n\n#todo-form-close-btn {\n    font-size: 1rem;\n    width: 90px;\n    padding: 0rem auto;\n}\n\n/* #sidebar-projects-container {\n    display: flex;\n    flex-direction: column;\n    gap: 2rem;\n    background-color: lightgray;\n    padding: 2rem 1rem;\n} */\n\n#sidebar-title-container {\n    margin-bottom: 1rem;\n    display: grid;\n    grid-template-areas: 'title button';\n    grid-template-columns: auto 3rem;\n    gap: 1rem;\n    font-size: 1.4rem;\n    font-weight: bold;\n}\n\n#sidebar-title {\n    padding-left: 1rem;\n    height: 4rem;\n    display: flex;\n    align-items: center;\n    grid-area: title;\n}\n\n#hide-sidebar-btn, #show-sidebar-btn{\n    font-size: 1.4rem;\n    padding: 0 1rem;\n    width: 1rem;\n    grid-area: button;\n}\n\n#sidebar-projects {\n    margin-bottom: 0.5rem;\n    display: flex;\n    flex-direction: column;\n}\n\n.sidebar-project {\n    padding: 0.5rem 1rem;\n    display: grid;\n    grid-template-columns: auto 20px 20px;\n    font-size: 1.2rem;\n    gap: 1rem;\n    cursor: pointer;\n}\n\n.sidebar-edit-btn, .sidebar-delete-btn {\n    opacity: 0.3;\n}\n\n.sidebar-edit-btn:hover, .sidebar-delete-btn:hover {\n    opacity: 1;\n}\n\n.segment {\n    height: 0.3rem;\n    padding: 0.1rem 0;\n    background-color: inherit;\n}\n\n.hovering {\n    background-color: var(--theme-blue);\n}\n\n.selected {\n    background-color: var(--theme-gray);\n    margin: 0 0.5rem;\n    border-radius: 0.5rem;\n    font-weight: bold;\n}\n\n#sidebar-add-project-btn {\n    font-size: 1.2rem;\n    padding: 0.5rem 1rem;\n    display: grid;\n    grid-template-columns: 1rem auto;\n    gap: 1rem;\n    cursor: pointer;\n}\n\n#hide-sidebar-btn, #show-sidebar-btn,\n#project-form-add-btn, #project-form-close-btn,\n#sidebar-add-project-icon, \n.sidebar-arrange-icon, .sidebar-edit-btn, .sidebar-delete-btn,\n#project-form-close-btn, #project-form-add-btn,\n.todo-arrange, .todo-priority-icon,\n#form-close-btn\n{\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    cursor: pointer;\n}\n\n#project-form {\n    padding: 0.5rem 1rem;\n    display: flex;\n    gap: 1rem;\n}\n\n#project-form-title {\n    font-size: 1.2rem;\n    width: 100%;\n    border: none;\n}\n\n#project-form-title:focus {\n    outline: none;\n}\n\n#form-title-container {\n    /* height: 4rem; */\n    display: grid;\n    grid-template-columns: 1fr 1rem;\n    align-items: center;\n    gap: 1rem;\n\n}\n\n#form-title {\n    font-size: 1.2rem;\n    padding: 0.5rem;\n    border: 0.1rem solid var(--theme-gray);\n    border-radius: 0.2rem;\n}\n\n#form-desc {\n    padding: 0.5rem;\n    font-size: 1rem;\n    width: 100%;\n    border: 0.1rem solid var(--theme-gray);\n    border-radius: 0.2rem;\n}\n\n#form-project, #form-duedate {\n    padding: 0 0.5rem;\n    font-size: 1rem;\n}\n\n#form-project-container, #form-duedate-container{\n    display: grid;\n    grid-template-columns: 100px 150px;\n}\n\n#form-priority-container {\n    display: grid;\n    grid-template-columns: 100px repeat(4, 50px);\n}\n\n#form-priority-container div:not(:first-child) {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n\n#form-priority-container input {\n    display: none;\n}\n\n#form-priority-container label {\n    opacity: 0.1;\n}\n\n#form-priority-container label.selected {\n    opacity: 1;\n    /* border: 2px solid black */\n}\n\n#form-actions-container {\n    height: 100%;\n    display: flex;\n    align-items: end;\n    gap: 1rem;\n}\n\n#form-actions-container button{\n    font-weight: bold;\n    height: min-content;\n    font-size: 1rem;\n    padding: 0.7rem 1rem;\n    border-radius: 0.5rem;\n    border: 0.1rem solid var(--theme-gray);\n    flex: 1;\n    cursor: pointer;\n}\n\n#form-delete-btn {\n    background-color: inherit;\n}\n\n#form-save-btn {\n    background-color: gold;\n}","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAEA;IACI,SAAS;IACT,UAAU;IACV,+BAA+B;IAC/B,sBAAsB;IACtB,oBAAoB;IACpB,uBAAuB;IACvB,qBAAqB;IACrB,sBAAsB;IACtB,gCAAgC;AACpC;;AAEA;IACI,YAAY;IACZ,iBAAiB;IACjB,aAAa;IACb;;yBAEqB;IACrB,4BAA4B;IAC5B,gCAAgC;IAChC,gBAAgB;AACpB;;AAEA;IACI,8BAA8B;IAC9B,6CAA6C;IAC7C,iBAAiB;IACjB,aAAa;IACb,8BAA8B;AAClC;;AAEA;IACI,4BAA4B;IAC5B,kBAAkB;IAClB,4CAA4C;IAC5C,aAAa;IACb,sBAAsB;AAC1B;;AAEA;IACI,aAAa;IACb,0BAA0B;IAC1B,kBAAkB;IAClB,qBAAqB;AACzB;;AAEA;IACI,gCAAgC;IAChC,mCAAmC;AACvC;;AAEA;IACI,eAAe;IACf,aAAa;IACb,2CAA2C;IAC3C,aAAa;IACb,sBAAsB;IACtB,SAAS;IACT,eAAe;AACnB;;AAEA;IACI,YAAY;IACZ,WAAW;IACX,aAAa;IACb,uBAAuB;IACvB,mBAAmB;AACvB;;AAEA;IACI,WAAW;AACf;;AAEA;IACI,kBAAkB;IAClB,aAAa;IACb,uBAAuB;IACvB,mBAAmB;IACnB,SAAS;AACb;;AAEA;IACI,WAAW;IACX,eAAe;AACnB;;AAEA;IACI,kBAAkB;IAClB,aAAa;IACb,8BAA8B;IAC9B,mBAAmB;IACnB,SAAS;AACb;;AAEA;IACI,kBAAkB;AACtB;;AAEA;IACI,iBAAiB;AACrB;;AAEA;IACI,gBAAgB;IAChB,WAAW;IACX,kBAAkB;IAClB,mBAAmB;IACnB,aAAa;IACb,sBAAsB;IACtB,SAAS;AACb;;AAEA;IACI,aAAa;IACb,mBAAmB;IACnB,SAAS;AACb;;AAEA;IACI,iBAAiB;IACjB,iBAAiB;AACrB;;AAEA;IACI,WAAW;IACX,eAAe;IACf,gBAAgB;IAChB,mCAAmC;IACnC,qBAAqB;IACrB,oBAAoB;IACpB,yBAAyB;IACzB,aAAa;IACb,mBAAmB;IACnB,SAAS;IACT,eAAe;AACnB;;AAEA;IACI,eAAe;AACnB;;AAEA;IACI,aAAa;IACb,sBAAsB;AAC1B;;AAEA;IACI,eAAe;IACf,oBAAoB;IACpB,aAAa;IACb,sBAAsB;IACtB,wBAAwB;IACxB,eAAe;AACnB;;AAEA;IACI,aAAa;IACb;6BACyB;IACzB,oCAAoC;IACpC,cAAc;IACd,mBAAmB;IACnB;;;sBAGkB;AACtB;;AAEA;IACI,WAAW;IACX,YAAY;IACZ,kBAAkB;IAClB,eAAe;IACf,mBAAmB;AACvB;;AAEA;IACI,2BAA2B;AAC/B;;AAEA;IACI,iBAAiB;IACjB,mBAAmB;IACnB;AACJ;;AAEA;IACI,aAAa;IACb,SAAS;IACT;AACJ;;AAEA;IACI,YAAY;AAChB;;AAEA;IACI,WAAW;IACX,aAAa;IACb,WAAW;AACf;;AAEA;IACI,kBAAkB;IAClB,eAAe;AACnB;;AAEA;IACI,aAAa;IACb,SAAS;IACT,8BAA8B;IAC9B,mBAAmB;AACvB;;AAEA;IACI,iBAAiB;IACjB,eAAe;IACf,iBAAiB;IACjB,WAAW;IACX,gBAAgB;AACpB;;AAEA;IACI,aAAa;IACb,SAAS;AACb;;AAEA;IACI,aAAa;IACb,WAAW;AACf;;AAEA;IACI,WAAW;IACX,aAAa;IACb,WAAW;AACf;;AAEA;IACI,eAAe;IACf,aAAa;IACb,uBAAuB;IACvB,SAAS;AACb;;AAEA;IACI,iBAAiB;IACjB,eAAe;IACf;AACJ;;AAEA;IACI,YAAY;AAChB;;AAEA;IACI,eAAe;IACf,WAAW;IACX,kBAAkB;AACtB;;AAEA;IACI,eAAe;IACf,WAAW;IACX,kBAAkB;AACtB;;AAEA;;;;;;GAMG;;AAEH;IACI,mBAAmB;IACnB,aAAa;IACb,mCAAmC;IACnC,gCAAgC;IAChC,SAAS;IACT,iBAAiB;IACjB,iBAAiB;AACrB;;AAEA;IACI,kBAAkB;IAClB,YAAY;IACZ,aAAa;IACb,mBAAmB;IACnB,gBAAgB;AACpB;;AAEA;IACI,iBAAiB;IACjB,eAAe;IACf,WAAW;IACX,iBAAiB;AACrB;;AAEA;IACI,qBAAqB;IACrB,aAAa;IACb,sBAAsB;AAC1B;;AAEA;IACI,oBAAoB;IACpB,aAAa;IACb,qCAAqC;IACrC,iBAAiB;IACjB,SAAS;IACT,eAAe;AACnB;;AAEA;IACI,YAAY;AAChB;;AAEA;IACI,UAAU;AACd;;AAEA;IACI,cAAc;IACd,iBAAiB;IACjB,yBAAyB;AAC7B;;AAEA;IACI,mCAAmC;AACvC;;AAEA;IACI,mCAAmC;IACnC,gBAAgB;IAChB,qBAAqB;IACrB,iBAAiB;AACrB;;AAEA;IACI,iBAAiB;IACjB,oBAAoB;IACpB,aAAa;IACb,gCAAgC;IAChC,SAAS;IACT,eAAe;AACnB;;AAEA;;;;;;;;IAQI,aAAa;IACb,uBAAuB;IACvB,mBAAmB;IACnB,eAAe;AACnB;;AAEA;IACI,oBAAoB;IACpB,aAAa;IACb,SAAS;AACb;;AAEA;IACI,iBAAiB;IACjB,WAAW;IACX,YAAY;AAChB;;AAEA;IACI,aAAa;AACjB;;AAEA;IACI,kBAAkB;IAClB,aAAa;IACb,+BAA+B;IAC/B,mBAAmB;IACnB,SAAS;;AAEb;;AAEA;IACI,iBAAiB;IACjB,eAAe;IACf,sCAAsC;IACtC,qBAAqB;AACzB;;AAEA;IACI,eAAe;IACf,eAAe;IACf,WAAW;IACX,sCAAsC;IACtC,qBAAqB;AACzB;;AAEA;IACI,iBAAiB;IACjB,eAAe;AACnB;;AAEA;IACI,aAAa;IACb,kCAAkC;AACtC;;AAEA;IACI,aAAa;IACb,4CAA4C;AAChD;;AAEA;IACI,aAAa;IACb,uBAAuB;IACvB,mBAAmB;AACvB;;AAEA;IACI,aAAa;AACjB;;AAEA;IACI,YAAY;AAChB;;AAEA;IACI,UAAU;IACV,4BAA4B;AAChC;;AAEA;IACI,YAAY;IACZ,aAAa;IACb,gBAAgB;IAChB,SAAS;AACb;;AAEA;IACI,iBAAiB;IACjB,mBAAmB;IACnB,eAAe;IACf,oBAAoB;IACpB,qBAAqB;IACrB,sCAAsC;IACtC,OAAO;IACP,eAAe;AACnB;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,sBAAsB;AAC1B",sourcesContent:["@import url('https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&display=swap');\r\n\r\n* {\r\n    margin: 0;\r\n    padding: 0;\r\n    font-family: Roboto, sans-serif;\r\n    --todo-gridgap: 0.6rem;\r\n    --theme-red: #E0175A;\r\n    --theme-orange: #ECB329;\r\n    --theme-blue: #33C6F1;\r\n    --theme-green: #29B77F;\r\n    --theme-gray: rgb(234, 234, 234);\r\n}\r\n\r\nbody {\r\n    width: 100vw;\r\n    min-height: 100vh;\r\n    display: grid;\r\n    grid-template-areas: \r\n        'sidebar header'\r\n        'sidebar content';\r\n    grid-template-rows: 4rem 1fr;\r\n    grid-template-columns: 16rem 1fr;\r\n    overflow: hidden;\r\n}\r\n\r\n#header {\r\n    /* background-color: orange; */\r\n    border-bottom: var(--theme-gray) solid 0.2rem;\r\n    grid-area: header;\r\n    display: flex;\r\n    justify-content: space-between;\r\n}\r\n\r\n#sidebar {\r\n    /* background-color: blue; */\r\n    grid-area: sidebar;\r\n    border-right: var(--theme-gray) solid 0.2rem;\r\n    display: flex;\r\n    flex-direction: column;\r\n}\r\n\r\n#content {\r\n    display: grid;\r\n    grid-template-columns: 1fr;\r\n    grid-area: content;\r\n    justify-items: center;\r\n}\r\n\r\n.with-form {\r\n    grid-template-columns: 1fr 24rem;\r\n    grid-template-areas: 'content form';\r\n}\r\n\r\n#form {\r\n    font-size: 1rem;\r\n    padding: 1rem;\r\n    border-left: var(--theme-gray) solid 0.2rem;\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: 1rem;\r\n    grid-area: form;\r\n}\r\n\r\n.header-logo-container {\r\n    height: 100%;\r\n    width: 4rem;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n}\r\n\r\n.logo {\r\n    width: 50px;\r\n}\r\n\r\n.logo-container {\r\n    padding: 0rem 1rem;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    gap: 1rem;\r\n}\r\n\r\n.logo-title {\r\n    width: 100%;\r\n    font-size: 2rem;\r\n}\r\n\r\n#user-container {\r\n    padding: 0rem 1rem;\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    gap: 1rem;\r\n}\r\n\r\n.user-icon {\r\n    border-radius: 50%;\r\n}\r\n\r\n#user-name {\r\n    font-size: 1.4rem;\r\n}\r\n\r\n.project-container {\r\n    max-width: 600px;\r\n    width: 100%;\r\n    padding: 2rem 3rem;\r\n    border-radius: 1rem;\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: 1rem;\r\n}\r\n\r\n.project-title-container {\r\n    display: flex;\r\n    align-items: center;\r\n    gap: 1rem;\r\n}\r\n\r\n.project-title {\r\n    font-size: 1.4rem;\r\n    font-weight: bold;\r\n}\r\n\r\n.project-add-todo-btn {\r\n    color: gray;\r\n    font-size: 1rem;\r\n    text-align: left;\r\n    border: solid 1px var(--theme-gray);\r\n    border-radius: 0.5rem;\r\n    padding: 0.5rem 1rem;\r\n    background-color: inherit;\r\n    display: flex;\r\n    align-items: center;\r\n    gap: 1rem;\r\n    cursor: pointer;\r\n}\r\n\r\n.project-add-todo-btn:hover {\r\n    color: darkgray;\r\n}\r\n\r\n.project-todo-container {\r\n    display: flex;\r\n    flex-direction: column;\r\n}\r\n\r\n.todo-container {\r\n    font-size: 1rem;\r\n    padding: 0.5rem 1rem;\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: var(--todo-gridgap);\r\n    cursor: pointer;\r\n}\r\n\r\n.todo-title-container {\r\n    display: grid;\r\n    grid-template-areas: \r\n        'checkbox title info';\r\n    grid-template-columns: 1rem 1fr auto;\r\n    grid-gap: 1rem;\r\n    align-items: center;\r\n    /* display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    grid-area: title */\r\n}\r\n\r\n.todo-checkbox {\r\n    width: 1rem;\r\n    height: 1rem;\r\n    border-radius: 50%;\r\n    cursor: pointer;\r\n    grid-area: checkbox;\r\n}\r\n\r\n.todo-checkbox:hover {\r\n    background-color: lightgray;\r\n}\r\n\r\n.todo-title {\r\n    font-weight: bold;\r\n    line-height: 1.5rem;\r\n    grid-area: title\r\n}\r\n\r\n.todo-info-container {\r\n    display: flex;\r\n    gap: 1rem;\r\n    grid-area: info\r\n}\r\n\r\n.todo-duedate {\r\n    width: 100px;\r\n}\r\n\r\n.todo-priority-container {\r\n    width: 60px;\r\n    display: flex;\r\n    gap: 0.7rem;\r\n}\r\n\r\n.todo-desc {\r\n    padding-left: 2rem;\r\n    grid-area: desc;\r\n}\r\n\r\n#todo-form-title-container {\r\n    display: flex;\r\n    gap: 1rem;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n}\r\n\r\n#todo-form-title {\r\n    padding: 0 0.5rem;\r\n    font-size: 1rem;\r\n    font-weight: bold;\r\n    width: 100%;\r\n    max-width: 300px;\r\n}\r\n\r\n#todo-form-info-container {\r\n    display: flex;\r\n    gap: 1rem;\r\n}\r\n\r\n#todo-form-duedate-container {\r\n    display: flex;\r\n    gap: 0.5rem;\r\n}\r\n\r\n#todo-form-priority-container {\r\n    width: 60px;\r\n    display: flex;\r\n    gap: 0.5rem;\r\n}\r\n\r\n#todo-form-desc-container {\r\n    font-size: 1rem;\r\n    display: flex;\r\n    justify-content: center;\r\n    gap: 1rem;\r\n}\r\n\r\n#todo-form-desc {\r\n    padding: 0 0.5rem;\r\n    font-size: 1rem;\r\n    flex: 1\r\n}\r\n\r\n#todo-form-duedate-container {\r\n    width: 100px;\r\n}\r\n\r\n#todo-form-save-btn {\r\n    font-size: 1rem;\r\n    width: 60px;\r\n    padding: 0rem auto;\r\n}\r\n\r\n#todo-form-close-btn {\r\n    font-size: 1rem;\r\n    width: 90px;\r\n    padding: 0rem auto;\r\n}\r\n\r\n/* #sidebar-projects-container {\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: 2rem;\r\n    background-color: lightgray;\r\n    padding: 2rem 1rem;\r\n} */\r\n\r\n#sidebar-title-container {\r\n    margin-bottom: 1rem;\r\n    display: grid;\r\n    grid-template-areas: 'title button';\r\n    grid-template-columns: auto 3rem;\r\n    gap: 1rem;\r\n    font-size: 1.4rem;\r\n    font-weight: bold;\r\n}\r\n\r\n#sidebar-title {\r\n    padding-left: 1rem;\r\n    height: 4rem;\r\n    display: flex;\r\n    align-items: center;\r\n    grid-area: title;\r\n}\r\n\r\n#hide-sidebar-btn, #show-sidebar-btn{\r\n    font-size: 1.4rem;\r\n    padding: 0 1rem;\r\n    width: 1rem;\r\n    grid-area: button;\r\n}\r\n\r\n#sidebar-projects {\r\n    margin-bottom: 0.5rem;\r\n    display: flex;\r\n    flex-direction: column;\r\n}\r\n\r\n.sidebar-project {\r\n    padding: 0.5rem 1rem;\r\n    display: grid;\r\n    grid-template-columns: auto 20px 20px;\r\n    font-size: 1.2rem;\r\n    gap: 1rem;\r\n    cursor: pointer;\r\n}\r\n\r\n.sidebar-edit-btn, .sidebar-delete-btn {\r\n    opacity: 0.3;\r\n}\r\n\r\n.sidebar-edit-btn:hover, .sidebar-delete-btn:hover {\r\n    opacity: 1;\r\n}\r\n\r\n.segment {\r\n    height: 0.3rem;\r\n    padding: 0.1rem 0;\r\n    background-color: inherit;\r\n}\r\n\r\n.hovering {\r\n    background-color: var(--theme-blue);\r\n}\r\n\r\n.selected {\r\n    background-color: var(--theme-gray);\r\n    margin: 0 0.5rem;\r\n    border-radius: 0.5rem;\r\n    font-weight: bold;\r\n}\r\n\r\n#sidebar-add-project-btn {\r\n    font-size: 1.2rem;\r\n    padding: 0.5rem 1rem;\r\n    display: grid;\r\n    grid-template-columns: 1rem auto;\r\n    gap: 1rem;\r\n    cursor: pointer;\r\n}\r\n\r\n#hide-sidebar-btn, #show-sidebar-btn,\r\n#project-form-add-btn, #project-form-close-btn,\r\n#sidebar-add-project-icon, \r\n.sidebar-arrange-icon, .sidebar-edit-btn, .sidebar-delete-btn,\r\n#project-form-close-btn, #project-form-add-btn,\r\n.todo-arrange, .todo-priority-icon,\r\n#form-close-btn\r\n{\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    cursor: pointer;\r\n}\r\n\r\n#project-form {\r\n    padding: 0.5rem 1rem;\r\n    display: flex;\r\n    gap: 1rem;\r\n}\r\n\r\n#project-form-title {\r\n    font-size: 1.2rem;\r\n    width: 100%;\r\n    border: none;\r\n}\r\n\r\n#project-form-title:focus {\r\n    outline: none;\r\n}\r\n\r\n#form-title-container {\r\n    /* height: 4rem; */\r\n    display: grid;\r\n    grid-template-columns: 1fr 1rem;\r\n    align-items: center;\r\n    gap: 1rem;\r\n\r\n}\r\n\r\n#form-title {\r\n    font-size: 1.2rem;\r\n    padding: 0.5rem;\r\n    border: 0.1rem solid var(--theme-gray);\r\n    border-radius: 0.2rem;\r\n}\r\n\r\n#form-desc {\r\n    padding: 0.5rem;\r\n    font-size: 1rem;\r\n    width: 100%;\r\n    border: 0.1rem solid var(--theme-gray);\r\n    border-radius: 0.2rem;\r\n}\r\n\r\n#form-project, #form-duedate {\r\n    padding: 0 0.5rem;\r\n    font-size: 1rem;\r\n}\r\n\r\n#form-project-container, #form-duedate-container{\r\n    display: grid;\r\n    grid-template-columns: 100px 150px;\r\n}\r\n\r\n#form-priority-container {\r\n    display: grid;\r\n    grid-template-columns: 100px repeat(4, 50px);\r\n}\r\n\r\n#form-priority-container div:not(:first-child) {\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n}\r\n\r\n#form-priority-container input {\r\n    display: none;\r\n}\r\n\r\n#form-priority-container label {\r\n    opacity: 0.1;\r\n}\r\n\r\n#form-priority-container label.selected {\r\n    opacity: 1;\r\n    /* border: 2px solid black */\r\n}\r\n\r\n#form-actions-container {\r\n    height: 100%;\r\n    display: flex;\r\n    align-items: end;\r\n    gap: 1rem;\r\n}\r\n\r\n#form-actions-container button{\r\n    font-weight: bold;\r\n    height: min-content;\r\n    font-size: 1rem;\r\n    padding: 0.7rem 1rem;\r\n    border-radius: 0.5rem;\r\n    border: 0.1rem solid var(--theme-gray);\r\n    flex: 1;\r\n    cursor: pointer;\r\n}\r\n\r\n#form-delete-btn {\r\n    background-color: inherit;\r\n}\r\n\r\n#form-save-btn {\r\n    background-color: gold;\r\n}"],sourceRoot:""}]);const d=a},645:e=>{e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var t="",r=void 0!==n[5];return n[4]&&(t+="@supports (".concat(n[4],") {")),n[2]&&(t+="@media ".concat(n[2]," {")),r&&(t+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),t+=e(n),r&&(t+="}"),n[2]&&(t+="}"),n[4]&&(t+="}"),t})).join("")},n.i=function(e,t,r,o,i){"string"==typeof e&&(e=[[null,e,void 0]]);var a={};if(r)for(var d=0;d<this.length;d++){var s=this[d][0];null!=s&&(a[s]=!0)}for(var c=0;c<e.length;c++){var l=[].concat(e[c]);r&&a[l[0]]||(void 0!==i&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=i),t&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=t):l[2]=t),o&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=o):l[4]="".concat(o)),n.push(l))}},n}},537:e=>{e.exports=function(e){var n=e[1],t=e[3];if(!t)return n;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),i="/*# ".concat(o," */");return[n].concat([i]).join("\n")}return[n].join("\n")}},379:e=>{var n=[];function t(e){for(var t=-1,r=0;r<n.length;r++)if(n[r].identifier===e){t=r;break}return t}function r(e,r){for(var i={},a=[],d=0;d<e.length;d++){var s=e[d],c=r.base?s[0]+r.base:s[0],l=i[c]||0,u="".concat(c," ").concat(l);i[c]=l+1;var A=t(u),m={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==A)n[A].references++,n[A].updater(m);else{var f=o(m,r);r.byIndex=d,n.splice(d,0,{identifier:u,updater:f,references:1})}a.push(u)}return a}function o(e,n){var t=n.domAPI(n);return t.update(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap&&n.supports===e.supports&&n.layer===e.layer)return;t.update(e=n)}else t.remove()}}e.exports=function(e,o){var i=r(e=e||[],o=o||{});return function(e){e=e||[];for(var a=0;a<i.length;a++){var d=t(i[a]);n[d].references--}for(var s=r(e,o),c=0;c<i.length;c++){var l=t(i[c]);0===n[l].references&&(n[l].updater(),n.splice(l,1))}i=s}}},569:e=>{var n={};e.exports=function(e,t){var r=function(e){if(void 0===n[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}n[e]=t}return n[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},216:e=>{e.exports=function(e){var n=document.createElement("style");return e.setAttributes(n,e.attributes),e.insert(n,e.options),n}},565:(e,n,t)=>{e.exports=function(e){var n=t.nc;n&&e.setAttribute("nonce",n)}},795:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var n=e.insertStyleElement(e);return{update:function(t){!function(e,n,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var o=void 0!==t.layer;o&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,o&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var i=t.sourceMap;i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),n.styleTagTransform(r,e,n.options)}(n,e,t)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)}}}},589:e=>{e.exports=function(e,n){if(n.styleSheet)n.styleSheet.cssText=e;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(e))}}}},n={};function t(r){var o=n[r];if(void 0!==o)return o.exports;var i=n[r]={id:r,exports:{}};return e[r](i,i.exports,t),i.exports}t.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return t.d(n,{a:n}),n},t.d=(e,n)=>{for(var r in n)t.o(n,r)&&!t.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:n[r]})},t.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),t.nc=void 0;var r={};(()=>{t.d(r,{Z:()=>Pe,J:()=>Ue});var e=t(379),n=t.n(e),o=t(795),i=t.n(o),a=t(569),d=t.n(a),s=t(565),c=t.n(s),l=t(216),u=t.n(l),A=t(589),m=t.n(A),f=t(426),p={};function g(e){return g="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},g(e)}function h(e,n){if(n.length<e)throw new TypeError(e+" argument"+(e>1?"s":"")+" required, but only "+n.length+" present")}function b(e){h(1,arguments);var n=Object.prototype.toString.call(e);return e instanceof Date||"object"===g(e)&&"[object Date]"===n?new Date(e.getTime()):"number"==typeof e||"[object Number]"===n?new Date(e):("string"!=typeof e&&"[object String]"!==n||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments"),console.warn((new Error).stack)),new Date(NaN))}function y(e){if(null===e||!0===e||!1===e)return NaN;var n=Number(e);return isNaN(n)?n:n<0?Math.ceil(n):Math.floor(n)}function C(e){h(1,arguments);var n=b(e),t=n.getUTCDay(),r=(t<1?7:0)+t-1;return n.setUTCDate(n.getUTCDate()-r),n.setUTCHours(0,0,0,0),n}function v(e){h(1,arguments);var n=b(e),t=n.getUTCFullYear(),r=new Date(0);r.setUTCFullYear(t+1,0,4),r.setUTCHours(0,0,0,0);var o=C(r),i=new Date(0);i.setUTCFullYear(t,0,4),i.setUTCHours(0,0,0,0);var a=C(i);return n.getTime()>=o.getTime()?t+1:n.getTime()>=a.getTime()?t:t-1}p.styleTagTransform=m(),p.setAttributes=c(),p.insert=d().bind(null,"head"),p.domAPI=i(),p.insertStyleElement=u(),n()(f.Z,p),f.Z&&f.Z.locals&&f.Z.locals;var B={};function w(){return B}function I(e,n){var t,r,o,i,a,d,s,c;h(1,arguments);var l=w(),u=y(null!==(t=null!==(r=null!==(o=null!==(i=null==n?void 0:n.weekStartsOn)&&void 0!==i?i:null==n||null===(a=n.locale)||void 0===a||null===(d=a.options)||void 0===d?void 0:d.weekStartsOn)&&void 0!==o?o:l.weekStartsOn)&&void 0!==r?r:null===(s=l.locale)||void 0===s||null===(c=s.options)||void 0===c?void 0:c.weekStartsOn)&&void 0!==t?t:0);if(!(u>=0&&u<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var A=b(e),m=A.getUTCDay(),f=(m<u?7:0)+m-u;return A.setUTCDate(A.getUTCDate()-f),A.setUTCHours(0,0,0,0),A}function x(e,n){var t,r,o,i,a,d,s,c;h(1,arguments);var l=b(e),u=l.getUTCFullYear(),A=w(),m=y(null!==(t=null!==(r=null!==(o=null!==(i=null==n?void 0:n.firstWeekContainsDate)&&void 0!==i?i:null==n||null===(a=n.locale)||void 0===a||null===(d=a.options)||void 0===d?void 0:d.firstWeekContainsDate)&&void 0!==o?o:A.firstWeekContainsDate)&&void 0!==r?r:null===(s=A.locale)||void 0===s||null===(c=s.options)||void 0===c?void 0:c.firstWeekContainsDate)&&void 0!==t?t:1);if(!(m>=1&&m<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var f=new Date(0);f.setUTCFullYear(u+1,0,m),f.setUTCHours(0,0,0,0);var p=I(f,n),g=new Date(0);g.setUTCFullYear(u,0,m),g.setUTCHours(0,0,0,0);var C=I(g,n);return l.getTime()>=p.getTime()?u+1:l.getTime()>=C.getTime()?u:u-1}function j(e,n){for(var t=e<0?"-":"",r=Math.abs(e).toString();r.length<n;)r="0"+r;return t+r}const k=function(e,n){var t=e.getUTCFullYear(),r=t>0?t:1-t;return j("yy"===n?r%100:r,n.length)},S=function(e,n){var t=e.getUTCMonth();return"M"===n?String(t+1):j(t+1,2)},E=function(e,n){return j(e.getUTCDate(),n.length)},T=function(e,n){return j(e.getUTCHours()%12||12,n.length)},M=function(e,n){return j(e.getUTCHours(),n.length)},L=function(e,n){return j(e.getUTCMinutes(),n.length)},q=function(e,n){return j(e.getUTCSeconds(),n.length)},D=function(e,n){var t=n.length,r=e.getUTCMilliseconds();return j(Math.floor(r*Math.pow(10,t-3)),n.length)};var W={G:function(e,n,t){var r=e.getUTCFullYear()>0?1:0;switch(n){case"G":case"GG":case"GGG":return t.era(r,{width:"abbreviated"});case"GGGGG":return t.era(r,{width:"narrow"});default:return t.era(r,{width:"wide"})}},y:function(e,n,t){if("yo"===n){var r=e.getUTCFullYear(),o=r>0?r:1-r;return t.ordinalNumber(o,{unit:"year"})}return k(e,n)},Y:function(e,n,t,r){var o=x(e,r),i=o>0?o:1-o;return"YY"===n?j(i%100,2):"Yo"===n?t.ordinalNumber(i,{unit:"year"}):j(i,n.length)},R:function(e,n){return j(v(e),n.length)},u:function(e,n){return j(e.getUTCFullYear(),n.length)},Q:function(e,n,t){var r=Math.ceil((e.getUTCMonth()+1)/3);switch(n){case"Q":return String(r);case"QQ":return j(r,2);case"Qo":return t.ordinalNumber(r,{unit:"quarter"});case"QQQ":return t.quarter(r,{width:"abbreviated",context:"formatting"});case"QQQQQ":return t.quarter(r,{width:"narrow",context:"formatting"});default:return t.quarter(r,{width:"wide",context:"formatting"})}},q:function(e,n,t){var r=Math.ceil((e.getUTCMonth()+1)/3);switch(n){case"q":return String(r);case"qq":return j(r,2);case"qo":return t.ordinalNumber(r,{unit:"quarter"});case"qqq":return t.quarter(r,{width:"abbreviated",context:"standalone"});case"qqqqq":return t.quarter(r,{width:"narrow",context:"standalone"});default:return t.quarter(r,{width:"wide",context:"standalone"})}},M:function(e,n,t){var r=e.getUTCMonth();switch(n){case"M":case"MM":return S(e,n);case"Mo":return t.ordinalNumber(r+1,{unit:"month"});case"MMM":return t.month(r,{width:"abbreviated",context:"formatting"});case"MMMMM":return t.month(r,{width:"narrow",context:"formatting"});default:return t.month(r,{width:"wide",context:"formatting"})}},L:function(e,n,t){var r=e.getUTCMonth();switch(n){case"L":return String(r+1);case"LL":return j(r+1,2);case"Lo":return t.ordinalNumber(r+1,{unit:"month"});case"LLL":return t.month(r,{width:"abbreviated",context:"standalone"});case"LLLLL":return t.month(r,{width:"narrow",context:"standalone"});default:return t.month(r,{width:"wide",context:"standalone"})}},w:function(e,n,t,r){var o=function(e,n){h(1,arguments);var t=b(e),r=I(t,n).getTime()-function(e,n){var t,r,o,i,a,d,s,c;h(1,arguments);var l=w(),u=y(null!==(t=null!==(r=null!==(o=null!==(i=null==n?void 0:n.firstWeekContainsDate)&&void 0!==i?i:null==n||null===(a=n.locale)||void 0===a||null===(d=a.options)||void 0===d?void 0:d.firstWeekContainsDate)&&void 0!==o?o:l.firstWeekContainsDate)&&void 0!==r?r:null===(s=l.locale)||void 0===s||null===(c=s.options)||void 0===c?void 0:c.firstWeekContainsDate)&&void 0!==t?t:1),A=x(e,n),m=new Date(0);return m.setUTCFullYear(A,0,u),m.setUTCHours(0,0,0,0),I(m,n)}(t,n).getTime();return Math.round(r/6048e5)+1}(e,r);return"wo"===n?t.ordinalNumber(o,{unit:"week"}):j(o,n.length)},I:function(e,n,t){var r=function(e){h(1,arguments);var n=b(e),t=C(n).getTime()-function(e){h(1,arguments);var n=v(e),t=new Date(0);return t.setUTCFullYear(n,0,4),t.setUTCHours(0,0,0,0),C(t)}(n).getTime();return Math.round(t/6048e5)+1}(e);return"Io"===n?t.ordinalNumber(r,{unit:"week"}):j(r,n.length)},d:function(e,n,t){return"do"===n?t.ordinalNumber(e.getUTCDate(),{unit:"date"}):E(e,n)},D:function(e,n,t){var r=function(e){h(1,arguments);var n=b(e),t=n.getTime();n.setUTCMonth(0,1),n.setUTCHours(0,0,0,0);var r=t-n.getTime();return Math.floor(r/864e5)+1}(e);return"Do"===n?t.ordinalNumber(r,{unit:"dayOfYear"}):j(r,n.length)},E:function(e,n,t){var r=e.getUTCDay();switch(n){case"E":case"EE":case"EEE":return t.day(r,{width:"abbreviated",context:"formatting"});case"EEEEE":return t.day(r,{width:"narrow",context:"formatting"});case"EEEEEE":return t.day(r,{width:"short",context:"formatting"});default:return t.day(r,{width:"wide",context:"formatting"})}},e:function(e,n,t,r){var o=e.getUTCDay(),i=(o-r.weekStartsOn+8)%7||7;switch(n){case"e":return String(i);case"ee":return j(i,2);case"eo":return t.ordinalNumber(i,{unit:"day"});case"eee":return t.day(o,{width:"abbreviated",context:"formatting"});case"eeeee":return t.day(o,{width:"narrow",context:"formatting"});case"eeeeee":return t.day(o,{width:"short",context:"formatting"});default:return t.day(o,{width:"wide",context:"formatting"})}},c:function(e,n,t,r){var o=e.getUTCDay(),i=(o-r.weekStartsOn+8)%7||7;switch(n){case"c":return String(i);case"cc":return j(i,n.length);case"co":return t.ordinalNumber(i,{unit:"day"});case"ccc":return t.day(o,{width:"abbreviated",context:"standalone"});case"ccccc":return t.day(o,{width:"narrow",context:"standalone"});case"cccccc":return t.day(o,{width:"short",context:"standalone"});default:return t.day(o,{width:"wide",context:"standalone"})}},i:function(e,n,t){var r=e.getUTCDay(),o=0===r?7:r;switch(n){case"i":return String(o);case"ii":return j(o,n.length);case"io":return t.ordinalNumber(o,{unit:"day"});case"iii":return t.day(r,{width:"abbreviated",context:"formatting"});case"iiiii":return t.day(r,{width:"narrow",context:"formatting"});case"iiiiii":return t.day(r,{width:"short",context:"formatting"});default:return t.day(r,{width:"wide",context:"formatting"})}},a:function(e,n,t){var r=e.getUTCHours()/12>=1?"pm":"am";switch(n){case"a":case"aa":return t.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"aaa":return t.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return t.dayPeriod(r,{width:"narrow",context:"formatting"});default:return t.dayPeriod(r,{width:"wide",context:"formatting"})}},b:function(e,n,t){var r,o=e.getUTCHours();switch(r=12===o?"noon":0===o?"midnight":o/12>=1?"pm":"am",n){case"b":case"bb":return t.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"bbb":return t.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return t.dayPeriod(r,{width:"narrow",context:"formatting"});default:return t.dayPeriod(r,{width:"wide",context:"formatting"})}},B:function(e,n,t){var r,o=e.getUTCHours();switch(r=o>=17?"evening":o>=12?"afternoon":o>=4?"morning":"night",n){case"B":case"BB":case"BBB":return t.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"BBBBB":return t.dayPeriod(r,{width:"narrow",context:"formatting"});default:return t.dayPeriod(r,{width:"wide",context:"formatting"})}},h:function(e,n,t){if("ho"===n){var r=e.getUTCHours()%12;return 0===r&&(r=12),t.ordinalNumber(r,{unit:"hour"})}return T(e,n)},H:function(e,n,t){return"Ho"===n?t.ordinalNumber(e.getUTCHours(),{unit:"hour"}):M(e,n)},K:function(e,n,t){var r=e.getUTCHours()%12;return"Ko"===n?t.ordinalNumber(r,{unit:"hour"}):j(r,n.length)},k:function(e,n,t){var r=e.getUTCHours();return 0===r&&(r=24),"ko"===n?t.ordinalNumber(r,{unit:"hour"}):j(r,n.length)},m:function(e,n,t){return"mo"===n?t.ordinalNumber(e.getUTCMinutes(),{unit:"minute"}):L(e,n)},s:function(e,n,t){return"so"===n?t.ordinalNumber(e.getUTCSeconds(),{unit:"second"}):q(e,n)},S:function(e,n){return D(e,n)},X:function(e,n,t,r){var o=(r._originalDate||e).getTimezoneOffset();if(0===o)return"Z";switch(n){case"X":return U(o);case"XXXX":case"XX":return z(o);default:return z(o,":")}},x:function(e,n,t,r){var o=(r._originalDate||e).getTimezoneOffset();switch(n){case"x":return U(o);case"xxxx":case"xx":return z(o);default:return z(o,":")}},O:function(e,n,t,r){var o=(r._originalDate||e).getTimezoneOffset();switch(n){case"O":case"OO":case"OOO":return"GMT"+P(o,":");default:return"GMT"+z(o,":")}},z:function(e,n,t,r){var o=(r._originalDate||e).getTimezoneOffset();switch(n){case"z":case"zz":case"zzz":return"GMT"+P(o,":");default:return"GMT"+z(o,":")}},t:function(e,n,t,r){var o=r._originalDate||e;return j(Math.floor(o.getTime()/1e3),n.length)},T:function(e,n,t,r){return j((r._originalDate||e).getTime(),n.length)}};function P(e,n){var t=e>0?"-":"+",r=Math.abs(e),o=Math.floor(r/60),i=r%60;if(0===i)return t+String(o);var a=n||"";return t+String(o)+a+j(i,2)}function U(e,n){return e%60==0?(e>0?"-":"+")+j(Math.abs(e)/60,2):z(e,n)}function z(e,n){var t=n||"",r=e>0?"-":"+",o=Math.abs(e);return r+j(Math.floor(o/60),2)+t+j(o%60,2)}const Y=W;var H=function(e,n){switch(e){case"P":return n.date({width:"short"});case"PP":return n.date({width:"medium"});case"PPP":return n.date({width:"long"});default:return n.date({width:"full"})}},O=function(e,n){switch(e){case"p":return n.time({width:"short"});case"pp":return n.time({width:"medium"});case"ppp":return n.time({width:"long"});default:return n.time({width:"full"})}};const N={p:O,P:function(e,n){var t,r=e.match(/(P+)(p+)?/)||[],o=r[1],i=r[2];if(!i)return H(e,n);switch(o){case"P":t=n.dateTime({width:"short"});break;case"PP":t=n.dateTime({width:"medium"});break;case"PPP":t=n.dateTime({width:"long"});break;default:t=n.dateTime({width:"full"})}return t.replace("{{date}}",H(o,n)).replace("{{time}}",O(i,n))}};var F=["D","DD"],X=["YY","YYYY"];function R(e,n,t){if("YYYY"===e)throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(n,"`) for formatting years to the input `").concat(t,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("YY"===e)throw new RangeError("Use `yy` instead of `YY` (in `".concat(n,"`) for formatting years to the input `").concat(t,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("D"===e)throw new RangeError("Use `d` instead of `D` (in `".concat(n,"`) for formatting days of the month to the input `").concat(t,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("DD"===e)throw new RangeError("Use `dd` instead of `DD` (in `".concat(n,"`) for formatting days of the month to the input `").concat(t,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"))}var G={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function J(e){return function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=n.width?String(n.width):e.defaultWidth;return e.formats[t]||e.formats[e.defaultWidth]}}const Q={date:J({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:J({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:J({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})};var _={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function Z(e){return function(n,t){var r;if("formatting"===(null!=t&&t.context?String(t.context):"standalone")&&e.formattingValues){var o=e.defaultFormattingWidth||e.defaultWidth,i=null!=t&&t.width?String(t.width):o;r=e.formattingValues[i]||e.formattingValues[o]}else{var a=e.defaultWidth,d=null!=t&&t.width?String(t.width):e.defaultWidth;r=e.values[d]||e.values[a]}return r[e.argumentCallback?e.argumentCallback(n):n]}}const $={ordinalNumber:function(e,n){var t=Number(e),r=t%100;if(r>20||r<10)switch(r%10){case 1:return t+"st";case 2:return t+"nd";case 3:return t+"rd"}return t+"th"},era:Z({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:Z({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(e){return e-1}}),month:Z({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:Z({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:Z({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})};function V(e){return function(n){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=t.width,o=r&&e.matchPatterns[r]||e.matchPatterns[e.defaultMatchWidth],i=n.match(o);if(!i)return null;var a,d=i[0],s=r&&e.parsePatterns[r]||e.parsePatterns[e.defaultParseWidth],c=Array.isArray(s)?function(e,n){for(var t=0;t<e.length;t++)if(e[t].test(d))return t}(s):function(e,n){for(var t in e)if(e.hasOwnProperty(t)&&e[t].test(d))return t}(s);return a=e.valueCallback?e.valueCallback(c):c,{value:a=t.valueCallback?t.valueCallback(a):a,rest:n.slice(d.length)}}}var K,ee={ordinalNumber:(K={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(e){return parseInt(e,10)}},function(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},t=e.match(K.matchPattern);if(!t)return null;var r=t[0],o=e.match(K.parsePattern);if(!o)return null;var i=K.valueCallback?K.valueCallback(o[0]):o[0];return{value:i=n.valueCallback?n.valueCallback(i):i,rest:e.slice(r.length)}}),era:V({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:V({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(e){return e+1}}),month:V({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:V({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:V({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})};const ne={code:"en-US",formatDistance:function(e,n,t){var r,o=G[e];return r="string"==typeof o?o:1===n?o.one:o.other.replace("{{count}}",n.toString()),null!=t&&t.addSuffix?t.comparison&&t.comparison>0?"in "+r:r+" ago":r},formatLong:Q,formatRelative:function(e,n,t,r){return _[e]},localize:$,match:ee,options:{weekStartsOn:0,firstWeekContainsDate:1}};var te=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,re=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,oe=/^'([^]*?)'?$/,ie=/''/g,ae=/[a-zA-Z]/;function de(e,n,t){var r,o,i,a,d,s,c,l,u,A,m,f,p,C,v,B,I,x;h(2,arguments);var j=String(n),k=w(),S=null!==(r=null!==(o=null==t?void 0:t.locale)&&void 0!==o?o:k.locale)&&void 0!==r?r:ne,E=y(null!==(i=null!==(a=null!==(d=null!==(s=null==t?void 0:t.firstWeekContainsDate)&&void 0!==s?s:null==t||null===(c=t.locale)||void 0===c||null===(l=c.options)||void 0===l?void 0:l.firstWeekContainsDate)&&void 0!==d?d:k.firstWeekContainsDate)&&void 0!==a?a:null===(u=k.locale)||void 0===u||null===(A=u.options)||void 0===A?void 0:A.firstWeekContainsDate)&&void 0!==i?i:1);if(!(E>=1&&E<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var T=y(null!==(m=null!==(f=null!==(p=null!==(C=null==t?void 0:t.weekStartsOn)&&void 0!==C?C:null==t||null===(v=t.locale)||void 0===v||null===(B=v.options)||void 0===B?void 0:B.weekStartsOn)&&void 0!==p?p:k.weekStartsOn)&&void 0!==f?f:null===(I=k.locale)||void 0===I||null===(x=I.options)||void 0===x?void 0:x.weekStartsOn)&&void 0!==m?m:0);if(!(T>=0&&T<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(!S.localize)throw new RangeError("locale must contain localize property");if(!S.formatLong)throw new RangeError("locale must contain formatLong property");var M=b(e);if(!function(e){if(h(1,arguments),!function(e){return h(1,arguments),e instanceof Date||"object"===g(e)&&"[object Date]"===Object.prototype.toString.call(e)}(e)&&"number"!=typeof e)return!1;var n=b(e);return!isNaN(Number(n))}(M))throw new RangeError("Invalid time value");var L=function(e){var n=new Date(Date.UTC(e.getFullYear(),e.getMonth(),e.getDate(),e.getHours(),e.getMinutes(),e.getSeconds(),e.getMilliseconds()));return n.setUTCFullYear(e.getFullYear()),e.getTime()-n.getTime()}(M),q=function(e,n){return h(2,arguments),function(e,n){h(2,arguments);var t=b(e).getTime(),r=y(n);return new Date(t+r)}(e,-y(n))}(M,L),D={firstWeekContainsDate:E,weekStartsOn:T,locale:S,_originalDate:M};return j.match(re).map((function(e){var n=e[0];return"p"===n||"P"===n?(0,N[n])(e,S.formatLong):e})).join("").match(te).map((function(r){if("''"===r)return"'";var o,i,a=r[0];if("'"===a)return(i=(o=r).match(oe))?i[1].replace(ie,"'"):o;var d,s=Y[a];if(s)return null!=t&&t.useAdditionalWeekYearTokens||(d=r,-1===X.indexOf(d))||R(r,n,String(e)),null!=t&&t.useAdditionalDayOfYearTokens||!function(e){return-1!==F.indexOf(e)}(r)||R(r,n,String(e)),s(q,r,S.localize,D);if(a.match(ae))throw new RangeError("Format string contains an unescaped latin alphabet character `"+a+"`");return r})).join("")}function se(e,n="",t="",r=""){const o=document.createElement(e);if("input"==e){if(o.type=n,"text"==n)return o.id=t,o.name=t,o.placeholder=r,o;if("radio"==n)return o.id=t,o.value=t.slice(-1),o.name=r,o}if(n)if(n.includes(" ")){const e=n.split(" ");for(const n in e)o.classList.add(e[n])}else o.classList.add(n);return"select"==e&&(o.name=r,o.id=t),"option"==e&&(o.id=t,o.value=r,o.innerHTML=r),"textarea"==e&&(o.id=t,o.name=t,o.innerHTML=r),"label"==e?(o.htmlFor=t,o.innerHTML=r,o):"img"==e?(o.src=t,o.alt=r,o):"a"==e?(o.href=t,o.innerHTML=r,o):"form"==e?(o.id=t,o):(t&&(o.id=t),r&&(o.innerHTML=r),o)}function ce(e){e.forEach((e=>{e.classList.remove("selected")}))}const le="#E0175A",ue="#ECB329",Ae="#33C6F1",me="#29B77F";class fe{id=Date.now();constructor(e,n,t,r){this.title=e,this.desc=n,this.dueDate=t,this.priority=r}get title(){return this._title}set title(e){this._title=e}get desc(){return this._desc}set desc(e){this._desc=e}get dueDate(){return this._dueDate}set dueDate(e){this._dueDate=e}get priority(){return this._priority}set priority(e){this._priority=e}get id(){return this._id}toJSON(){return{title:this.title,desc:this.desc,dueDate:this.dueDate,priority:this.priority,id:this.id}}}function pe(){const e=[];for(const n in Pe)e.push(Object.keys(Pe[n])[0]);return e}function ge(e){const n=pe();for(const t in n)if(n[t]==e)return t}function he(e,n,t="",r="",o=""){const i=new fe(n,t,r,o),a=ge(e);Pe[a][e].push(i),Ue()}function be(e,n){const t=ge(e),r=Pe[t][e];for(const e in r)if(r[e].id==n)return[t,e];return!1}function ye(e,n){const t=be(e,n);Pe[t[0]][e].splice(t[1],1),Ue()}function Ce(e,n){const t=be(e,n);return Pe[t[0]][e][t[1]]}function ve(e,n="",t="",r="",o="4",i=""){function a(e){const n=document.querySelector("#form-priority-container-1 .form-priority-label"),t=document.querySelector("#form-priority-container-2 .form-priority-label"),r=document.querySelector("#form-priority-container-3 .form-priority-label"),o=document.querySelector("#form-priority-container-4 .form-priority-label");if(n&&t&&r&&o)switch(ce([n,t,r,o]),e){case"1":n.classList.add("selected");break;case"2":t.classList.add("selected");break;case"3":r.classList.add("selected");break;case"4":o.classList.add("selected")}}const d=se("form","","form"),s=se("div","","form-title-container"),c=se("input","text","form-title","Task");c.required=!0,n&&(c.value=n);const l=se("div","","form-close-btn");l.innerHTML='<i class="fa-solid fa-xmark"></i>',l.addEventListener("click",(e=>Be(e))),s.append(c,l);const u=se("div","","form-desc-container"),A=se("textarea","","form-desc");A.placeholder="Description",A.style.resize="none",A.rows="5",t&&(A.value=t),u.append(A);const m=se("div","","form-project-container"),f=se("div","","form-project-text","Add to: "),p=se("select","","form-project","form-project"),g=pe();for(const n in g){const t=se("option","","",g[n]);g[n]==e&&(t.selected="selected"),p.append(t)}m.append(f,p);const h=se("div","","form-duedate-container"),b=se("div","","form-duedate-text","Due date: "),y=se("input","date","form-duedate");r&&(y.value=r),h.append(b,y);const C=se("div","","form-priority-container"),v=se("div","","form-priority-text","Priority: "),B=se("div","","form-priority-container-1"),w=se("input","radio","form-priority-1","form-priority"),I=se("label","form-priority-label","form-priority-1");I.innerHTML=`<i class="fa-solid fa-flag" style="color: ${le}"></i>`,I.addEventListener("click",(()=>a("1"))),B.append(I,w);const x=se("div","","form-priority-container-2"),j=se("input","radio","form-priority-2","form-priority"),k=se("label","form-priority-label","form-priority-2");k.innerHTML=`<i class="fa-solid fa-flag" style="color: ${ue}"></i>`,k.addEventListener("click",(()=>a("2"))),x.append(k,j);const S=se("div","","form-priority-container-3"),E=se("input","radio","form-priority-3","form-priority"),T=se("label","form-priority-label","form-priority-3");T.innerHTML=`<i class="fa-solid fa-flag" style="color: ${Ae}"></i>`,T.addEventListener("click",(()=>a("3"))),S.append(T,E);const M=se("div","","form-priority-container-4"),L=se("input","radio","form-priority-4","form-priority"),q=se("label","form-priority-label","form-priority-4");switch(q.innerHTML=`<i class="fa-solid fa-flag" style="color: ${me}"></i>`,q.addEventListener("click",(()=>a("4"))),M.append(q,L),C.append(v,B,x,S,M),o){case"1":w.checked=!0,I.classList.add("selected");break;case"2":j.checked=!0,k.classList.add("selected");break;case"3":E.checked=!0,T.classList.add("selected");break;case"4":L.checked=!0,q.classList.add("selected")}const D=se("button","","form-delete-btn","Delete Task"),W=se("button","","form-save-btn","Save Changes");D.addEventListener("click",(n=>function(e,n,t=""){t&&ye(n,t),Be(e)}(n,e,i))),W.type="submit",d.addEventListener("submit",(n=>function(n,t=""){const r=n.key;if(r&&"Enter"==r||!r&&n.target){n.preventDefault();const r=document.querySelector("#form"),o=r["form-title"].value,i=r["form-project"].value,a=r["form-desc"].value,d=r["form-duedate"].value,s=r["form-priority"].value;t?function(e,n,t,r="",o="",i,a){if(e==n){const n=be(e,a);if(n){const a=Pe[n[0]][e][n[1]];a.title=t,r&&(a.desc=r),o&&(a.dueDate=o),a.priority=i,Ue()}}else be(n,a)&&(ye(n,a),he(e,t,r,o,i))}(i,e,o,a,d,s,t):he(i,o,a,d,s),Be(n)}}(n,i)));const P=se("div","","form-actions-container");return P.append(D,W),d.append(s,u,m,h,C,P),d}function Be(e){if(e.target){e.preventDefault();const n=document.querySelector("#content"),t=document.querySelector("#form"),r=document.querySelector(".project-add-todo-btn"),o=r.id;t.remove(),r.style.display="flex",n.classList.remove("with-form"),Ie(o)}}function we(e){const n=ge(e),t=Pe[n][e],r=[];for(const e in t)r.push(t[e].title);return r}function Ie(e=""){const n=document.querySelector("#content");let t;if(n.innerHTML="",e)t=ge(e);else{const e=document.querySelector("#sidebar-projects").querySelector(".selected");t=e?ge(e.id):0}const r=Pe[t],o=Object.keys(r)[0],i=r[o],a=function(e){const n=se("div","project-container",e),t=se("div","project-title-container"),r=se("div","project-title","",e),o=se("div","project-todo-container"),i=se("div","project-add-todo-btn",e),a=se("div","project-add-todo-icon");a.innerHTML='<i class="fa-solid fa-plus"></i>';const d=se("div","project-add-todo-text","","Add New Task");return i.append(a,d),i.addEventListener("click",(e=>function(e){if(e.target){const n=document.querySelector("#content"),t=e.target.closest(".project-container").id,r=e.target.closest(".project-add-todo-btn"),o=ve(t);n.append(o),n.classList.add("with-form"),document.querySelector("#form-title").focus(),r.style.display="none"}}(e))),t.append(r),n.append(t,o,i),n}(o);for(const e in i){const n=Ee(),t=i[e],r=xe(t.title,t.desc,(d=t.dueDate)?de(new Date(d),"dd/MM/yy"):"",t.priority,t.id);a.querySelector(".project-todo-container").append(n,r)}var d;const s=Ee();a.querySelector(".project-todo-container").append(s),n.append(a),Me(o)}function xe(e,n="",t="",r="4",o){const i=se("div","todo-container",o),a=new AbortController;i.addEventListener("click",(e=>function(e,n){if(e.target)if("todo-checkbox"==e.target.classList)n.abort();else{document.querySelector("#form")&&Be(e);const n=document.body,t=document.querySelector(".project-add-todo-btn"),r=e.target.closest(".project-container").id,o=Ce(r,e.target.closest(".todo-container").id);if(o){const e=ve(r,o.title,o.desc,o.dueDate,o.priority,o.id);n.append(e),n.style.gridTemplateColumns="16rem 1fr 24rem",n.style.gridTemplateAreas='"sidebar header form" "sidebar content form"',document.querySelector("#form-title").focus(),t.style.display="none"}}}(e,a)),{signal:a.signal});const d=se("div","todo-title-container"),s=se("button","todo-checkbox");s.addEventListener("click",(e=>function(e){if(e.target){const n=e.target.closest(".todo-container").id;ye(e.target.closest(".project-container").id,n),Ie()}}(e)));const c=se("div","todo-title","",e),l=se("div","todo-info-container");if(t){const e=se("div","todo-duedate","","📅 "+t);l.append(e)}const u=se("div","todo-priority-container"),A=se("div","todo-priority-icon");A.innerHTML='<i class="fa-solid fa-flag"></i>',A.style.color=je(r),s.style.borderColor=je(r);const m=se("div","todo-priority","",r);if(u.append(A,m),l.append(u),d.append(s,c,l),n){const e=se("div","todo-desc","",n);i.append(d,e)}else i.append(d);return i.draggable=!0,i.addEventListener("dragstart",(e=>function(e){e.target&&e.target.closest(".todo-container").classList.add("dragging")}(e))),i.addEventListener("dragover",(e=>e.preventDefault())),i.addEventListener("dragend",(e=>function(e){const n=document.querySelector(".hovering");if(e.target&&n){const t=e.target.closest(".todo-container"),r=t.id,o=t.closest(".project-container").id,i=be(o,r),a=n.nextSibling;let d;if(a){const e=be(o,a);d=i[1]<e[1]?[i[0],e[1]-1]:[i[0],e[1]]}else d=[i[0],we(o).length];!function(e,n,t,r){const o=Ce(e,n);Pe[r[0]][e].splice(t[1],1),Pe[r[0]][e].splice(r[1],0,o)}(o,r,i,d),t.classList.remove("dragging"),Ie()}}(e))),i}function je(e){switch(e){case"1":return le;case"2":return ue;case"3":return Ae;case"4":return me}}function ke(){const e=document.querySelector("#sidebar-projects");e.innerHTML="";for(const n in Pe){const t=Pe[n],r=Object.keys(t)[0],o=Ee(),i=Se(r);e.append(o,i)}const n=Ee();e.append(n),function(){const e=document.querySelector("#form-project");if(e){e.innerHTML="";const n=pe();for(const t in n){const r=se("option","","",n[t]);e.append(r)}}}()}function Se(e){const n=se("div","sidebar-project",e),t=se("div","sidebar-project-name","",e);if(n.append(t),!["Upcoming","Today"].includes(e)){const e=se("div","sidebar-edit-btn");e.innerHTML='<i class="fa-solid fa-pen"></i>';const t=se("div","sidebar-delete-btn");t.innerHTML='<i class="fa-solid fa-trash"></i>',e.addEventListener("click",(e=>function(e){if(e.target){const n=e.target.closest(".sidebar-project"),t=Te(n.id);n.replaceWith(t),Le(),document.querySelector("#sidebar-add-project-btn").style.display="none",[...document.querySelectorAll(".sidebar-edit-btn"),...document.querySelectorAll(".sidebar-delete-btn")].forEach((e=>{e.style.display="none"}))}}(e))),t.addEventListener("click",(e=>function(e){e.target&&(!function(e){const n=ge(e);Pe.splice(n,1),Ue()}(e.target.closest(".sidebar-project").id),ke(),Ie())}(e))),n.append(e,t)}n.draggable=!0;const r=new AbortController;return n.addEventListener("click",(e=>function(e,n){if(e.target)if(Array(e.target.classList[0]).includes("fa-solid"))n.abort();else{const n=e.target.closest(".sidebar-project").id;Me(n),Ie(n)}}(e,r)),{signal:r.signal}),n.addEventListener("dragstart",(e=>function(e){e.target&&e.target.closest(".sidebar-project").classList.add("dragging")}(e))),n.addEventListener("dragover",(e=>e.preventDefault())),n.addEventListener("dragend",(e=>function(e){const n=document.querySelector(".hovering");if(e.target&&n){const t=e.target.closest(".sidebar-project"),r=ge(t.id),o=n.nextSibling;let i;if(o){const e=ge(o.id);i=r<e?e-1:e}else i=pe().length;!function(e,n){const t=Pe[e];Pe.splice(e,1),Pe.splice(n,0,t)}(r,i),t.classList.remove("dragging"),ke()}}(e))),n}function Ee(){const e=se("div","segment");return e.addEventListener("dragover",(e=>function(e){if(e.target){e.preventDefault();const n=e.target,t=document.querySelector(".dragging");n.parentElement==t.parentElement&&n!=t.nextSibling&&n!=t.previousSibling&&n.classList.add("hovering")}}(e))),e.addEventListener("dragleave",(e=>function(e){e.target&&e.target.classList.remove("hovering")}(e))),e}function Te(e=""){const n=se("form","","project-form");if(e){const t=se("input","text","project-form-title");t.defaultValue=e;const r=se("div","","project-form-add-btn");r.innerHTML='<i class="fa-solid fa-check fa-xl"></i>';const o=se("div","","project-form-close-btn");o.innerHTML='<i class="fa-solid fa-x fa-lg"></i>',o.addEventListener("click",(e=>function(e){e.target&&(e.preventDefault(),document.querySelector("#sidebar-add-project-btn").style.display="flex",ke())}(e))),r.addEventListener("click",(n=>De(n,e))),n.addEventListener("submit",(n=>De(n,e))),n.addEventListener("keydown",(n=>De(n,e))),n.append(t,o,r)}else{const e=se("input","text","project-form-title","Project Name"),t=se("div","","project-form-close-btn");t.innerHTML='<i class="fa-solid fa-x fa-lg"></i>';const r=se("div","","project-form-add-btn");r.innerHTML='<i class="fa-solid fa-circle-plus fa-lg"></i>',t.addEventListener("click",(e=>function(e){if(e.target){e.preventDefault();const n=document.querySelector("#project-form"),t=document.querySelector("#sidebar-add-project-btn");n.remove(),t.style.display="flex",[...document.querySelectorAll(".sidebar-edit-btn"),...document.querySelectorAll(".sidebar-delete-btn")].forEach((e=>{e.style.display="flex"}))}}(e))),r.addEventListener("click",(e=>qe(e))),n.addEventListener("submit",(e=>qe(e))),n.addEventListener("keydown",(e=>qe(e))),n.append(e,t,r)}return n}function Me(e){ce(document.querySelectorAll(".sidebar-project")),document.querySelector("#sidebar-projects").querySelector(`[id='${e}']`).classList.add("selected")}function Le(){const e=document.querySelector("#project-form-title");if(e.value){const n=e.value.length;e.selectionStart=e.selectionEnd=n}e.focus()}function qe(e){const n=e.key;if(n&&"Enter"==n||!n&&e.target){e.preventDefault();const n=document.querySelector("#project-form"),t=n["project-form-title"].value,r=document.querySelector("#sidebar-add-project-btn");t?!function(e){if(pe().includes(e))return!1;{const n={};return n[e]=[],Pe.push(n),Ue(),!0}}(t)?(window.alert("Project Title already in use!"),Le()):(Ie(),ke(),n.remove(),r.style.display="flex",[...document.querySelectorAll(".sidebar-edit-btn"),...document.querySelectorAll(".sidebar-delete-btn")].forEach((e=>{e.style.display="flex"}))):(window.alert("Project Title cannot be empty!"),projectFormTitle.value=oldProjectTitle,Le())}}function De(e,n){const t=e.key;if(t&&"Enter"==t||!t&&e.target){e.preventDefault();const t=document.querySelector("#project-form"),r=document.querySelector("#project-form-title"),o=t["project-form-title"].value;if(o){const e=document.querySelector("#sidebar-add-project-btn"),t=function(e,n){if(e!=n){if(pe().includes(n))return!1;{const t=ge(e),r={};return r[n]=Pe[t][e],Pe[t]=r,Ue(),!0}}}(n,o);null==t?(e.style.display="flex",ke()):0==t?(window.alert("Project Title already in use!"),r.value=n,Le()):1==t&&(e.style.display="flex",ke(),Ie())}else window.alert("Project Title cannot be empty!"),r.value=n,Le()}}localStorage.getItem("todoList")||localStorage.setItem("todoList",JSON.stringify([{Upcoming:[]},{Today:[]}]));const We=JSON.parse(localStorage.getItem("todoList")),Pe=We;function Ue(){localStorage.setItem("todoList",JSON.stringify(We))}const ze=function(){const e=se("div","","header"),n=se("div","","show-sidebar-btn");n.innerHTML='<i class="fa-solid fa-bars"></i>',n.style.display="none",n.addEventListener("click",(e=>function(e){if(e.target){const e=document.querySelector("#sidebar"),n=document.querySelector("#show-sidebar-btn"),t=document.querySelector("#hide-sidebar-btn");e.style.display="flex",document.body.style='grid-template-areas:"sidebar header" "sidebar content";grid-template-columns: 16rem 1fr',n.style.display="none",t.style.display="flex"}}(e)));const t=se("div","logo-container"),r=se("img","logo","./images/logo.png","Todo App icon"),o=se("div","logo-title","","My Todo"),i=se("div","","user-container"),a=se("div","user-icon");return a.innerHTML='<i class="fa-solid fa-user fa-xl"></i>',t.append(r,o),i.append(a),e.append(n,t,i),e}(),Ye=function(){const e=se("div","","sidebar"),n=se("div","","sidebar-title-container"),t=se("div","","sidebar-title","Projects"),r=se("div","","hide-sidebar-btn");r.innerHTML='<i class="fa-solid fa-bars"></i>',r.addEventListener("click",(e=>function(e){if(e.target){const e=document.querySelector("#sidebar"),n=document.querySelector("#hide-sidebar-btn"),t=document.querySelector("#show-sidebar-btn");e.style.display="none",n.style.display="none",document.body.style='grid-template-areas:"header" "content";grid-template-columns: 1fr',t.style.display="flex"}}(e))),n.append(t,r);const o=se("div","","sidebar-add-project-btn"),i=se("div","","sidebar-add-project-icon");i.innerHTML='<i class="fa-solid fa-plus"></i>';const a=se("div","","sidebar-project-add-text","Add New Project");o.append(i,a);const d=se("div","","sidebar-projects");return o.addEventListener("click",(e=>function(e){if(e.target){const e=document.querySelector("#sidebar-projects"),n=Te();e.append(n);const t=document.querySelector("#project-form-title"),r=document.querySelector("#sidebar-add-project-btn");t.focus(),r.style.display="none",[...document.querySelectorAll(".sidebar-edit-btn"),...document.querySelectorAll(".sidebar-delete-btn")].forEach((e=>{e.style.display="none"}))}}(e))),n.append(t),e.append(n,d,o),e}(),He=se("div","","content");document.body.append(Ye,ze,He),ke(),Ie()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,